var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddFirstAndLastNameAttribute1669010304048.html",[0,0.271,1,4.114]],["body/classes/AddFirstAndLastNameAttribute1669010304048.html",[0,0.335,1,7.521,2,0.781,3,0.083,4,0.074,5,0.065,6,8.464,7,5.708,8,1.973,9,3.832,10,0.258,11,0.88,12,0.99,13,1.238,14,4.151,15,2.123,16,3.478,17,3.478,18,0.263,19,0.007,20,0.577,21,1.636,22,1.355,23,0.423,24,5.708,25,3.478,26,4.434,27,5.708,28,0.977,29,0.754,30,1.124,31,2.047,32,3.478,33,5.708,34,0.111,35,1.805,36,0.083,37,2.009,38,3.577,39,3.577,40,3.929,41,1.901,42,3.478,43,5.225,44,4.052,45,2.305,46,5.225,47,4.052,48,3.577,49,3.384,50,0.005,51,0.005]],["title/classes/AddLocalFileTable1675692342862.html",[0,0.271,52,4.114]],["body/classes/AddLocalFileTable1675692342862.html",[0,0.275,2,0.643,3,0.068,4,0.061,5,0.054,8,1.736,9,3.482,10,0.371,11,0.774,12,0.929,13,1.089,14,4.023,15,2.011,16,3.059,17,3.059,18,0.239,19,0.007,20,0.475,21,1.347,22,1.116,23,0.384,25,3.059,26,4.268,28,0.86,29,0.663,30,0.989,31,1.896,32,3.059,34,0.091,35,1.486,36,0.068,37,2.186,38,4.482,39,4.329,40,4.201,42,3.74,44,4.056,45,2.74,48,4.026,49,2.182,50,0.005,51,0.005,52,6.967,53,7.841,54,4.7,55,4.7,56,4.7,57,4.7,58,2.294,59,5.619,60,2.154,61,4.737,62,3.368,63,3.832,64,1.796,65,3.832,66,3.574,67,1.88,68,1.88,69,4.595,70,2.808,71,4.56,72,3.05,73,5.726,74,5.326,75,2.977,76,4.876,77,5.698,78,2.977,79,5.227,80,4.684,81,3.831,82,3.832,83,2.899,84,4.215,85,2.396,86,4.876,87,2.922,88,2.922]],["title/classes/AddPostTable1678073082722.html",[0,0.271,89,4.114]],["body/classes/AddPostTable1678073082722.html",[0,0.32,2,0.748,3,0.08,4,0.071,5,0.062,8,1.919,9,3.754,10,0.247,11,0.856,12,0.976,13,1.204,14,4.104,15,2.099,16,3.383,17,3.383,18,0.258,19,0.007,20,0.552,21,1.567,22,1.298,23,0.414,25,3.383,26,4.399,28,0.951,29,0.733,30,1.093,31,2.014,32,3.383,34,0.106,35,1.729,36,0.08,37,1.977,38,3.862,39,3.479,40,3.866,42,2.608,44,4.628,45,2.728,48,2.683,50,0.005,51,0.005,58,1.956,60,2.383,70,3.266,71,4.374,72,3.548,78,2.538,80,4.237,81,3.266,83,2.472,84,3.812,85,2.043,87,3.399,88,3.399,89,7.4,90,8.328,91,5.468,92,5.468,93,5.468,94,5.468,95,3.045,96,4.158,97,4.858,98,3.266,99,4.858,100,5.392,101,6.301]],["title/classes/AddRoleTable1675697129483.html",[0,0.271,102,4.114]],["body/classes/AddRoleTable1675697129483.html",[0,0.272,2,0.635,3,0.068,4,0.06,5,0.053,8,1.721,9,3.459,10,0.39,11,0.768,12,0.955,13,1.079,14,3.916,15,2.003,16,3.033,17,3.033,18,0.238,19,0.007,20,0.469,21,1.33,22,1.102,23,0.381,25,3.033,26,4.257,28,0.852,29,0.657,30,0.98,31,1.886,32,3.033,34,0.09,35,1.467,36,0.068,37,2.209,38,4.472,39,4.009,40,4.191,41,1.628,42,3.459,44,2.58,45,2.583,47,2.58,48,4.14,49,2.155,50,0.005,51,0.005,58,2.595,60,2.136,61,4.706,62,3.326,67,1.856,70,3.798,71,4.689,72,4.126,73,4.126,74,3.012,75,2.155,76,4.834,78,2.951,80,4.66,81,3.798,83,2.874,84,3.418,85,2.376,87,2.886,88,3.952,102,6.931,103,7.8,104,4.642,105,4.642,106,4.642,107,4.642,108,4.324,109,7.171,110,6.358,111,6.358,112,5.183,113,5.183,114,3.533,115,5.183,116,3.533,117,5.183,118,3.784,119,2.098,120,3.157]],["title/classes/AddTopicTable1678958507781.html",[0,0.271,121,4.114]],["body/classes/AddTopicTable1678958507781.html",[0,0.271,2,0.632,3,0.067,4,0.06,5,0.053,8,1.715,9,3.451,10,0.39,11,0.765,12,0.976,13,1.076,14,3.911,15,2,16,3.023,17,3.023,18,0.237,19,0.007,20,0.467,21,2.073,22,1.097,23,0.38,25,3.023,26,4.252,28,0.85,29,0.655,30,0.977,31,1.883,32,3.023,34,0.09,35,1.461,36,0.067,37,2.195,38,4.425,39,4.002,40,4.187,42,3.451,44,3.522,45,2.728,47,2.568,48,4.134,49,2.145,50,0.005,51,0.005,58,2.268,60,2.129,70,3.786,71,4.682,72,4.113,75,2.145,78,2.942,80,4.65,81,3.786,83,2.865,84,3.407,85,2.703,88,3.94,95,2.317,96,5.5,99,5.631,116,3.522,121,6.917,122,7.784,123,4.62,124,4.62,125,4.62,126,4.62,127,2.893,128,2.659,129,4.542,130,5.897,131,2.659,132,6.337,133,7.808,134,7.784,135,7.784,136,6.337,137,6.337,138,6.337,139,4.62,140,6.337,141,4.62]],["title/classes/AddUserProfileTable1669618726311.html",[0,0.271,142,4.114]],["body/classes/AddUserProfileTable1669618726311.html",[0,0.27,2,0.63,3,0.067,4,0.06,5,0.053,8,1.712,9,3.445,10,0.326,11,0.764,12,0.922,13,1.074,14,3.907,15,1.998,16,3.017,17,3.017,18,0.237,19,0.007,20,0.465,21,1.32,22,1.093,23,0.38,25,3.017,26,4.25,28,0.848,29,0.654,30,0.975,31,1.88,32,3.017,34,0.089,35,1.456,36,0.067,37,2.219,38,4.371,39,4.23,40,4.315,41,2.024,42,4.015,43,5.176,44,4.951,45,2.901,46,5.176,47,4.528,48,4.23,49,3.782,50,0.005,51,0.005,58,1.648,60,2.612,61,2.989,70,2.752,71,4.014,72,2.989,73,5.288,75,2.138,78,2.138,80,3.778,81,2.752,83,2.082,84,2.476,85,1.721,87,2.863,88,2.863,116,2.56,142,6.908,143,7.774,144,4.606,145,4.606,146,4.606,147,4.606,148,3.502,149,3.301,150,3.301,151,3.502,152,4.606,153,5.619,154,0.207,155,3.64,156,3.64,157,5.619,158,4.093]],["title/classes/AlterLastSignedInAtAttribute1678189980290.html",[0,0.271,159,4.114]],["body/classes/AlterLastSignedInAtAttribute1678189980290.html",[0,0.333,2,0.777,3,0.083,4,0.074,5,0.065,8,1.966,9,3.822,10,0.256,11,0.877,12,0.988,13,1.233,14,4.145,15,2.12,16,3.465,17,3.465,18,0.262,19,0.007,20,0.573,21,1.627,22,1.347,23,0.421,25,3.465,26,4.429,28,0.974,29,0.751,30,1.12,31,2.043,32,3.465,34,0.11,35,1.794,36,0.083,37,2.005,38,4.144,39,4.144,40,3.92,41,1.897,42,2.707,45,1.794,48,3.931,49,3.719,50,0.005,51,0.005,129,4.067,159,7.505,160,8.446,161,5.676,162,5.676,163,5.676,164,5.676,165,6.053]],["title/classes/AlterPhoneAttributeUniqueness1676900183425.html",[0,0.271,166,4.114]],["body/classes/AlterPhoneAttributeUniqueness1676900183425.html",[0,0.331,2,0.772,3,0.082,4,0.073,5,0.064,8,1.959,9,3.811,10,0.41,11,0.874,12,0.986,13,1.229,14,4.139,15,2.117,16,3.452,17,3.452,18,0.262,19,0.007,20,0.57,21,1.618,22,1.34,23,0.42,25,3.452,26,4.425,28,0.97,29,0.748,30,1.116,31,2.038,32,3.452,34,0.109,35,1.784,36,0.082,37,2.117,40,3.36,41,1.625,42,2.692,47,4.022,48,2.769,50,0.005,51,0.005,60,1.896,73,5.47,74,3.663,75,3.709,76,5.503,88,4.5,156,3.248,166,7.489,167,8.428,168,5.644,169,5.644,170,5.644,171,5.644,172,6.431,173,7.238,174,7.238]],["title/classes/AlterRoleNameAttribute1675699186800.html",[0,0.271,175,4.114]],["body/classes/AlterRoleNameAttribute1675699186800.html",[0,0.333,2,0.777,3,0.083,4,0.074,5,0.065,8,1.966,9,3.822,10,0.256,11,0.877,12,1.051,13,1.233,14,4.145,15,2.12,16,3.465,17,3.465,18,0.262,19,0.007,20,0.573,21,1.627,22,1.347,23,0.421,25,3.465,26,4.429,28,0.974,29,0.751,30,1.12,31,2.043,32,3.465,34,0.11,35,1.794,36,0.083,37,2.005,38,3.564,39,3.564,40,3.92,41,1.275,42,3.465,44,3.154,45,2.296,47,4.037,48,3.564,49,3.372,50,0.005,51,0.005,67,2.27,108,5.745,119,2.566,120,3.861,175,7.505,176,8.446,177,5.676,178,5.676,179,5.676,180,5.676]],["title/classes/AlterTablesCascade1678096726170.html",[0,0.271,181,4.114]],["body/classes/AlterTablesCascade1678096726170.html",[0,0.266,2,0.621,3,0.066,4,0.059,5,0.052,8,1.694,9,3.417,10,0.205,11,0.756,12,0.917,13,1.062,14,3.889,15,1.989,16,2.985,17,2.985,18,0.235,19,0.007,20,0.458,21,1.3,22,1.077,23,0.377,25,2.985,26,4.236,28,0.839,29,0.647,30,0.965,31,1.868,32,2.985,34,0.088,35,1.434,36,0.066,37,2.173,38,4.491,39,4.491,40,4.249,42,3.996,45,1.434,48,4.111,50,0.005,51,0.005,59,5.535,69,4.484,71,5.087,73,5.012,74,4.061,78,3.889,79,6.296,80,5.468,81,5.005,82,5.101,83,3.787,84,4.773,85,3.131,86,5.873,87,4.802,95,2.824,100,4.758,101,6.863,116,3.478,181,6.863,182,7.724,183,4.536,184,4.536,185,4.536,186,4.536,187,2.82]],["title/classes/AlterTablesCreatedAndUpdatedAt1678183368786.html",[0,0.271,188,4.114]],["body/classes/AlterTablesCreatedAndUpdatedAt1678183368786.html",[0,0.244,2,0.57,3,0.061,4,0.054,5,0.048,8,1.596,9,3.266,10,0.188,11,0.712,12,0.889,13,1.001,14,3.786,15,1.936,16,2.814,17,2.814,18,0.224,19,0.007,20,0.421,21,2.561,22,0.989,23,0.36,25,2.814,26,4.156,28,0.791,29,0.61,30,0.909,31,1.8,32,2.814,34,0.081,35,1.318,36,0.061,37,2.249,38,4.546,39,4.546,40,4.398,41,1.832,42,4.261,45,2.824,47,4.533,48,4.383,49,4.147,50,0.004,51,0.004,59,5.335,73,4.831,85,2.935,95,2.722,108,5.063,128,5.084,129,6.33,130,7.512,131,5.084,165,4.227,188,6.615,189,7.444,190,4.168,191,4.168,192,4.168,193,4.168,194,1.935]],["title/classes/AlterTablesIdentifierToUuid1676872212399.html",[0,0.271,195,4.114]],["body/classes/AlterTablesIdentifierToUuid1676872212399.html",[0,0.112,2,0.261,3,0.028,4,0.025,5,0.022,8,0.868,9,1.979,10,0.393,11,0.387,12,0.665,13,0.544,14,2.729,15,1.396,16,1.529,17,1.529,18,0.136,19,0.007,20,0.193,21,0.546,22,0.452,23,0.218,25,1.529,26,3.258,28,0.43,29,0.331,30,0.494,31,1.177,32,1.529,34,0.037,35,0.602,36,0.028,37,2.303,38,4.714,39,4.663,40,4.473,41,1.668,42,4.375,44,2.306,45,2.668,47,4.69,48,4.565,49,3.692,50,0.002,51,0.002,58,2.349,59,5.699,60,3.037,61,5.01,62,4.214,69,4.214,70,5.225,71,5.146,73,5.727,74,4.432,75,3.17,76,2.438,77,4.323,78,3.276,79,3.966,80,4.961,81,4.216,82,2.613,83,3.19,84,4.15,85,2.637,86,3.699,87,3.655,96,4.127,108,4.8,109,7.426,110,6.293,111,6.293,112,3.966,113,3.966,115,3.966,116,3.268,117,3.966,118,2.613,153,4.323,155,1.097,157,4.323,172,2.848,195,4.323,196,4.865,197,1.906,198,1.906,199,1.906,200,1.906,201,4.793,202,3.206,203,0.909,204,3.206,205,2.848]],["title/classes/AlterUserRolesAttribute1679276151891.html",[0,0.271,206,4.114]],["body/classes/AlterUserRolesAttribute1679276151891.html",[0,0.331,2,0.772,3,0.082,4,0.073,5,0.064,8,1.959,9,3.811,10,0.255,11,0.874,12,0.986,13,1.229,14,4.139,15,2.117,16,3.452,17,3.452,18,0.262,19,0.007,20,0.57,21,1.618,22,1.34,23,0.42,25,3.452,26,4.425,28,0.97,29,0.748,30,1.116,31,2.038,32,3.452,34,0.109,35,1.784,36,0.082,37,2.001,38,3.551,39,3.551,40,3.912,41,2.002,42,3.452,45,2.288,47,4.022,48,3.551,49,3.36,50,0.005,51,0.005,67,2.257,114,4.684,119,3.272,120,4.923,187,3.508,206,7.489,207,8.428,208,5.644,209,5.644,210,5.644,211,5.644]],["title/interfaces/ApiErrorResponseMetadata.html",[212,1.989,213,4.114]],["body/interfaces/ApiErrorResponseMetadata.html",[0,0.237,3,0.059,4,0.052,5,0.046,10,0.182,11,0.696,18,0.283,19,0.007,29,0.596,30,0.623,34,0.168,36,0.113,50,0.004,51,0.004,154,0.132,212,2.891,213,5.978,214,2.324,215,3.07,216,2.324,217,3.164,218,3.07,219,0.379,220,6.138,221,2.448,222,4.366,223,1.627,224,3.401,225,5.982,226,6.897,227,6.897,228,6.897,229,5.767,230,5.767,231,5.767,232,5.767,233,5.767,234,5.767,235,5.767,236,5.767,237,5.767,238,5.767,239,5.767,240,6.728,241,5.767,242,5.767,243,5.767,244,5.767,245,5.767,246,5.767,247,0.995,248,4.385,249,8.496,250,2.621,251,5.076,252,4.385,253,2.621,254,5.767,255,3.07,256,3.205,257,4.133,258,2.171,259,5.767,260,1.072,261,2.747,262,5.767,263,3.07,264,3.07,265,4.133,266,2.324,267,4.133,268,2.51,269,1.033,270,3.588,271,7.791,272,1.615,273,3.501,274,3.292,275,1.279,276,3.07,277,1.926,278,3.003,279,2.51,280,2.621,281,3.07,282,2.244,283,0.797,284,2.747,285,1.295,286,4.038,287,3.003,288,3.292,289,3.292,290,3.292,291,0.811]],["title/interfaces/ApiSuccessResponseMetadata.html",[212,1.989,292,3.774]],["body/interfaces/ApiSuccessResponseMetadata.html",[0,0.277,3,0.069,4,0.061,5,0.054,10,0.214,11,0.778,18,0.289,19,0.007,29,0.666,30,0.729,34,0.159,36,0.12,50,0.005,51,0.005,98,2.826,154,0.155,212,3.534,214,2.723,215,3.597,216,2.723,218,3.597,219,0.402,220,6.452,221,2.511,222,5.102,223,1.901,224,3.668,225,6.704,247,1.165,251,4.375,271,7.078,272,1.891,273,3.75,274,3.856,275,1.224,276,3.597,277,2.256,278,3.354,279,2.941,280,3.07,281,3.597,282,2.629,283,0.933,284,3.217,285,1.446,287,3.354,288,3.856,289,3.856,290,3.856,291,0.951,292,5.969,293,3.276,294,6.408,295,6.704,296,6.704,297,0.701,298,5.25,299,5.723,300,5.723,301,5.723,302,4.615,303,6.507,304,2.629,305,5.723,306,4.18,307,2.941,308,5.25,309,3.217,310,4.203,311,2.941,312,2.032,313,4.203]],["title/interfaces/ApiSuccessResponseMetadataOptions.html",[212,1.989,294,3.774]],["body/interfaces/ApiSuccessResponseMetadataOptions.html",[0,0.275,3,0.068,4,0.061,5,0.054,10,0.212,11,0.774,18,0.293,19,0.007,29,0.876,30,0.725,34,0.159,36,0.12,50,0.005,51,0.005,98,2.808,154,0.154,212,3.526,214,2.705,215,3.574,216,2.705,218,3.574,219,0.401,220,6.44,221,2.449,222,5.088,223,1.896,224,3.705,225,6.69,247,1.158,251,4.36,271,7.066,272,1.88,273,3.74,274,3.832,275,1.219,276,3.574,277,2.242,278,3.339,279,2.922,280,3.05,281,3.574,282,2.612,283,0.927,284,3.197,285,1.44,287,3.339,288,3.832,289,3.832,290,3.832,291,0.945,292,5.227,293,3.271,294,5.95,295,5.95,296,5.95,297,0.697,298,5.227,299,5.698,300,5.698,301,5.698,302,4.595,303,6.486,304,2.612,305,5.698,306,4.162,307,2.922,308,5.227,309,5.333,310,6.486,311,4.874,312,3.136,313,4.177]],["title/interfaces/AppConfigOptions.html",[212,1.989,314,3.317]],["body/interfaces/AppConfigOptions.html",[0,0.464,3,0.07,4,0.063,5,0.055,10,0.218,11,0.788,18,0.26,19,0.007,20,0.801,22,1.549,34,0.165,36,0.115,50,0.005,51,0.005,67,2.609,154,0.158,212,3.178,214,2.775,219,0.404,224,2.671,272,1.928,285,1.465,291,0.969,312,3.405,314,5.3,315,3.931,316,3.178,317,4.45,318,6.489,319,5.171,320,6.116,321,6.489,322,3.78,323,2.881,324,2.511,325,2.825,326,2.68,327,4.676,328,3.667,329,3.471,330,4.056,331,3.296,332,1.494,333,3.455,334,4.234,335,3.667,336,2.998,337,3.129,338,3.756,339,2.881,340,3.756,341,2.881,342,4.961,343,5.319,344,4.961,345,5.319,346,4.961,347,2.775,348,2.998,349,5.3,350,1.382,351,2.775,352,2.022,353,1.842,354,2.881,355,1.974,356,6.029,357,4.285,358,4.285,359,2.998,360,3.455,361,2.881,362,2.775,363,2.881,364,2.881,365,2.881,366,3.455,367,4.285,368,2.775,369,4.285,370,4.285,371,4.285,372,4.285]],["title/controllers/AppController.html",[277,2.208,373,3.774]],["body/controllers/AppController.html",[0,0.268,3,0.067,4,0.059,5,0.052,10,0.389,12,0.517,13,1.068,18,0.206,19,0.007,20,0.783,21,1.803,23,0.331,28,0.613,29,0.473,30,1.195,34,0.172,36,0.067,50,0.005,51,0.005,154,0.236,216,3.621,219,0.307,221,1.237,224,2.575,247,1.126,251,4.297,260,2.23,275,1.196,277,3.696,283,1.419,285,1.026,291,1.446,293,2.3,297,0.677,306,4.082,307,2.841,316,3.329,373,5.128,374,2.38,375,4.571,376,7.193,377,4.571,378,5.772,379,1.387,380,4.571,381,4.571,382,4.571,383,7.788,384,5.271,385,5.823,386,3.758,387,1.871,388,4.571,389,4.279,390,2.92,391,3.758,392,7.193,393,4.571,394,4.571,395,6.291,396,3.726,397,3.109,398,3.726,399,6.291,400,3.109,401,2.703,402,1.708,403,2.403,404,4.783,405,5.128,406,3.726,407,5.128,408,4.061,409,4.279,410,4.893,411,3.109,412,3.275,413,4.279,414,2.243,415,4.571,416,1.147,417,2.748,418,2.309,419,1.671,420,4.571,421,3.178,422,2.703,423,4.571,424,4.571,425,4.571,426,4.571,427,4.571,428,5.864,429,4.571,430,4.571,431,4.571,432,4.571,433,4.571]],["title/classes/AppEnvironmentVariables.html",[0,0.271,356,3.774]],["body/classes/AppEnvironmentVariables.html",[0,0.479,2,0.636,3,0.068,4,0.06,5,0.053,10,0.21,11,0.769,18,0.256,19,0.007,20,0.733,22,1.511,23,0.411,34,0.164,36,0.114,50,0.005,51,0.005,67,2.545,154,0.152,212,2.735,219,0.399,224,1.903,272,2.545,285,1.429,291,0.934,312,3.118,314,4.561,315,3.79,316,2.735,317,4.195,318,6.216,319,5.019,320,5.858,321,6.216,322,3.462,323,2.777,324,2.421,325,2.773,326,2.584,327,4.561,328,3.535,329,3.427,330,3.957,331,3.215,332,1.441,333,3.332,334,4.13,335,3.535,336,2.89,337,3.017,338,3.663,339,2.777,340,3.663,341,2.777,342,4.84,343,5.188,344,4.84,345,5.188,346,4.84,347,3.663,348,3.957,349,5.593,350,1.824,351,3.663,352,2.249,353,2.432,354,2.777,355,1.903,356,6.362,357,4.131,358,6.449,359,2.89,360,3.332,361,2.777,362,2.676,363,2.777,364,2.777,365,2.777,366,3.332,367,4.131,368,2.676,369,4.131,370,4.131,371,4.131,372,4.131,379,1.721,434,1.997,435,3.79,436,4.649,437,3.162,438,4.649,439,4.649,440,4.649,441,3.162,442,4.649]],["title/modules/AppModule.html",[443,1.941,444,3.52]],["body/modules/AppModule.html",[0,0.286,3,0.071,4,0.063,5,0.056,19,0.007,34,0.173,36,0.071,50,0.005,51,0.005,70,3.932,154,0.16,219,0.322,275,1.58,297,0.724,316,3.825,317,3.538,349,4.717,373,6.069,374,3.428,443,3.965,444,6.932,445,2.544,446,3.538,447,4.341,448,4.341,449,6.379,450,6.379,451,6.379,452,3.789,453,2.812,454,2.715,455,4.885,456,2.111,457,6.057,458,3.932,459,6.582,460,2.79,461,7.966,462,3.789,463,6.582,464,6.582,465,4.477,466,6.582,467,7.612,468,4.831,469,6.494,470,2.406,471,4.477,472,4.272,473,7.966,474,6.582,475,5.366,476,3.932,477,6.582,478,6.582,479,3.323,480,4.885,481,4.885,482,4.885,483,4.885,484,4.885,485,4.885,486,4.885,487,3.715,488,0.878,489,5.005,490,6.582]],["title/controllers/AuthController.html",[277,2.208,491,3.774]],["body/controllers/AuthController.html",[0,0.214,3,0.053,4,0.048,5,0.042,10,0.165,12,0.607,13,0.911,15,1.852,18,0.208,19,0.007,23,0.282,28,0.72,29,0.555,30,1.08,31,1.695,34,0.179,36,0.053,37,0.868,41,2.053,50,0.004,51,0.004,64,1.397,68,2.146,95,1.337,154,0.23,203,2.56,216,3.089,217,2.403,219,0.262,221,2.238,223,1.887,224,3.055,247,0.901,251,4.458,256,2.032,265,3.846,266,2.105,267,3.846,268,2.273,269,0.935,277,3.342,283,1.382,291,1.079,293,2.728,297,0.542,306,4.127,307,2.273,309,3.651,374,1.904,378,2.373,379,1.183,384,4.766,385,4.557,400,2.487,401,2.306,402,1.366,403,2.051,404,4.081,405,2.981,406,2.981,409,4.325,410,5.076,411,2.487,412,2.62,413,4.325,414,1.794,416,1.347,417,2.43,419,1.962,421,1.847,422,2.306,460,1.281,491,4.376,492,3.657,493,4.458,494,6.359,495,5.651,496,3.657,497,5.777,498,3.657,499,3.657,500,3.651,501,5.625,502,2.802,503,4.081,504,4.081,505,2.324,506,3.657,507,5.367,508,3.657,509,3.657,510,3.657,511,4.769,512,2.795,513,5.021,514,4.081,515,3.657,516,4.081,517,5.367,518,3.846,519,2.373,520,3.846,521,3.534,522,2.78,523,2.137,524,3.483,525,2.62,526,2.62,527,3.846,528,3.249,529,4.766,530,2.981,531,5.367,532,5.367,533,2.373,534,5.367,535,5.367,536,1.697,537,4.376,538,3.657,539,1.966,540,4.376,541,3.657,542,3.657,543,2.981,544,3.657,545,3.657,546,2.273,547,3.337,548,3.657,549,1.788,550,3.657,551,3.249,552,3.249,553,2.981,554,3.657,555,3.657,556,2.273,557,2.62,558,2.62,559,1.497]],["title/modules/AuthModule.html",[443,1.941,560,3.317]],["body/modules/AuthModule.html",[0,0.344,3,0.086,4,0.076,5,0.067,19,0.007,34,0.179,36,0.086,50,0.006,51,0.006,154,0.193,219,0.363,297,0.871,374,3.868,443,3.587,445,3.061,446,3.993,452,4.275,453,3.383,454,3.266,468,4.82,476,4.437,491,6.638,493,4.437,529,6.129,530,4.791,560,6.821,561,5.222,562,5.222,563,5.222,564,6.129,565,6.852,566,6.852,567,5.877,568,6.6,569,3.998,570,7.427,571,3.998,572,5.222,573,5.877,574,5.877,575,5.877,576,4.212]],["title/interfaces/AuthResponse.html",[212,1.989,514,3.52]],["body/interfaces/AuthResponse.html",[3,0.098,4,0.088,5,0.077,10,0.305,11,0.976,18,0.265,19,0.007,20,0.941,29,0.836,36,0.098,50,0.006,51,0.006,154,0.221,212,3.472,214,3.88,219,0.329,221,1.825,322,4.129,501,4.585,514,6.145,577,6.741,578,6.741,579,7.315,580,6.431,581,2.387]],["title/injectables/AuthService.html",[529,3.149,582,0.88]],["body/injectables/AuthService.html",[0,0.23,3,0.057,4,0.051,5,0.045,10,0.177,11,0.683,12,0.749,13,0.96,15,1.898,18,0.237,19,0.007,20,0.808,23,0.381,28,0.888,29,0.685,30,1.117,31,1.752,34,0.163,36,0.057,37,1.572,41,2.063,45,1.241,50,0.004,51,0.004,68,3.295,154,0.237,165,2.814,203,3.931,219,0.354,221,1.53,224,2.314,269,1.446,275,1.074,283,1.625,285,1.269,291,1.331,297,0.582,316,2.429,324,2.045,401,3.113,402,1.467,403,2.53,416,1.819,417,2.933,419,3.012,421,2.856,422,2.429,443,2.37,458,3.377,460,2.954,493,4.328,495,5.023,502,2.26,504,2.986,511,5.023,512,4.473,513,4.051,514,5.036,529,3.845,533,4.702,549,1.104,569,2.671,579,3.201,580,4.051,582,1.074,583,1.319,584,3.926,585,5.906,586,6.08,587,5.652,588,1.873,589,4.392,590,8.433,591,6.875,592,5.652,593,3.039,594,4.608,595,5.652,596,3.926,597,3.66,598,5.652,599,5.652,600,3.926,601,6.518,602,5.023,603,5.652,604,5.652,605,5.652,606,2.671,607,3.489,608,3.926,609,3.926,610,4.608,611,3.926,612,3.926,613,3.926,614,3.926,615,3.926,616,3.926,617,3.926,618,3.926,619,3.489,620,3.489,621,3.926,622,2.441,623,3.926,624,3.489,625,3.926,626,5.652]],["title/classes/CacheEnvironmentVariables.html",[0,0.271,627,4.114]],["body/classes/CacheEnvironmentVariables.html",[0,0.502,2,0.733,3,0.078,4,0.07,5,0.061,10,0.242,11,0.845,18,0.229,19,0.007,22,1.662,23,0.368,34,0.17,36,0.102,50,0.005,51,0.005,154,0.176,219,0.381,272,2.799,285,1.572,291,1.077,297,0.794,317,4.19,319,3.89,322,3.942,323,3.202,324,2.791,325,2.978,326,2.979,329,3.268,330,4.846,332,1.661,334,3.478,336,3.332,337,3.478,338,4.029,339,3.202,340,4.029,341,3.202,347,4.029,348,4.352,350,2.006,351,4.029,352,2.416,353,2.674,354,3.202,355,2.194,359,4.352,361,3.202,362,3.085,363,3.202,364,3.202,365,3.202,368,3.085,379,1.543,434,2.303,441,4.761,471,5.621,627,7.344,628,5.359,629,7.795,630,7.795,631,5.359,632,5.359,633,6.22,634,4.762,635,5.359,636,4.762,637,5.359,638,5.359,639,5.359]],["title/modules/CommonServicesModule.html",[443,1.941,449,3.317]],["body/modules/CommonServicesModule.html",[0,0.368,3,0.091,4,0.081,5,0.072,19,0.007,34,0.15,36,0.091,50,0.006,51,0.006,154,0.205,219,0.378,275,1.192,297,0.93,316,3.324,443,3.931,445,4.368,446,4.158,449,6.563,452,4.452,453,3.611,454,3.486,456,1.906,457,5.882,458,4.621,460,2.71,476,4.621,488,1.127,640,5.574,641,5.574,642,6.718,643,6.273,644,6.273,645,8.756,646,6.874,647,6.874,648,6.306,649,6.273]],["title/modules/ConfigModule.html",[443,1.941,450,3.317]],["body/modules/ConfigModule.html",[0,0.211,3,0.052,4,0.047,5,0.089,15,1.904,19,0.007,34,0.181,35,1.136,36,0.052,37,0.853,50,0.004,51,0.004,154,0.118,219,0.259,275,1.597,297,0.533,316,2.277,317,5.011,324,2.76,366,3.799,397,2.445,402,3.442,403,2.406,417,2.025,443,3.251,445,1.872,450,5.746,456,1.306,457,4.031,471,4.727,476,2.148,487,2.733,488,0.646,533,3.44,536,2.46,568,6.585,569,2.445,586,2.733,591,7.599,594,4.321,633,3.194,634,4.71,647,4.71,648,4.321,650,3.595,651,8.185,652,4.71,653,5.301,654,7.41,655,5.31,656,4.71,657,7.41,658,7.41,659,7.41,660,4.788,661,5.635,662,4.607,663,2.76,664,4.71,665,7.41,666,5.595,667,5.595,668,5.301,669,3.595,670,2.931,671,4.71,672,3.595,673,2.576,674,4.71,675,3.595,676,2.069,677,3.194,678,3.595,679,4.71,680,3.595,681,3.595,682,5.301,683,2.931,684,4.321,685,5.133,686,3.194,687,2.931,688,4.71,689,3.194,690,3.595,691,4.321,692,2.931,693,3.194,694,3.194,695,4.71,696,3.595,697,5.301,698,3.595,699,3.595,700,2.069,701,4.71,702,3.194,703,3.595,704,3.194,705,3.595,706,1.951,707,5.301,708,3.595,709,8.018,710,8.018,711,3.595,712,3.595,713,3.595,714,3.595,715,3.595,716,5.301,717,3.595,718,3.595,719,3.595,720,3.595,721,3.595,722,3.595,723,3.595,724,3.595,725,3.595,726,3.595]],["title/classes/ConflictErrorResponse.html",[0,0.271,727,4.114]],["body/classes/ConflictErrorResponse.html",[0,0.277,2,0.646,3,0.069,4,0.061,5,0.054,10,0.213,11,0.777,18,0.284,19,0.007,20,0.794,23,0.456,34,0.152,36,0.069,50,0.005,51,0.005,64,2.458,154,0.24,194,2.986,217,3.243,219,0.314,221,1.98,223,1.556,247,1.164,250,4.175,260,1.709,275,1.223,293,2.352,297,0.7,312,2.029,316,3.375,350,1.354,379,1.913,456,1.585,470,2.352,488,0.848,505,2.341,523,1.587,581,1.775,597,2.386,727,6.981,728,4.723,729,2.081,730,2.209,731,1.809,732,2.908,733,2.086,734,3.959,735,1.88,736,4.033,737,3.14,738,3.532,739,3.308,740,3.144,741,3.729,742,2.087,743,4.665,744,2.936,745,2.675,746,2.936,747,2.081,748,2.936,749,2.539,750,2.936,751,2.459,752,2.459,753,2.936,754,1.846,755,2.936,756,1.846,757,2.459,758,2.317,759,2.317,760,2.317,761,2.936,762,2.458,763,2.081,764,2.081,765,4.196,766,4.196]],["title/classes/ConflictException.html",[0,0.271,767,3.317]],["body/classes/ConflictException.html",[0,0.269,2,0.628,3,0.067,4,0.06,5,0.052,11,0.762,12,0.52,18,0.236,19,0.007,20,0.886,21,2.515,22,1.498,23,0.242,28,0.616,29,0.475,34,0.15,36,0.067,50,0.005,51,0.005,67,2.523,119,2.076,154,0.207,217,2.792,219,0.379,221,2.331,250,4.095,275,1.37,283,0.906,285,1.417,297,0.681,352,1.956,387,1.88,414,3.096,416,1.153,456,1.555,470,3.149,488,0.825,505,2.148,523,1.543,549,2.183,559,2.952,733,1.676,734,3.969,737,2.966,738,2.523,739,3.26,740,3.098,742,1.471,745,2.307,747,3.421,763,2.023,764,2.023,765,4.08,766,4.08,767,6.026,768,4.592,769,4.174,770,3.77,771,3.77,772,4.15,773,3.77,774,3.876,775,4.592,776,3.507,777,4.592,778,6.311,779,3.77,780,4.638,781,4.174,782,3.77,783,7.764,784,4.674,785,5.024,786,3.903,787,6.311,788,2.78,789,3.632,790,3.77,791,2.253,792,2.643,793,2.743,794,2.743,795,2.743,796,2.743,797,2.743,798,2.743,799,2.743]],["title/classes/ContentTooLargeException.html",[0,0.271,800,4.114]],["body/classes/ContentTooLargeException.html",[0,0.268,2,0.626,3,0.067,4,0.059,5,0.052,11,0.76,12,0.518,18,0.236,19,0.007,20,0.886,21,2.513,22,1.495,23,0.241,28,0.614,29,0.473,34,0.15,36,0.067,50,0.005,51,0.005,67,2.518,119,2.069,154,0.206,217,2.789,219,0.379,221,2.33,275,1.368,283,0.903,285,1.414,297,0.679,352,1.952,387,1.874,414,3.09,416,1.149,456,1.552,470,3.147,488,0.822,505,2.145,523,1.538,549,2.18,559,2.947,733,1.672,734,3.967,737,2.962,738,2.518,739,3.254,740,3.093,742,1.467,745,2.302,747,3.416,763,2.017,764,2.017,769,4.168,770,3.762,771,3.762,772,4.144,773,3.762,774,3.87,776,3.5,779,3.762,780,4.632,781,4.168,782,3.762,784,4.669,785,5.019,786,3.9,788,2.774,789,3.625,790,3.762,791,2.246,792,2.635,793,2.735,794,2.735,795,2.735,796,2.735,797,2.735,798,2.735,799,2.735,800,7.466,801,6.297,802,4.578,803,6.297,804,4.578,805,4.578,806,6.297,807,7.754,808,7.199,809,4.578]],["title/classes/CreateLocalFileRequest.html",[0,0.271,810,3.774]],["body/classes/CreateLocalFileRequest.html",[0,0.374,2,0.638,3,0.068,4,0.061,5,0.109,10,0.211,11,0.77,12,0.528,13,1.083,18,0.238,19,0.007,20,0.644,23,0.382,28,0.625,29,0.482,30,0.983,34,0.159,36,0.068,41,1.432,50,0.005,51,0.005,60,2.626,63,3.802,64,1.782,65,3.802,66,6.425,67,2.55,69,4.571,154,0.256,219,0.312,223,1.543,247,1.149,260,2.244,269,1.999,283,0.92,291,0.937,325,2.986,328,3.546,329,3.048,332,1.445,348,5.087,350,1.828,379,1.406,456,1.572,488,0.838,536,4.268,549,1.311,581,1.759,660,4.85,663,4.07,730,2.376,731,1.793,735,1.864,742,1.821,762,2.442,810,7.051,811,7.815,812,2.356,813,6.378,814,5.942,815,4.184,816,4.184,817,6.223,818,4.663,819,3.342,820,4.663,821,5.668,822,3.802,823,4.663,824,5.926,825,4.663,826,5.048,827,2.429,828,3.546,829,3.802,830,3.546,831,3.342,832,3.026,833,4.144,834,3.802,835,4.663,836,4.663,837,3.342,838,4.663,839,4.663,840,4.144,841,4.144,842,4.663,843,4.663]],["title/classes/CreatePostRequest.html",[0,0.271,844,3.317]],["body/classes/CreatePostRequest.html",[0,0.38,2,0.654,3,0.07,4,0.062,5,0.055,10,0.216,11,0.784,12,0.541,13,1.102,18,0.241,19,0.007,20,0.798,23,0.387,28,0.641,29,0.495,30,1,34,0.165,36,0.07,50,0.005,51,0.005,58,2.322,95,3.503,98,5.365,127,3.301,154,0.259,219,0.317,223,1.569,247,1.179,260,2.097,269,2.02,283,0.944,291,0.961,311,4.034,325,3.017,329,3.088,331,3.278,332,1.482,350,1.86,379,1.431,456,1.599,488,0.859,549,1.345,581,1.79,706,2.011,730,2.394,731,1.825,735,1.896,742,1.84,762,2.474,812,2.416,815,4.239,816,3.735,827,2.491,837,3.428,844,6.24,845,7.898,846,5.616,847,6.005,848,3.899,849,4.783,850,4.783,851,4.783,852,5.6,853,4.783,854,3.899,855,4.25,856,3.877,857,4.783,858,5.766,859,5.766,860,3.637,861,3.637,862,3.899,863,3.253,864,3.428,865,4.934,866,4.783,867,2.858,868,3.104,869,3.899,870,4.783,871,4.25,872,3.899,873,4.25,874,4.25]],["title/classes/CreateTopicRequest.html",[0,0.271,875,3.52]],["body/classes/CreateTopicRequest.html",[0,0.409,2,0.731,3,0.078,4,0.069,5,0.061,10,0.241,11,0.843,12,1.056,13,1.185,18,0.229,19,0.007,20,0.706,23,0.367,28,0.716,29,0.552,30,1.077,34,0.166,36,0.078,50,0.005,51,0.005,58,2.499,127,3.821,154,0.255,219,0.341,223,1.689,247,1.316,260,2.192,269,2.111,283,1.053,291,1.073,325,3.153,329,2.928,331,3.528,332,1.655,350,2.002,379,1.177,456,1.721,488,0.959,549,1.501,581,1.473,730,2.47,731,1.963,735,2.041,742,1.627,762,2.346,812,2.698,815,4.479,816,4.02,822,4.353,856,4.172,863,3.632,864,3.827,875,6.806,876,7.781,877,5.34,878,5.34,879,3.32,880,5.693,881,2.968,882,3.827,883,4.745,884,4.745]],["title/classes/CreateUserProfileRequest.html",[0,0.271,885,3.52]],["body/classes/CreateUserProfileRequest.html",[0,0.315,2,0.5,3,0.053,4,0.048,5,0.042,10,0.165,11,0.648,12,0.955,13,0.911,18,0.264,19,0.007,20,0.867,23,0.424,28,0.49,29,0.834,30,0.827,34,0.136,36,0.053,41,2.16,43,5.348,45,2.466,46,5.348,50,0.004,51,0.004,58,1.92,148,6.416,149,6.047,150,6.047,151,6.13,154,0.271,219,0.262,223,1.298,247,0.901,260,1.861,269,1.792,283,0.721,291,0.735,325,2.677,329,2.938,331,3.941,332,1.133,350,1.538,379,1.72,456,1.322,488,0.657,549,1.028,581,2.427,622,4.356,706,1.133,730,2.193,731,1.509,735,1.568,742,2.05,762,2.354,812,1.847,815,3.66,816,3.089,822,2.981,854,2.981,856,3.207,885,6.13,886,6.741,887,7.348,888,5.008,889,5.712,890,4.033,891,3.657,892,3.657,893,3.657,894,4.769,895,3.657,896,4.769,897,3.657,898,5.367,899,3.657,900,2.981,901,3.657,902,4.458,903,5.712,904,5.367,905,7.007,906,3.657,907,2.981,908,3.249,909,2.981,910,2.62,911,2.373,912,3.249,913,3.249,914,3.657,915,3.249,916,3.249,917,3.249,918,3.657,919,3.249,920,3.249]],["title/classes/CreateUserRequest.html",[0,0.271,921,3.004]],["body/classes/CreateUserRequest.html",[0,0.37,2,0.494,3,0.053,4,0.047,5,0.041,10,0.163,11,0.642,12,0.408,13,0.902,18,0.287,19,0.007,20,0.832,23,0.422,28,0.484,29,0.373,30,0.819,34,0.166,36,0.053,41,2.18,50,0.004,51,0.004,58,1.902,67,2.125,75,1.675,114,4.673,154,0.27,155,4.922,156,4.922,203,4.079,219,0.26,223,1.285,247,0.889,260,1.971,269,1.781,283,0.712,285,0.81,291,0.725,311,4.328,322,3.01,325,2.66,326,2.005,328,2.743,329,3.366,331,3.749,332,1.647,350,1.523,379,1.711,456,1.31,488,0.648,512,4.516,539,1.939,549,1.014,581,1.92,706,1.955,730,2.183,731,1.494,735,1.553,742,1.92,762,2.697,788,1.59,812,1.823,815,3.632,816,3.059,848,2.941,852,4.041,854,2.941,855,3.206,856,3.175,858,4.723,859,4.723,860,2.743,869,2.941,881,3.507,882,3.809,885,5.903,887,3.206,888,4.569,900,2.941,921,5.21,922,8.238,923,3.608,924,3.608,925,3.608,926,3.608,927,3.608,928,3.608,929,3.608,930,5.643,931,3.608,932,5.315,933,3.608,934,3.608,935,3.608,936,4.723,937,3.206,938,6.31,939,2.454,940,2.585,941,2.005,942,2.941,943,2.941,944,4.041,945,4.041,946,4.041,947,3.206,948,2.941,949,2.941,950,3.206,951,2.941,952,3.608,953,3.608,954,3.206,955,2.341,956,2.341,957,1.55,958,2.341,959,3.608,960,3.608]],["title/classes/CreatedSuccessResponse.html",[0,0.271,961,4.114]],["body/classes/CreatedSuccessResponse.html",[0,0.294,2,0.686,3,0.073,4,0.065,5,0.057,10,0.227,11,0.809,18,0.283,19,0.007,20,0.762,23,0.454,29,0.693,34,0.146,36,0.073,45,1.586,50,0.005,51,0.005,64,2.56,154,0.219,194,3.11,219,0.327,221,2.271,223,1.947,247,1.236,260,1.78,275,1.274,293,3.315,297,0.744,304,3.724,312,2.156,379,1.85,456,1.651,470,2.45,488,0.901,505,2.248,521,5.134,523,1.685,581,1.848,597,2.534,706,1.555,729,2.21,730,2.264,731,1.884,732,3.029,733,2.139,735,1.958,736,4.117,737,3.206,738,3.22,741,3.605,742,2.012,743,4.641,745,2.758,751,2.613,752,2.613,756,1.96,757,2.613,758,2.461,759,2.461,760,2.461,762,2.251,961,7.155,962,5.017,963,5.226,964,6.38,965,4.458,966,4.09,967,4.09,968,4.09,969,4.09,970,4.09,971,5.017]],["title/classes/DatabaseEnvironmentVariables.html",[0,0.271,972,4.114]],["body/classes/DatabaseEnvironmentVariables.html",[0,0.46,2,0.569,3,0.061,4,0.054,5,0.048,10,0.188,11,0.712,18,0.275,19,0.007,20,0.865,22,1.399,23,0.429,34,0.171,35,2.163,36,0.086,50,0.004,51,0.004,154,0.136,203,1.985,217,2.021,219,0.334,272,2.356,285,1.536,291,0.836,312,2.532,314,2.983,317,3.677,319,3.802,320,2.983,321,3.165,322,2.811,323,3.52,324,2.168,325,2.614,326,2.313,327,4.223,329,3.418,330,3.663,331,3.967,332,1.29,333,2.983,334,3.824,335,3.165,336,2.587,337,2.701,338,3.392,339,2.486,340,3.392,341,2.486,347,3.392,350,1.689,351,3.392,352,2.12,353,2.251,354,2.486,355,1.704,359,2.587,360,2.983,361,2.486,362,2.396,363,2.486,364,2.486,365,2.486,366,4.223,368,2.396,379,1.797,398,3.393,434,1.788,435,3.393,437,4.653,441,2.831,512,2.168,519,2.701,581,1.148,656,7.244,670,3.393,674,3.698,677,5.236,754,1.626,972,6.611,973,4.162,974,6.841,975,6.841,976,6.841,977,6.841,978,6.841,979,6.841,980,4.162,981,4.162,982,4.162,983,4.162,984,4.162,985,4.162,986,4.162,987,5.893,988,3.698,989,5.893,990,2.701,991,3.393,992,4.162,993,4.162,994,4.162,995,4.162,996,4.162,997,4.162,998,4.162,999,4.162,1000,4.162,1001,3.393,1002,3.698,1003,3.698,1004,3.698,1005,4.162,1006,5.893,1007,2.701,1008,5.893,1009,4.162,1010,5.236,1011,4.162,1012,4.162,1013,4.162,1014,4.162,1015,4.162,1016,5.893,1017,3.698,1018,3.698,1019,3.698,1020,3.698,1021,3.698,1022,3.698,1023,3.698,1024,4.162,1025,4.162,1026,4.162,1027,4.162,1028,3.393,1029,4.162,1030,4.162]],["title/classes/ErrorResponse.html",[0,0.271,734,1.989]],["body/classes/ErrorResponse.html",[0,0.207,2,0.483,3,0.051,4,0.046,5,0.04,10,0.159,11,0.831,12,0.399,18,0.268,19,0.007,20,0.827,23,0.43,28,0.473,29,0.365,34,0.142,36,0.051,41,1.174,50,0.004,51,0.004,64,2.809,154,0.274,194,3.413,217,3.294,219,0.255,221,2.364,247,0.869,260,2.174,275,0.67,283,0.696,293,2.688,297,0.523,312,2.246,316,3.308,350,2.207,355,2.139,379,1.757,387,1.444,416,0.885,456,1.288,470,1.911,488,0.939,505,2.805,549,1.751,581,1.442,597,3.478,706,1.62,729,1.554,730,1.469,731,1.469,734,3.424,735,1.527,736,3.607,737,2.809,738,3.401,739,4.153,740,2.675,741,3.424,742,2.106,745,2.815,747,2.743,749,3.347,751,3.586,752,2.722,754,2.042,756,2.691,757,3.586,758,2.564,759,2.564,760,2.564,762,2.75,763,1.554,764,1.554,774,4.139,776,2.904,791,1.73,1031,8.359,1032,4.644,1033,4.26,1034,5.226,1035,4.644,1036,5.613,1037,5.533,1038,4.644,1039,4.644,1040,4.644,1041,7.272,1042,3.134,1043,3.134,1044,3.134,1045,3.527,1046,3.134,1047,3.134,1048,3.134,1049,3.134,1050,2.875,1051,2.875]],["title/classes/ForbiddenErrorResponse.html",[0,0.271,1052,4.114]],["body/classes/ForbiddenErrorResponse.html",[0,0.277,2,0.646,3,0.069,4,0.061,5,0.054,10,0.213,11,0.777,18,0.284,19,0.007,20,0.794,23,0.456,34,0.152,36,0.069,50,0.005,51,0.005,64,2.458,154,0.24,194,2.986,217,3.243,219,0.314,221,1.98,223,1.556,247,1.164,253,4.175,260,1.709,275,1.223,293,2.352,297,0.7,312,2.029,316,3.375,350,1.354,379,1.913,456,1.585,470,2.352,488,0.848,505,2.341,523,1.587,581,1.775,597,2.386,729,2.081,730,2.209,731,1.809,732,2.908,733,2.086,734,3.959,735,1.88,736,4.033,737,3.14,738,3.532,739,3.308,740,3.144,741,3.729,742,2.087,743,4.665,744,2.936,745,2.675,746,2.936,747,2.081,748,2.936,749,2.539,750,2.936,751,2.459,752,2.459,753,2.936,754,1.846,755,2.936,756,1.846,757,2.459,758,2.317,759,2.317,760,2.317,761,2.936,762,2.458,763,2.081,764,2.081,1052,6.981,1053,4.723,1054,4.196,1055,4.196]],["title/classes/ForbiddenException.html",[0,0.271,1056,4.114]],["body/classes/ForbiddenException.html",[0,0.269,2,0.628,3,0.067,4,0.06,5,0.052,11,0.762,12,0.52,18,0.236,19,0.007,20,0.886,21,2.515,22,1.498,23,0.242,28,0.616,29,0.475,34,0.15,36,0.067,50,0.005,51,0.005,67,2.523,119,2.076,154,0.207,217,2.792,219,0.379,221,2.331,253,4.095,275,1.37,283,0.906,285,1.417,297,0.681,352,1.956,387,1.88,414,3.096,416,1.153,456,1.555,470,3.149,488,0.825,505,2.148,523,1.543,549,2.183,559,2.952,733,1.676,734,3.969,737,2.966,738,2.523,739,3.26,740,3.098,742,1.471,745,2.307,747,3.421,763,2.023,764,2.023,769,4.174,770,3.77,771,3.77,772,4.15,773,3.77,774,3.876,776,3.507,779,3.77,780,4.638,781,4.174,782,3.77,784,4.674,785,5.024,786,3.903,788,2.78,789,3.632,790,3.77,791,2.253,792,2.643,793,2.743,794,2.743,795,2.743,796,2.743,797,2.743,798,2.743,799,2.743,1054,4.08,1055,6.407,1056,7.473,1057,4.592,1058,4.592,1059,4.592,1060,6.311,1061,7.764]],["title/classes/GenericEntity.html",[0,0.271,1062,3.004]],["body/classes/GenericEntity.html",[0,0.472,2,0.786,3,0.084,4,0.075,5,0.066,10,0.259,11,0.884,12,0.65,18,0.264,19,0.007,23,0.424,28,0.77,29,0.594,34,0.111,35,1.815,36,0.084,50,0.005,51,0.005,128,5.043,131,5.043,154,0.24,219,0.357,269,2.357,283,1.133,379,1.613,416,2.022,456,1.803,488,1.032,622,5.273,735,2.138,756,3.315,774,4.954,788,3.224,890,4.212,1033,5.965,1051,4.68,1062,4.749,1063,5.741,1064,8.055,1065,7.537,1066,6.915,1067,4.749,1068,4.749,1069,7.318,1070,8.055,1071,5.741,1072,8.055]],["title/injectables/HttpCacheInterceptor.html",[469,3.774,582,0.88]],["body/injectables/HttpCacheInterceptor.html",[0,0.427,3,0.058,4,0.052,5,0.045,10,0.179,11,0.688,12,0.449,13,0.967,18,0.13,19,0.007,20,0.575,21,1.91,22,1.352,23,0.3,28,0.532,29,0.41,30,0.612,34,0.11,36,0.058,37,0.942,50,0.004,51,0.004,71,4.046,83,1.794,84,2.133,154,0.13,187,4.793,221,1.074,222,4.725,223,1.761,260,2.287,272,2.278,273,3.178,278,2.966,279,2.467,280,2.575,282,2.205,285,1.934,291,1.7,297,0.588,304,3.165,349,4.774,386,4.349,390,1.842,402,1.483,428,5.431,462,2.284,465,2.699,469,4.643,470,2.662,471,5.857,472,2.575,549,1.601,581,2.214,582,1.082,583,1.333,683,3.235,700,3.278,733,1.513,742,0.925,745,1.451,784,3.165,791,1.947,957,1.705,1028,4.643,1073,6.662,1074,3.968,1075,5.696,1076,6.662,1077,6.662,1078,6.662,1079,6.662,1080,6.662,1081,5.696,1082,5.696,1083,5.696,1084,5.696,1085,5.696,1086,7.28,1087,6.662,1088,8.025,1089,7.28,1090,5.696,1091,4.952,1092,3.968,1093,4.331,1094,3.968,1095,6.662,1096,6.662,1097,3.968,1098,3.968,1099,3.968,1100,3.968,1101,3.968,1102,5.061,1103,5.696,1104,4.331,1105,4.331,1106,5.696,1107,3.968,1108,5.696,1109,3.968,1110,6.662,1111,3.968,1112,5.696,1113,3.968,1114,3.235,1115,3.968,1116,3.968,1117,3.968,1118,3.968,1119,3.968,1120,3.968,1121,3.526,1122,3.968,1123,3.968,1124,5.696,1125,3.968,1126,3.968,1127,3.017,1128,3.968,1129,3.235,1130,3.968,1131,3.968,1132,3.526,1133,3.235,1134,5.696,1135,3.968,1136,6.662,1137,3.968,1138,3.968,1139,3.968,1140,3.968,1141,3.968,1142,3.968,1143,3.968,1144,5.696,1145,3.968,1146,7.28]],["title/classes/HttpExceptionFilter.html",[0,0.271,1147,3.52]],["body/classes/HttpExceptionFilter.html",[0,0.452,2,0.718,3,0.076,4,0.068,5,0.06,8,1.868,10,0.237,12,0.781,13,1.172,18,0.226,19,0.007,23,0.363,28,0.925,29,0.714,30,0.809,34,0.169,36,0.076,50,0.005,51,0.005,68,2.098,154,0.226,221,1.868,260,1.833,275,0.997,283,1.035,285,1.841,297,0.778,320,5.528,352,2.139,396,5.627,397,3.568,402,1.96,403,2.947,416,2.058,417,3.495,419,1.918,523,1.763,556,5.294,588,2.503,734,2.254,737,2.947,740,2.254,747,2.311,763,2.311,764,2.311,769,4.578,772,5.032,789,3.973,791,2.574,792,3.02,1147,5.249,1148,7.714,1149,5.246,1150,4.48,1151,6.903,1152,5.627,1153,7.714,1154,5.246,1155,6.133,1156,6.903,1157,8.196,1158,5.246,1159,3.041,1160,6.133,1161,4.662,1162,4.662,1163,4.277,1164,5.246,1165,5.246,1166,4.277,1167,5.246,1168,4.277,1169,4.277,1170,5.246,1171,5.246]],["title/classes/InitialMigration1668674726738.html",[0,0.271,1172,4.114]],["body/classes/InitialMigration1668674726738.html",[0,0.335,2,0.783,3,0.083,4,0.074,5,0.065,8,1.976,9,3.835,10,0.258,11,0.882,12,0.99,13,1.239,14,4.153,15,2.124,16,3.482,17,3.482,18,0.263,19,0.007,20,0.578,21,1.639,22,1.358,23,0.423,25,3.482,26,4.435,28,0.979,29,0.755,30,1.125,31,2.048,32,3.482,34,0.111,35,1.808,36,0.083,37,1.733,38,2.806,40,3.388,41,1.806,44,4.057,45,2.766,50,0.005,51,0.005,58,2.046,60,2.453,61,3.712,62,4.099,67,2.287,70,3.417,71,3.179,72,3.712,88,3.556,114,3.179,119,2.585,120,3.89,154,0.187,158,5.082,203,2.728,512,2.979,1172,7.526,1173,8.47,1174,5.719,1175,5.719,1176,5.719,1177,5.719]],["title/classes/InternalServerErrorErrorResponse.html",[0,0.271,1178,4.114]],["body/classes/InternalServerErrorErrorResponse.html",[0,0.275,2,0.643,3,0.068,4,0.061,5,0.054,10,0.212,11,0.774,18,0.284,19,0.007,20,0.792,23,0.456,34,0.152,36,0.068,50,0.005,51,0.005,64,2.45,154,0.239,194,2.977,217,3.241,219,0.313,221,1.975,223,1.551,247,1.158,255,4.876,256,4.056,260,1.703,275,1.219,293,2.344,297,0.697,312,2.02,316,3.369,350,1.347,379,1.911,456,1.58,470,2.344,488,0.844,505,2.336,523,1.579,581,1.769,597,2.375,729,2.071,730,2.204,731,1.803,732,2.899,733,2.082,734,3.956,735,1.874,736,4.026,737,3.135,738,3.528,739,3.299,740,3.136,741,3.724,742,2.085,743,4.659,744,2.922,745,2.668,746,2.922,747,2.071,748,2.922,749,2.527,750,2.922,751,2.448,752,2.448,753,2.922,754,1.837,755,2.922,756,1.837,757,2.448,758,2.306,759,2.306,760,2.306,761,2.922,762,2.452,763,2.071,764,2.071,1036,3.832,1050,3.832,1178,6.967,1179,4.7]],["title/classes/InternalServerErrorException.html",[0,0.271,524,3.004]],["body/classes/InternalServerErrorException.html",[0,0.266,2,0.621,3,0.066,4,0.059,5,0.052,11,0.756,12,0.513,18,0.235,19,0.007,20,0.884,21,2.507,22,1.486,23,0.239,28,0.608,29,0.469,34,0.15,36,0.066,50,0.005,51,0.005,67,2.502,119,2.05,154,0.205,217,2.945,219,0.377,221,2.324,255,4.758,256,4.292,275,1.362,283,0.895,285,1.405,297,0.672,352,1.939,387,1.857,414,3.07,416,1.139,456,1.542,470,3.139,488,0.815,505,2.135,523,1.524,524,5.437,549,2.172,559,2.933,733,1.662,734,3.961,737,2.951,738,2.502,739,3.239,740,3.078,742,1.458,745,2.288,747,3.403,763,1.998,764,1.998,769,4.152,770,3.738,771,3.738,772,4.124,773,3.738,774,3.851,776,3.478,779,3.738,780,4.614,781,4.152,782,3.738,784,4.656,785,5.005,786,3.889,788,2.757,789,3.602,790,3.738,791,2.225,792,2.611,793,2.71,794,2.71,795,2.71,796,2.71,797,2.71,798,2.71,799,2.71,1036,5.84,1050,3.698,1180,6.258,1181,4.536,1182,4.536,1183,4.536,1184,6.258,1185,7.724]],["title/injectables/IsEmailUniqueValidator.html",[582,0.88,1186,3.52]],["body/injectables/IsEmailUniqueValidator.html",[0,0.342,3,0.06,4,0.053,5,0.047,8,1.109,10,0.185,12,0.768,13,0.99,15,1.754,18,0.222,19,0.007,20,0.82,22,1.754,23,0.357,28,0.909,29,0.701,30,1.139,31,1.41,34,0.143,36,0.085,37,0.973,41,1.753,50,0.004,51,0.004,75,3.765,78,2.706,154,0.222,155,5.066,219,0.285,224,2.386,273,2.781,283,1.54,285,1.309,291,1.63,297,0.608,332,2.29,353,3.099,355,2.777,386,2.449,387,2.386,390,1.903,416,1.703,418,2.071,434,1.761,460,2.042,462,2.359,502,2.713,582,1.108,583,1.377,589,4.346,593,3.134,706,2.102,742,0.955,754,1.602,788,3.255,941,2.278,944,6.168,958,2.66,1159,2.568,1186,5.158,1187,5.295,1188,3.642,1189,3.624,1190,3.117,1191,4.099,1192,3.624,1193,5.637,1194,4.099,1195,3.624,1196,2.548,1197,4.099,1198,3.624,1199,4.861,1200,3.905,1201,4.433,1202,3.134,1203,3.134,1204,3.036,1205,3.624,1206,4.664,1207,3.624,1208,3.624,1209,2.548,1210,3.905,1211,5.813,1212,4.099,1213,3.117,1214,5.158,1215,3.342,1216,2.548,1217,2.548,1218,2.548,1219,2.938,1220,4.177,1221,2.938,1222,2.915,1223,2.938,1224,2.938,1225,2.938,1226,3.642,1227,2.938,1228,2.938,1229,2.938,1230,2.548,1231,4.217,1232,2.449,1233,2.548]],["title/injectables/IsLocalFileExistValidator.html",[582,0.88,1234,3.52]],["body/injectables/IsLocalFileExistValidator.html",[0,0.366,3,0.066,4,0.059,5,0.104,8,1.226,10,0.205,12,0.81,13,1.061,15,1.832,18,0.234,19,0.007,20,0.846,22,1.484,23,0.377,28,0.96,29,0.74,30,1.19,31,1.512,34,0.139,36,0.091,37,1.075,50,0.005,51,0.005,78,2.902,154,0.234,219,0.305,224,2.559,272,1.811,273,2.982,283,1.412,291,1.683,297,0.671,332,2.392,350,1.792,353,2.949,355,2.559,387,1.854,390,2.902,416,1.797,418,2.288,434,1.946,460,2.19,502,2.5,536,4.059,582,1.188,583,1.522,706,1.937,742,1.055,754,2.443,788,1.995,827,2.359,1159,2.754,1189,3.886,1192,3.886,1193,5.035,1195,3.886,1196,3.886,1198,3.886,1200,2.607,1202,3.36,1203,3.36,1204,3.255,1205,3.886,1206,4.611,1207,3.886,1208,3.886,1210,2.607,1216,2.815,1217,2.815,1218,3.886,1222,3.598,1231,4.45,1232,2.706,1233,2.815,1234,5.443,1235,6.859,1236,3.245,1237,6.602,1238,4.529,1239,5.57,1240,3.444,1241,4.252,1242,4.529,1243,3.444,1244,4.753,1245,3.692,1246,2.815,1247,2.815,1248,4.529,1249,4.529,1250,4.529,1251,3.245,1252,3.245,1253,4.024]],["title/injectables/IsNameUniqueValidator.html",[582,0.88,1254,3.52]],["body/injectables/IsNameUniqueValidator.html",[0,0.343,3,0.06,4,0.054,5,0.047,8,1.116,10,0.186,12,1.027,13,0.993,15,1.758,18,0.223,19,0.007,20,0.821,22,1.758,23,0.358,28,0.912,29,0.704,30,1.142,31,1.415,34,0.144,36,0.085,37,0.978,50,0.004,51,0.004,75,2.716,78,2.716,127,3.128,154,0.223,219,0.286,224,2.396,273,2.792,283,1.543,285,1.314,291,1.633,297,0.611,332,2.295,353,3.105,355,2.785,386,2.462,387,2.396,390,1.913,416,1.708,418,2.082,434,1.771,460,2.05,462,2.372,502,2.721,582,1.112,583,1.385,706,2.109,742,0.961,754,1.611,788,3.263,879,2.562,880,6.625,958,2.675,1159,2.578,1189,3.638,1192,3.638,1193,5.643,1195,3.638,1196,2.562,1198,3.638,1199,4.876,1200,3.917,1201,4.45,1202,3.146,1203,3.146,1204,3.048,1205,3.638,1206,4.673,1207,3.638,1208,3.638,1210,3.917,1211,5.824,1213,3.134,1214,5.174,1216,2.562,1217,2.562,1218,2.562,1219,2.954,1220,4.194,1221,2.954,1222,2.924,1223,2.954,1224,2.954,1225,2.954,1227,2.954,1228,2.954,1229,2.954,1230,2.562,1231,4.23,1232,2.462,1233,2.562,1254,5.174,1255,6.038,1256,3.134,1257,3.663,1258,4.811,1259,3.663,1260,2.956,1261,3.663,1262,3.663,1263,2.804,1264,4.122,1265,4.122,1266,4.122]],["title/injectables/IsPhoneNumberUniqueValidator.html",[582,0.88,1267,3.52]],["body/injectables/IsPhoneNumberUniqueValidator.html",[0,0.342,3,0.06,4,0.053,5,0.047,8,1.109,10,0.185,12,0.768,13,0.99,15,1.754,18,0.222,19,0.007,20,0.82,22,1.754,23,0.357,28,0.909,29,0.701,30,1.139,31,1.41,34,0.143,36,0.085,37,0.973,41,1.753,50,0.004,51,0.004,75,2.706,78,2.706,154,0.222,156,5.066,219,0.285,224,2.386,273,2.781,283,1.54,285,1.309,291,1.63,297,0.608,322,3.524,332,2.29,353,3.099,355,2.777,386,2.449,387,2.386,390,1.903,416,1.703,418,2.071,434,1.761,460,2.042,462,2.359,502,2.713,582,1.108,583,1.377,589,4.346,593,3.134,706,2.102,742,0.955,754,1.602,788,3.255,941,2.278,945,6.168,958,2.66,1159,2.568,1187,5.295,1189,3.624,1190,3.117,1192,3.624,1193,5.637,1195,3.624,1196,2.548,1198,3.624,1199,4.861,1200,3.905,1201,4.433,1202,3.134,1203,3.134,1204,3.036,1205,3.624,1206,4.664,1207,3.624,1208,3.624,1209,2.548,1210,3.905,1211,5.813,1213,3.117,1214,5.158,1215,3.342,1216,2.548,1217,2.548,1218,2.548,1219,2.938,1220,4.177,1221,2.938,1222,2.915,1223,2.938,1224,2.938,1225,2.938,1227,2.938,1228,2.938,1229,2.938,1230,2.548,1231,4.217,1232,2.449,1233,2.548,1256,3.117,1267,5.158,1268,4.099,1269,4.099,1270,4.099,1271,4.099,1272,3.642]],["title/injectables/IsPostExistValidator.html",[582,0.88,1273,3.52]],["body/injectables/IsPostExistValidator.html",[0,0.37,3,0.067,4,0.06,5,0.053,8,1.245,10,0.208,12,0.817,13,1.072,15,1.844,18,0.236,19,0.007,20,0.85,22,1.5,23,0.38,28,0.967,29,0.746,30,1.198,31,1.528,34,0.14,36,0.092,37,1.092,50,0.005,51,0.005,78,2.932,95,3.295,154,0.236,219,0.309,224,2.586,272,1.839,273,3.013,283,1.424,291,1.691,297,0.682,332,2.408,350,1.811,353,2.968,355,2.586,387,1.883,390,2.932,416,1.812,418,2.323,434,1.976,460,2.213,502,2.526,582,1.201,583,1.545,706,1.958,742,1.072,754,2.469,788,2.026,827,2.395,1159,2.783,1189,3.927,1192,3.927,1193,5.062,1195,3.927,1196,3.927,1198,3.927,1200,2.647,1202,3.396,1203,3.396,1204,3.29,1205,3.927,1206,4.641,1207,3.927,1208,3.927,1210,2.647,1216,2.859,1217,2.859,1218,3.927,1222,3.615,1231,4.486,1232,2.747,1233,2.859,1236,3.296,1240,3.497,1243,3.497,1244,4.804,1246,2.859,1247,2.859,1251,3.296,1252,3.296,1273,5.487,1274,6.903,1275,6.638,1276,4.599,1277,5.357,1278,4.1,1279,3.749,1280,3.296,1281,4.599,1282,4.086]],["title/injectables/IsTopicExistValidator.html",[582,0.88,1283,3.52]],["body/injectables/IsTopicExistValidator.html",[0,0.37,3,0.067,4,0.06,5,0.053,8,1.245,10,0.208,12,0.817,13,1.072,15,1.844,18,0.236,19,0.007,20,0.85,22,1.5,23,0.38,28,0.967,29,0.746,30,1.198,31,1.528,34,0.14,36,0.092,37,1.092,50,0.005,51,0.005,78,2.932,127,3.604,154,0.236,219,0.309,224,2.586,272,1.839,273,3.013,283,1.424,291,1.691,297,0.682,332,2.408,350,1.811,353,2.968,355,2.586,387,1.883,390,2.932,416,1.812,418,2.323,434,1.976,460,2.213,502,2.526,582,1.201,583,1.545,706,1.958,742,1.072,754,2.469,788,2.026,827,2.395,865,6.192,1159,2.783,1189,3.927,1192,3.927,1193,5.062,1195,3.927,1196,3.927,1198,3.927,1200,2.647,1202,3.396,1203,3.396,1204,3.29,1205,3.927,1206,4.641,1207,3.927,1208,3.927,1210,2.647,1216,2.859,1217,2.859,1218,3.927,1222,3.615,1231,4.486,1232,2.747,1233,2.859,1236,3.296,1240,3.497,1243,3.497,1244,4.804,1246,2.859,1247,2.859,1251,3.296,1252,3.296,1255,6.333,1257,4.086,1258,4.96,1260,3.191,1263,3.128,1279,3.749,1283,5.487,1284,4.599,1285,4.086]],["title/injectables/IsUserExistValidator.html",[582,0.88,1286,3.52]],["body/injectables/IsUserExistValidator.html",[0,0.37,3,0.067,4,0.06,5,0.053,8,1.245,10,0.208,12,0.817,13,1.072,15,1.844,18,0.236,19,0.007,20,0.85,22,1.5,23,0.38,28,0.967,29,0.746,30,1.198,31,1.528,34,0.14,36,0.092,37,1.092,41,2.024,50,0.005,51,0.005,78,2.932,154,0.236,219,0.309,224,2.586,272,1.839,273,3.013,283,1.424,291,1.691,297,0.682,332,2.408,350,1.811,353,2.968,355,2.586,387,1.883,390,2.932,416,1.812,418,2.323,434,1.976,460,2.213,502,2.526,582,1.201,583,1.545,589,4.488,593,3.396,706,1.958,742,1.072,754,2.469,788,2.026,827,2.395,1159,2.783,1187,5.567,1189,3.927,1190,3.497,1192,3.927,1193,5.062,1195,3.927,1196,3.927,1198,3.927,1200,2.647,1202,3.396,1203,3.396,1204,3.29,1205,3.927,1206,4.641,1207,3.927,1208,3.927,1209,2.859,1210,2.647,1216,2.859,1217,2.859,1218,3.927,1222,3.615,1231,4.486,1232,2.747,1233,2.859,1236,3.296,1240,3.497,1243,3.497,1244,4.804,1246,2.859,1247,2.859,1251,3.296,1252,3.296,1279,3.749,1286,5.487,1287,6.638,1288,4.599,1289,4.086]],["title/injectables/IsUsernameUniqueValidator.html",[582,0.88,1290,3.52]],["body/injectables/IsUsernameUniqueValidator.html",[0,0.343,3,0.06,4,0.054,5,0.047,8,1.116,10,0.186,12,0.77,13,0.993,15,1.758,18,0.223,19,0.007,20,0.821,22,1.758,23,0.358,28,0.912,29,0.704,30,1.142,31,1.415,34,0.144,36,0.085,37,0.978,41,1.757,50,0.004,51,0.004,75,2.716,78,2.716,154,0.223,203,4.203,219,0.286,224,2.396,273,2.792,283,1.543,285,1.314,291,1.633,297,0.611,332,2.295,353,3.105,355,2.785,386,2.462,387,2.396,390,1.913,416,1.708,418,2.082,434,1.771,460,2.05,462,2.372,502,2.721,582,1.112,583,1.385,589,4.353,593,3.146,706,2.109,742,0.961,754,1.611,788,3.263,941,2.291,946,6.179,958,2.675,1159,2.578,1187,5.308,1189,3.638,1190,3.134,1192,3.638,1193,5.643,1195,3.638,1196,2.562,1198,3.638,1199,4.876,1200,3.917,1201,4.45,1202,3.146,1203,3.146,1204,3.048,1205,3.638,1206,4.673,1207,3.638,1208,3.638,1209,2.562,1210,3.917,1211,5.824,1213,3.134,1214,5.174,1215,3.36,1216,2.562,1217,2.562,1218,2.562,1219,2.954,1220,4.194,1221,2.954,1222,2.924,1223,2.954,1224,2.954,1225,2.954,1227,2.954,1228,2.954,1229,2.954,1230,2.562,1231,4.23,1232,2.462,1233,2.562,1256,3.134,1259,3.663,1261,3.663,1262,3.663,1290,5.174,1291,4.122,1292,3.663]],["title/injectables/JwtAuthGuard.html",[582,0.88,1293,3.52]],["body/injectables/JwtAuthGuard.html",[0,0.315,3,0.121,4,0.07,5,0.061,10,0.243,12,0.793,13,1.19,18,0.256,19,0.007,23,0.369,28,1.046,29,0.725,30,0.828,34,0.16,36,0.078,41,1.927,50,0.005,51,0.005,119,2.427,154,0.23,219,0.342,266,3.09,272,2.802,282,4.336,283,1.059,287,3.65,291,1.079,297,0.796,387,2.198,416,1.348,418,2.712,419,1.963,475,5.713,479,3.652,493,4.187,505,1.6,533,4.548,549,1.51,559,2.198,571,3.652,582,1.332,583,1.804,663,3.65,733,1.426,745,2.852,1091,5.625,1159,3.088,1293,5.329,1294,7.802,1295,4.771,1296,6.227,1297,5.329,1298,6.227,1299,7.802,1300,4.377,1301,6.988,1302,5.369,1303,5.329,1304,5.369,1305,5.369,1306,7.802,1307,5.022,1308,7.349,1309,4.771,1310,5.329,1311,4.771,1312,4.771,1313,3.338,1314,3.338,1315,3.208,1316,3.338,1317,3.338,1318,3.338]],["title/classes/JwtEnvironmentVariables.html",[0,0.271,1319,4.114]],["body/classes/JwtEnvironmentVariables.html",[0,0.492,2,0.765,3,0.081,4,0.073,5,0.064,10,0.253,11,0.869,18,0.236,19,0.007,20,0.848,23,0.378,34,0.163,36,0.105,50,0.005,51,0.005,154,0.183,219,0.389,272,2.877,285,1.616,291,1.124,317,4.276,319,3.998,323,3.34,324,2.911,329,3.335,331,4.019,332,1.733,338,4.141,339,3.34,340,4.141,341,3.34,347,4.141,348,4.472,350,2.062,351,4.141,352,2.465,353,2.749,354,3.34,355,2.289,361,3.34,362,3.218,363,3.34,364,3.34,365,3.34,368,3.218,379,1.586,434,2.402,437,4.893,533,5.45,569,3.803,580,4.006,586,5.47,624,4.968,695,4.968,1319,7.463,1320,5.591,1321,7.954,1322,7.954,1323,5.591,1324,5.591,1325,5.591,1326,5.591,1327,5.591,1328,5.591]],["title/injectables/JwtStrategy.html",[565,3.52,582,0.88]],["body/injectables/JwtStrategy.html",[0,0.248,3,0.062,4,0.055,5,0.048,10,0.191,12,0.675,13,1.012,15,1.639,18,0.195,19,0.007,23,0.314,28,1.005,29,0.617,30,0.919,31,1.442,34,0.174,36,0.062,37,1.005,41,1.683,45,1.338,50,0.004,51,0.004,68,2.761,119,1.914,154,0.226,187,3.707,219,0.291,266,2.436,269,1.525,275,0.805,278,3.106,283,1.479,285,0.951,291,0.851,297,0.627,324,2.204,352,1.848,353,3.286,362,3.432,401,3.221,402,1.582,403,2.638,416,1.882,417,3.019,419,2.524,421,2.138,422,2.967,434,2.562,460,2.626,462,3.432,488,1.071,501,4.056,504,5.699,505,1.261,533,5.32,549,1.19,559,1.733,565,4.535,569,2.879,571,4.696,580,3.033,582,1.133,583,1.422,586,3.219,588,2.019,589,4.479,591,7.011,593,3.206,594,4.861,601,4.861,606,2.879,607,3.761,706,1.312,733,1.124,754,1.654,852,4.535,991,4.861,1129,4.861,1293,4.535,1297,6.98,1310,4.535,1311,3.761,1312,5.299,1329,4.233,1330,6.135,1331,7.128,1332,5.299,1333,5.299,1334,5.299,1335,4.233,1336,5.963,1337,6.11,1338,4.233,1339,5.299,1340,5.299,1341,5.299,1342,4.233,1343,4.233,1344,4.233,1345,3.761,1346,3.761,1347,3.761,1348,4.233,1349,4.233,1350,4.233,1351,4.233,1352,4.233,1353,4.233,1354,4.233,1355,4.233,1356,6.904,1357,4.233,1358,4.233]],["title/injectables/LocalAuthGuard.html",[582,0.88,1359,3.774]],["body/injectables/LocalAuthGuard.html",[0,0.404,3,0.101,4,0.09,5,0.079,19,0.007,34,0.159,36,0.101,50,0.006,51,0.006,154,0.226,219,0.4,297,1.022,475,6.679,493,4.894,536,3.803,571,4.691,582,1.557,583,2.317,733,1.832,1295,6.129,1296,7.28,1297,6.23,1298,7.28,1309,6.129,1359,6.679,1360,6.897,1361,6.129]],["title/entities/LocalFile.html",[269,1.184,826,2.766]],["body/entities/LocalFile.html",[0,0.256,3,0.064,4,0.057,5,0.109,10,0.198,11,0.737,12,0.691,18,0.289,19,0.007,20,0.901,23,0.447,34,0.147,35,1.383,36,0.064,41,1.947,49,3.946,50,0.005,51,0.005,60,2.96,63,6.521,64,3.248,65,6.521,66,6.082,67,2.441,116,2.432,128,3.513,131,3.513,149,4.374,154,0.143,219,0.298,269,2.119,348,4.37,379,1.874,456,1.504,488,0.786,536,4.42,606,2.976,663,3.179,733,1.162,735,1.784,756,2.972,814,6.082,817,6.082,821,7.828,826,3.647,833,3.888,834,3.567,890,3.513,955,2.84,956,2.84,957,1.88,1007,2.84,1062,3.961,1067,3.961,1068,3.961,1362,8.672,1363,4.376,1364,6.104,1365,6.104,1366,4.376,1367,6.104,1368,4.376,1369,4.641,1370,4.376,1371,4.376,1372,4.376,1373,3.888,1374,4.976,1375,3.888,1376,4.376,1377,4.976,1378,4.376,1379,3.327,1380,4.976,1381,5.424,1382,3.136]],["title/injectables/LocalFileByIdPipe.html",[582,0.88,1383,3.774]],["body/injectables/LocalFileByIdPipe.html",[0,0.443,3,0.063,4,0.056,5,0.105,8,1.171,10,0.195,12,0.685,13,1.028,15,1.658,18,0.198,19,0.007,20,0.888,22,2.136,23,0.318,28,0.812,29,0.626,30,0.667,31,1.83,34,0.164,36,0.063,37,1.027,45,1.367,50,0.004,51,0.004,68,2.421,154,0.198,258,2.325,269,1.935,275,1.151,278,3.941,283,1.194,285,0.971,287,3.638,291,1.404,297,0.641,325,3.238,332,1.34,350,1.735,352,1.876,353,2.313,401,3.251,402,1.616,403,2.669,416,1.9,417,3.043,419,2.213,422,1.858,460,2.121,488,0.777,502,1.73,505,1.804,536,3.831,546,2.689,547,2.689,549,1.702,559,3.379,582,1.151,583,1.453,588,2.063,826,2.584,827,2.252,831,3.099,832,2.807,957,1.858,1150,3.929,1159,2.667,1222,3.251,1239,5.612,1241,4.118,1245,3.526,1246,2.689,1247,2.689,1313,2.689,1314,2.689,1315,2.584,1316,2.689,1317,2.689,1318,2.689,1383,4.935,1384,6.985,1385,3.289,1386,4.339,1387,4.118,1388,5.423,1389,4.281,1390,4.704,1391,5.147,1392,4.911,1393,4.604,1394,3.099,1395,4.325,1396,3.099,1397,5.423,1398,4.325,1399,4.604,1400,4.339,1401,3.099,1402,3.099,1403,3.099,1404,2.942,1405,3.099,1406,2.807,1407,4.325,1408,3.289,1409,4.325]],["title/classes/LocalFileIdParam.html",[0,0.271,1410,4.114]],["body/classes/LocalFileIdParam.html",[0,0.447,2,0.839,3,0.089,4,0.08,5,0.107,10,0.277,11,0.921,18,0.201,19,0.007,20,0.771,23,0.322,34,0.168,36,0.089,50,0.006,51,0.006,60,3.002,154,0.25,219,0.373,247,1.511,260,2.025,329,3.198,331,3.853,332,1.9,379,1.352,536,4.147,581,1.691,730,2.144,731,2.144,742,1.777,762,2.562,786,3.54,828,4.662,829,4.998,830,4.662,867,3.663,881,3.407,1222,3.277,1237,6.217,1389,3.853,1410,6.777,1411,7.627,1412,4.998,1413,6.131,1414,5.465,1415,6.131,1416,5.448]],["title/classes/LocalFileSeeder.html",[0,0.271,1417,4.114]],["body/classes/LocalFileSeeder.html",[0,0.365,2,0.851,3,0.091,4,0.081,5,0.071,8,2.083,10,0.281,12,0.704,13,1.306,15,1.984,18,0.204,19,0.007,21,1.783,23,0.327,28,0.834,29,0.643,30,0.959,31,1.861,34,0.169,35,2.433,36,0.091,37,1.477,50,0.006,51,0.006,154,0.204,219,0.376,269,1.968,275,1.182,826,4.992,828,4.73,830,4.73,832,4.037,990,4.037,1018,6.838,1019,5.528,1417,6.838,1418,6.429,1419,4.597,1420,5.515,1421,6.55,1422,6.221,1423,6.221,1424,6.221,1425,4.458,1426,4.458,1427,6.221,1428,6.221,1429,4.458,1430,4.458]],["title/classes/LocalFileUploadEnvironmentVariables.html",[0,0.271,1431,4.114]],["body/classes/LocalFileUploadEnvironmentVariables.html",[0,0.487,2,0.743,3,0.079,4,0.071,5,0.105,10,0.245,11,0.852,18,0.178,19,0.007,20,0.713,23,0.285,34,0.167,36,0.103,50,0.005,51,0.005,58,1.942,154,0.178,219,0.383,272,2.822,285,1.585,291,1.091,317,4.216,319,3.922,323,4.216,324,2.827,329,2.959,331,3.566,332,1.682,338,4.062,339,3.243,340,4.062,341,3.243,347,4.062,350,2.023,351,4.062,352,2.431,353,2.697,354,3.243,355,2.222,361,3.243,362,3.124,363,3.243,364,3.243,365,3.243,368,3.124,379,1.197,434,2.332,437,3.692,536,4.096,660,6.71,688,4.823,689,6.271,691,4.425,692,5.754,693,4.823,694,4.823,1251,3.89,1252,3.89,1431,7.379,1432,7.058,1433,5.428,1434,7.843,1435,5.428,1436,6.271,1437,5.428,1438,5.428,1439,5.428,1440,4.425,1441,5.428]],["title/injectables/LocalStrategy.html",[566,3.52,582,0.88]],["body/injectables/LocalStrategy.html",[0,0.263,3,0.065,4,0.058,5,0.051,10,0.202,12,0.702,13,1.053,15,1.69,18,0.203,19,0.007,20,0.843,23,0.326,28,1.03,29,0.642,30,0.957,31,1.501,34,0.166,36,0.065,37,1.064,41,1.874,50,0.005,51,0.005,68,2.481,119,2.026,154,0.233,187,3.858,203,3.665,219,0.303,269,1.587,275,0.852,278,3.232,283,1.516,285,1.006,291,0.901,297,0.664,352,1.923,353,3.425,362,3.572,401,3.302,402,1.675,403,2.72,416,1.929,417,3.083,419,2.269,421,2.264,422,3.059,434,2.666,460,2.174,462,3.572,488,1.115,493,3.707,505,1.335,512,4.457,529,5.933,530,3.653,536,3.745,549,1.26,551,3.982,552,3.982,553,3.653,559,1.834,566,4.719,571,4.842,582,1.179,583,1.506,588,2.138,601,5.059,606,3.048,733,1.19,852,4.719,991,5.059,1129,5.059,1297,7.041,1330,6.325,1331,7.111,1332,5.514,1333,5.514,1334,5.514,1339,5.514,1340,5.514,1341,5.514,1345,3.982,1346,3.982,1347,3.982,1359,5.059,1361,5.514,1390,3.858,1403,3.211,1404,3.048,1442,4.481,1443,4.481,1444,6.206,1445,4.481,1446,4.481,1447,4.481,1448,4.481]],["title/classes/LoggerEnvironmentVariables.html",[0,0.271,1449,4.114]],["body/classes/LoggerEnvironmentVariables.html",[0,0.477,2,0.629,3,0.092,4,0.06,5,0.053,10,0.208,11,0.763,12,0.52,18,0.236,19,0.007,20,0.638,22,1.5,23,0.38,34,0.176,36,0.092,50,0.005,51,0.005,64,1.757,154,0.151,219,0.353,224,1.883,272,2.526,282,2.556,285,1.621,291,0.924,312,2.714,314,3.296,317,3.879,318,3.497,319,4.01,322,3.013,323,2.747,324,2.395,325,2.757,326,2.556,327,4.527,329,3.257,330,3.927,331,3.191,332,1.425,333,3.296,334,4.1,335,3.497,336,2.859,337,2.984,338,3.636,339,2.747,340,3.636,341,2.747,347,3.636,350,1.811,351,3.636,352,2.236,353,2.414,354,2.747,355,1.883,359,2.859,360,3.296,361,2.747,362,2.647,363,2.747,364,2.747,365,2.747,366,4.527,368,2.647,379,1.591,402,2.361,403,3.111,417,2.968,434,1.976,435,3.749,437,3.128,441,3.128,470,1.681,519,2.984,581,1.269,670,3.749,671,4.086,673,4.527,706,1.425,955,2.984,956,2.984,957,1.976,988,5.613,1002,4.086,1003,4.086,1004,4.086,1232,2.747,1440,3.749,1449,6.903,1450,4.599,1451,7.216,1452,7.216,1453,7.216,1454,4.599,1455,4.599,1456,4.599,1457,3.749,1458,4.599,1459,4.599,1460,4.599,1461,4.599,1462,4.599,1463,4.599,1464,4.086,1465,4.599,1466,4.086,1467,4.599,1468,4.599,1469,4.599,1470,4.599,1471,4.599,1472,4.599]],["title/injectables/LoggingInterceptor.html",[582,0.88,1473,4.114]],["body/injectables/LoggingInterceptor.html",[0,0.311,3,0.077,4,0.069,5,0.061,8,1.438,10,0.24,12,0.787,13,1.181,18,0.228,19,0.007,23,0.366,28,0.933,29,0.72,30,0.819,34,0.15,36,0.077,50,0.005,51,0.005,68,2.124,154,0.228,219,0.34,221,1.883,260,1.848,282,2.952,283,1.048,285,1.563,291,1.067,297,0.787,352,2.552,386,4.157,389,4.733,402,1.985,403,2.965,416,2.067,417,3.536,419,1.942,428,5.673,472,4.516,582,1.323,583,1.785,588,2.534,756,2.719,957,3.539,1001,5.673,1091,5.602,1155,6.184,1159,3.066,1161,4.72,1307,4.987,1387,3.613,1473,6.184,1474,5.312,1475,6.959,1476,6.959,1477,5.673,1478,4.33,1479,5.291,1480,5.312,1481,5.673,1482,6.262,1483,5.312,1484,5.902,1485,5.291,1486,5.312,1487,3.806,1488,4.039,1489,5.312,1490,5.312,1491,5.312,1492,5.312,1493,5.312,1494,5.312,1495,6.959,1496,3.806,1497,5.312,1498,5.312,1499,5.312,1500,5.673]],["title/classes/NoContentSuccessResponse.html",[0,0.271,1501,4.114]],["body/classes/NoContentSuccessResponse.html",[0,0.293,2,0.685,3,0.073,4,0.065,5,0.057,10,0.226,11,0.808,18,0.283,19,0.007,20,0.762,23,0.454,29,0.692,34,0.146,36,0.073,45,1.583,50,0.005,51,0.005,64,2.557,98,4.504,154,0.219,194,3.107,219,0.327,221,2.27,223,1.946,247,1.234,260,1.778,275,1.272,293,3.314,297,0.742,312,2.152,379,1.849,456,1.649,470,2.447,488,0.9,505,2.246,521,5.133,523,1.683,581,1.846,597,2.53,706,1.552,729,2.207,730,2.263,731,1.882,732,3.026,733,2.137,735,1.956,736,4.115,737,3.204,738,3.218,741,3.603,742,2.011,743,4.638,745,2.756,751,2.608,752,2.608,756,1.957,757,2.608,758,2.457,759,2.457,760,2.457,762,2.249,963,5.222,964,6.377,965,4.45,966,4.083,967,4.083,968,4.083,969,4.083,970,4.083,1501,7.15,1502,5.008,1503,5.008]],["title/classes/NotFoundErrorResponse.html",[0,0.271,1504,4.114]],["body/classes/NotFoundErrorResponse.html",[0,0.276,2,0.645,3,0.069,4,0.061,5,0.054,10,0.213,11,0.776,18,0.284,19,0.007,20,0.793,23,0.456,34,0.152,36,0.069,50,0.005,51,0.005,64,2.455,154,0.239,194,2.983,217,3.243,219,0.314,221,1.979,223,1.554,247,1.162,258,3.93,260,1.707,275,1.221,293,2.349,297,0.699,312,2.026,316,3.373,350,1.351,379,1.912,456,1.583,470,2.349,488,0.847,505,2.339,523,1.584,581,1.773,597,2.382,729,2.077,730,2.207,731,1.807,732,2.905,733,2.085,734,3.958,735,1.878,736,4.031,737,3.139,738,3.531,739,3.305,740,3.141,741,3.727,742,2.086,743,4.663,744,2.931,745,2.673,746,2.931,747,2.077,748,2.931,749,2.535,750,2.931,751,2.456,752,2.456,753,2.931,754,1.843,755,2.931,756,1.843,757,2.456,758,2.313,759,2.313,760,2.313,761,2.931,762,2.456,763,2.077,764,2.077,1504,6.976,1505,4.715,1506,4.19,1507,4.19]],["title/classes/NotFoundException.html",[0,0.271,1392,3.004]],["body/classes/NotFoundException.html",[0,0.268,2,0.626,3,0.067,4,0.059,5,0.052,11,0.76,12,0.518,18,0.236,19,0.007,20,0.886,21,2.513,22,1.495,23,0.241,28,0.614,29,0.473,34,0.15,36,0.067,50,0.005,51,0.005,67,2.518,119,2.069,154,0.206,217,2.789,219,0.379,221,2.33,258,3.385,275,1.368,283,0.903,285,1.414,297,0.679,352,1.952,387,1.874,414,3.09,416,1.149,456,1.552,470,3.147,488,0.822,505,2.145,523,1.538,549,2.18,559,2.947,733,1.672,734,3.967,737,2.962,738,2.518,739,3.254,740,3.093,742,1.467,745,2.302,747,3.416,763,2.017,764,2.017,769,4.168,770,3.762,771,3.762,772,4.144,773,3.762,774,3.87,776,3.5,779,3.762,780,4.632,781,4.168,782,3.762,784,4.669,785,5.019,786,3.9,788,2.774,789,3.625,790,3.762,791,2.246,792,2.635,793,2.735,794,2.735,795,2.735,796,2.735,797,2.735,798,2.735,799,2.735,1392,5.452,1506,4.068,1507,6.397,1508,6.297,1509,4.578,1510,4.578,1511,4.578,1512,6.297,1513,7.754]],["title/classes/OkSuccessResponse.html",[0,0.271,1514,4.114]],["body/classes/OkSuccessResponse.html",[0,0.294,2,0.686,3,0.073,4,0.065,5,0.057,10,0.227,11,0.809,18,0.283,19,0.007,20,0.762,23,0.454,29,0.693,34,0.146,36,0.073,45,1.586,50,0.005,51,0.005,64,2.56,154,0.219,194,3.11,219,0.327,221,2.271,223,1.947,247,1.236,260,1.78,275,1.274,293,3.315,297,0.744,307,4.166,312,2.156,379,1.85,456,1.651,470,2.45,488,0.901,505,2.248,521,5.134,523,1.685,581,1.848,597,2.534,706,1.555,729,2.21,730,2.264,731,1.884,732,3.029,733,2.139,735,1.958,736,4.117,737,3.206,738,3.22,741,3.605,742,2.012,743,4.641,745,2.758,751,2.613,752,2.613,756,1.96,757,2.613,758,2.461,759,2.461,760,2.461,762,2.251,963,5.226,964,6.38,966,4.09,967,4.09,968,4.09,969,4.09,970,4.09,1514,7.155,1515,5.017,1516,5.017,1517,4.458]],["title/injectables/ParseIntPipe.html",[582,0.88,1518,4.114]],["body/injectables/ParseIntPipe.html",[0,0.467,3,0.082,4,0.073,5,0.064,8,1.519,10,0.253,12,0.635,13,1.224,18,0.184,19,0.007,20,0.915,22,2.114,23,0.295,28,0.752,29,0.58,30,0.865,34,0.14,36,0.082,50,0.005,51,0.005,61,5.171,154,0.184,278,3.756,285,1.26,287,4.15,291,1.128,297,0.832,322,3.44,325,3.213,352,2.235,488,1.008,505,1.672,549,1.578,559,3.262,582,1.371,583,1.885,957,2.411,1150,4.68,1159,3.177,1160,6.408,1313,3.489,1314,3.489,1315,3.353,1316,3.489,1317,3.489,1318,3.489,1386,5.168,1387,4.905,1388,6.234,1390,5.228,1391,4.905,1394,4.021,1396,5.168,1397,6.027,1400,5.168,1404,3.817,1405,4.021,1406,3.642,1518,6.408,1519,7.211,1520,5.612,1521,5.612,1522,5.612,1523,7.211,1524,5.612,1525,4.987,1526,5.612,1527,5.612]],["title/entities/Post.html",[95,1.692,269,1.184]],["body/entities/Post.html",[0,0.265,3,0.066,4,0.059,5,0.052,10,0.204,11,0.753,12,0.511,18,0.274,19,0.007,20,0.883,23,0.44,34,0.149,35,1.427,36,0.066,41,1.731,49,3.317,50,0.005,51,0.005,60,2.98,95,3.507,98,5.123,100,6.152,116,4.284,127,3.547,128,3.591,131,3.591,133,5.543,154,0.148,219,0.305,269,2.14,379,1.844,456,1.537,488,0.811,606,3.071,706,1.933,733,1.199,735,1.823,756,3.012,846,5.503,847,4.743,890,3.591,955,5.003,956,5.003,957,3.312,1007,2.93,1062,4.048,1067,4.048,1068,4.048,1260,4.332,1369,4.743,1373,4.012,1374,6.284,1375,4.012,1377,5.085,1379,3.433,1380,5.085,1381,5.543,1382,3.236,1528,4.515,1529,6.034,1530,4.515,1531,4.515,1532,4.515,1533,4.515,1534,4.515,1535,5.543,1536,4.515,1537,4.012,1538,6.238,1539,4.515,1540,4.515,1541,6.238,1542,5.543,1543,6.238,1544,4.012]],["title/injectables/PostByIdHook.html",[582,0.88,1545,3.774]],["body/injectables/PostByIdHook.html",[0,0.29,3,0.072,4,0.064,5,0.057,8,1.34,10,0.224,12,0.751,13,1.127,15,1.779,18,0.218,19,0.007,23,0.349,28,0.89,29,0.687,30,1.024,31,1.606,34,0.162,36,0.072,37,1.175,50,0.005,51,0.005,68,2.656,95,3.212,154,0.218,219,0.324,260,2.218,273,3.168,275,1.522,283,1.478,291,0.995,297,0.734,352,2.058,390,3.083,391,3.967,401,3.441,402,1.85,403,2.863,416,2.011,417,3.191,419,2.428,421,2.501,422,2.127,460,2.326,488,0.889,489,5.05,581,2.067,582,1.262,583,1.663,588,2.361,662,3.077,673,4.759,700,2.849,786,2.298,868,3.212,1127,5.05,1222,2.853,1277,5.551,1278,4.31,1280,3.547,1419,4.99,1545,6.529,1546,7.494,1547,4.035,1548,6.549,1549,6.539,1550,5.414,1551,4.31,1552,4.759,1553,4.31,1554,4.035,1555,4.035,1556,4.035,1557,5.414,1558,4.035,1559,4.035,1560,4.95,1561,4.95,1562,4.95]],["title/injectables/PostByIdPipe.html",[582,0.88,1563,3.317]],["body/injectables/PostByIdPipe.html",[0,0.447,3,0.064,4,0.057,5,0.05,8,1.191,10,0.199,12,0.693,13,1.04,15,1.674,18,0.201,19,0.007,20,0.891,22,2.121,23,0.322,28,0.822,29,0.634,30,0.679,31,1.844,34,0.165,36,0.064,37,1.045,45,1.392,50,0.005,51,0.005,68,2.451,95,3.3,154,0.201,258,2.366,269,1.95,275,1.165,278,3.971,283,1.209,285,0.988,287,3.672,291,1.417,297,0.652,325,3.171,332,1.364,350,1.757,352,1.899,353,2.342,401,3.276,402,1.645,403,2.694,416,1.914,417,3.063,419,2.241,421,2.224,422,1.891,460,2.147,488,0.791,502,1.76,505,1.826,549,1.723,559,3.398,582,1.165,583,1.479,588,2.1,827,2.292,868,2.857,957,1.891,1150,3.978,1159,2.7,1222,3.276,1246,2.736,1247,2.736,1277,5.399,1278,3.978,1280,3.154,1313,2.736,1314,2.736,1315,2.63,1316,2.736,1317,2.736,1318,2.736,1385,3.347,1386,4.392,1387,4.169,1388,5.464,1389,4.302,1390,4.74,1391,5.186,1392,4.948,1393,4.66,1394,3.154,1396,4.392,1397,5.464,1399,4.66,1400,4.392,1401,3.154,1402,3.154,1403,3.154,1404,2.994,1405,3.154,1406,2.857,1408,3.347,1563,4.392,1564,7.051,1565,3.588,1566,3.588,1567,4.402,1568,4.402,1569,4.402]],["title/classes/PostIdParam.html",[0,0.271,1570,3.52]],["body/classes/PostIdParam.html",[0,0.452,2,0.853,3,0.091,4,0.081,5,0.071,10,0.282,11,0.931,18,0.204,19,0.007,20,0.778,23,0.328,34,0.169,36,0.091,50,0.006,51,0.006,60,3.016,95,3.282,154,0.252,219,0.376,247,1.536,260,2.046,329,3.231,332,1.932,379,1.374,581,1.72,730,2.167,731,2.167,742,1.796,762,2.589,786,3.577,827,3.246,837,4.467,861,4.74,862,5.082,867,3.724,881,3.464,1222,3.311,1275,6.282,1389,3.893,1414,5.522,1570,5.859,1571,7.706,1572,6.234,1573,6.234,1574,6.234,1575,6.234]],["title/classes/PostResponse.html",[0,0.271,1576,3.774]],["body/classes/PostResponse.html",[0,0.265,2,0.619,3,0.066,4,0.059,5,0.052,10,0.204,11,0.754,18,0.291,19,0.007,20,0.846,23,0.426,34,0.169,36,0.066,50,0.005,51,0.005,60,2.592,95,3.508,98,5.301,100,6.155,127,3.085,154,0.274,219,0.305,223,1.51,247,1.114,275,1.187,379,1.784,456,1.539,488,0.812,523,2.403,527,5.801,528,4.018,581,2.128,729,1.992,730,2.169,731,1.756,732,2.823,733,1.201,735,1.825,741,3.478,742,1.951,762,2.812,846,5.506,847,5.865,861,3.438,862,3.686,863,3.076,864,3.241,871,4.018,872,3.686,873,4.018,939,3.076,940,3.241,1042,4.018,1043,4.018,1044,4.018,1046,4.018,1047,4.018,1260,4.483,1529,6.268,1570,5.865,1576,6.288,1577,8.37,1578,3.47,1579,5.247,1580,5.865,1581,3.47,1582,3.438,1583,4.522,1584,4.018,1585,4.018,1586,4.018]],["title/classes/PostSeeder.html",[0,0.271,1587,4.114]],["body/classes/PostSeeder.html",[0,0.346,2,0.807,3,0.086,4,0.077,5,0.067,8,2.015,10,0.267,12,0.668,13,1.264,15,1.937,18,0.193,19,0.007,21,1.691,23,0.31,28,0.791,29,0.61,30,0.91,31,1.801,34,0.166,35,2.354,36,0.086,37,2.034,50,0.006,51,0.006,95,2.982,127,2.36,154,0.193,219,0.364,269,1.904,275,1.121,352,1.829,398,4.81,861,4.487,990,3.829,1023,5.243,1260,2.981,1418,6.33,1419,4.448,1420,5.336,1421,6.563,1425,5.336,1426,4.228,1429,4.228,1430,4.228,1587,6.616,1588,5.901,1589,5.901,1590,5.901,1591,5.901,1592,5.901,1593,5.901,1594,5.901,1595,5.901,1596,7.446,1597,5.901,1598,5.901,1599,5.901,1600,5.901,1601,5.901,1602,5.901]],["title/controllers/PostsController.html",[277,2.208,1603,3.774]],["body/controllers/PostsController.html",[0,0.109,3,0.027,4,0.024,5,0.021,10,0.084,12,0.766,13,0.535,15,1.924,18,0.176,19,0.007,23,0.306,28,0.719,29,0.554,30,1.138,31,1.784,34,0.17,36,0.027,37,1.47,41,1.078,50,0.002,51,0.002,58,1.718,60,3.045,64,0.713,68,1.634,83,2.17,85,2.531,95,3.423,154,0.268,216,1.813,217,2.675,219,0.154,221,2.459,223,1.886,224,3.02,247,0.46,248,3.107,250,1.211,251,4.046,252,4.708,253,1.211,256,1.037,257,3.843,258,1.003,260,0.496,265,4.437,266,1.074,267,3.843,268,1.16,269,0.477,277,2.29,283,1.456,291,1.169,293,2.805,297,0.277,302,2.257,304,3.441,306,3.775,307,1.16,309,2.78,311,1.16,374,0.972,378,1.211,379,1.282,384,5.019,385,2.257,389,3.265,400,1.269,401,1.353,402,0.697,403,1.203,409,4.211,410,4.763,411,1.269,412,2.257,413,4.211,414,0.916,416,0.791,417,1.561,419,1.494,422,2.499,460,1.103,493,1.115,497,3.44,501,1.269,502,2.601,505,2.463,516,4.708,518,2.257,519,1.211,520,3.843,521,3.441,522,1.419,523,1.058,524,3.775,525,1.337,526,1.337,539,2.197,543,1.521,546,3.616,547,4.478,549,2.118,556,3.334,557,3.843,558,3.843,559,2.534,581,2.182,663,0.972,706,0.578,730,1.635,731,1.635,767,2.929,781,2.581,786,0.866,844,4.662,868,1.211,1230,4.044,1258,2.763,1260,3.639,1277,2.984,1278,4.788,1280,1.337,1389,0.943,1529,1.269,1545,4.372,1553,1.211,1563,3.843,1576,3.913,1603,2.568,1604,1.866,1605,4.087,1606,4.087,1607,4.8,1608,4.087,1609,4.087,1610,4.087,1611,1.866,1612,1.866,1613,3.15,1614,1.866,1615,1.866,1616,8.466,1617,1.866,1618,4.8,1619,4.8,1620,1.866,1621,3.913,1622,1.866,1623,1.866,1624,5.303,1625,1.866,1626,1.866,1627,1.866,1628,1.866,1629,5.303,1630,1.866,1631,1.866,1632,1.866,1633,5.303,1634,1.866,1635,1.866,1636,4.8,1637,1.521,1638,4.078,1639,1.419,1640,1.419,1641,1.521,1642,1.521,1643,1.521,1644,1.658,1645,1.866,1646,1.658,1647,2.799,1648,1.866,1649,1.866,1650,1.658,1651,1.658,1652,1.658,1653,1.658,1654,1.211,1655,1.866,1656,1.866,1657,1.866,1658,1.866,1659,1.866,1660,1.866,1661,1.866,1662,1.866,1663,1.866,1664,1.866,1665,1.866,1666,1.521,1667,1.866,1668,3.65,1669,1.866,1670,1.521,1671,1.866,1672,1.866,1673,1.866,1674,2.568,1675,1.866,1676,1.866,1677,1.521,1678,1.866,1679,1.866,1680,1.866,1681,1.866,1682,1.866,1683,1.866,1684,1.866,1685,1.866,1686,1.866]],["title/modules/PostsModule.html",[443,1.941,1687,3.317]],["body/modules/PostsModule.html",[0,0.332,3,0.083,4,0.074,5,0.065,19,0.007,34,0.181,36,0.083,50,0.005,51,0.005,95,2.653,154,0.186,219,0.354,297,0.84,374,3.778,443,3.539,445,2.95,446,3.9,452,4.176,453,3.261,454,3.148,468,4.709,476,4.334,576,4.06,655,4.06,661,4.308,662,3.522,676,3.261,700,3.261,867,3.384,868,3.676,881,3.148,1273,6.787,1277,5.549,1278,4.709,1280,4.06,1551,3.676,1563,6.396,1603,6.525,1652,5.034,1653,5.034,1654,3.676,1687,6.787,1688,5.034,1689,5.034,1690,5.034,1691,6.071,1692,5.665,1693,5.034,1694,7.255,1695,5.665,1696,5.665,1697,4.618]],["title/injectables/PostsService.html",[582,0.88,1277,2.878]],["body/injectables/PostsService.html",[0,0.171,3,0.043,4,0.038,5,0.063,10,0.132,12,0.81,13,0.769,15,2.107,18,0.234,19,0.007,20,0.846,23,0.393,28,0.96,29,0.74,30,1.271,31,2.025,34,0.139,35,0.923,36,0.043,37,1.773,45,1.431,50,0.003,51,0.003,58,2.236,60,3.086,68,1.811,83,3.376,85,3.357,95,3.479,127,2.499,154,0.245,219,0.221,223,1.341,269,1.599,283,1.563,285,1.017,291,1.757,293,3.169,297,0.433,304,2.516,390,2.102,391,4.926,401,2.685,402,1.091,403,2.119,416,1.569,417,2.585,419,1.655,421,3.616,422,3.075,458,3.314,460,1.943,465,5.896,500,4.251,502,3.086,536,2.102,582,0.861,583,0.981,588,1.392,676,1.68,706,2.71,754,3.097,846,1.985,868,1.894,888,2.358,957,1.254,1202,3.848,1203,3.36,1204,3.727,1260,4.286,1277,2.815,1278,4.645,1313,1.815,1314,1.815,1315,1.744,1316,1.815,1317,1.815,1318,1.815,1406,1.894,1529,3.08,1544,2.594,1698,2.919,1699,3.975,1700,4.218,1701,5.095,1702,3.691,1703,4.023,1704,6.25,1705,5.129,1706,2.919,1707,4.528,1708,2.919,1709,3.443,1710,3.691,1711,2.919,1712,3.443,1713,4.479,1714,4.528,1715,2.919,1716,3.443,1717,3.691,1718,2.919,1719,3.691,1720,2.919,1721,4.752,1722,4.528,1723,2.919,1724,2.22,1725,2.919,1726,2.919,1727,2.919,1728,4.528,1729,2.919,1730,2.919,1731,2.919,1732,2.919,1733,4.023,1734,2.919,1735,2.919,1736,2.919,1737,4.528,1738,2.919,1739,2.919,1740,2.919,1741,2.919,1742,2.919,1743,2.594]],["title/classes/RateLimitingEnvironmentVariables.html",[0,0.271,1744,4.114]],["body/classes/RateLimitingEnvironmentVariables.html",[0,0.5,2,0.72,3,0.077,4,0.068,5,0.06,10,0.238,11,0.835,18,0.227,19,0.007,22,1.642,23,0.364,34,0.17,36,0.101,50,0.005,51,0.005,154,0.172,219,0.378,272,2.767,285,1.554,291,1.058,317,4.154,319,3.845,322,3.915,323,4.133,324,2.742,325,2.952,326,2.926,329,3.24,330,4.804,332,1.632,334,3.417,336,3.273,337,3.417,338,3.982,339,3.145,340,3.982,341,3.145,347,3.982,350,1.983,351,3.982,352,2.395,353,2.643,354,3.145,355,2.155,359,4.301,361,3.145,363,3.145,364,3.145,365,3.145,368,3.03,379,1.525,434,2.262,441,4.706,487,4.003,636,4.678,666,7.575,667,7.575,701,4.678,702,6.867,704,6.148,1744,7.293,1745,7.728,1746,5.265,1747,7.728,1748,7.728,1749,5.265,1750,5.265,1751,5.265,1752,5.265,1753,5.265]],["title/classes/RedisStoreEnvironmentVariables.html",[0,0.271,1754,4.114]],["body/classes/RedisStoreEnvironmentVariables.html",[0,0.501,2,0.727,3,0.077,4,0.069,5,0.061,10,0.24,11,0.84,18,0.228,19,0.007,20,0.703,22,1.261,23,0.366,34,0.17,36,0.101,50,0.005,51,0.005,154,0.174,219,0.379,272,2.783,285,1.563,291,1.067,317,4.172,319,3.867,320,3.806,321,4.039,322,3.319,323,4.157,324,2.766,325,2.659,326,2.952,329,3.254,330,4.326,331,3.516,332,1.646,334,3.447,336,3.302,337,3.447,338,4.005,339,3.173,340,4.005,341,3.173,347,4.005,350,1.995,351,4.005,352,2.405,353,2.659,354,3.173,355,2.174,359,3.302,361,3.173,362,3.057,363,3.173,364,3.173,365,3.173,368,3.057,379,1.534,434,2.282,437,3.613,441,3.613,679,4.72,684,7.151,685,6.97,686,6.184,1754,7.318,1755,7.761,1756,5.312,1757,7.761,1758,7.761,1759,5.312,1760,5.312,1761,5.312,1762,5.312,1763,5.312]],["title/classes/RemovePostTitleAttribute1678285751957.html",[0,0.271,1764,4.114]],["body/classes/RemovePostTitleAttribute1678285751957.html",[0,0.289,2,0.674,3,0.072,4,0.064,5,0.056,8,1.791,9,3.566,10,0.222,11,0.799,12,0.944,13,1.124,14,3.986,15,2.039,16,3.157,17,3.157,18,0.245,19,0.007,20,0.498,21,1.412,22,1.169,23,0.393,25,3.157,26,4.31,28,0.887,29,0.684,30,1.02,31,1.933,32,3.157,34,0.095,35,1.557,36,0.072,37,2.167,38,4.433,39,4.433,40,4.238,42,3.566,44,4.634,45,2.636,47,2.737,48,3.668,49,2.286,50,0.005,51,0.005,59,6.391,69,5.357,71,4.442,78,3.072,80,4.775,81,3.954,83,2.992,84,3.558,85,2.473,86,5.033,87,4.115,95,2.42,97,5.882,116,3.678,201,6.516,814,6.671,1764,7.102,1765,7.993,1766,4.926,1767,4.926,1768,4.926,1769,4.926,1770,6.619]],["title/classes/RemoveRoleTable1679272991389.html",[0,0.271,1771,4.114]],["body/classes/RemoveRoleTable1679272991389.html",[0,0.212,2,0.495,3,0.053,4,0.047,5,0.041,8,1.441,9,3.014,10,0.372,11,0.643,12,0.952,13,0.904,14,3.607,15,1.845,16,2.54,17,2.54,18,0.207,19,0.007,20,0.365,21,1.811,22,0.859,23,0.332,25,2.54,26,4.014,28,0.714,29,0.551,30,0.821,31,1.686,32,2.54,34,0.07,35,1.143,36,0.053,37,2.271,38,4.592,39,4.478,40,4.41,41,1.565,42,4.266,44,2.01,45,2.775,47,4.581,48,4.307,49,3.448,50,0.004,51,0.004,58,2.494,60,2.611,61,4.523,62,2.592,67,2.129,70,5.244,71,4.971,72,3.455,75,1.679,78,2.471,80,3.181,81,3.181,83,2.407,84,2.862,85,2.361,87,2.248,88,3.31,96,4.805,108,5.901,109,7.548,110,6.975,111,6.975,112,5.151,113,5.151,114,2.959,115,2.948,116,2.959,117,2.948,118,2.948,119,2.407,120,3.622,128,2.082,129,3.815,130,5.151,131,2.082,201,2.948,205,3.214,1771,6.193,1772,6.97,1773,3.617,1774,3.617,1775,3.617,1776,3.617]],["title/classes/RequestTimeoutErrorResponse.html",[0,0.271,1777,4.114]],["body/classes/RequestTimeoutErrorResponse.html",[0,0.275,2,0.643,3,0.068,4,0.061,5,0.054,10,0.212,11,0.774,18,0.284,19,0.007,20,0.792,23,0.456,34,0.152,36,0.068,50,0.005,51,0.005,64,2.45,154,0.239,194,2.977,217,3.241,219,0.313,221,1.975,223,1.551,247,1.158,260,2.082,261,4.964,275,1.219,293,2.344,297,0.697,312,2.02,316,3.369,350,1.347,379,1.911,456,1.58,470,2.344,488,0.844,505,2.336,523,1.579,581,1.769,597,2.375,729,2.071,730,2.204,731,1.803,732,2.899,733,2.082,734,3.956,735,1.874,736,4.026,737,3.135,738,3.528,739,3.299,740,3.136,741,3.724,742,2.085,743,4.659,744,2.922,745,2.668,746,2.922,747,2.071,748,2.922,749,2.527,750,2.922,751,2.448,752,2.448,753,2.922,754,1.837,755,2.922,756,1.837,757,2.448,758,2.306,759,2.306,760,2.306,761,2.922,762,2.452,763,2.071,764,2.071,1777,6.967,1778,4.7,1779,4.177,1780,4.177]],["title/classes/RequestTimeoutException.html",[0,0.271,1781,3.774]],["body/classes/RequestTimeoutException.html",[0,0.267,2,0.624,3,0.066,4,0.059,5,0.052,11,0.759,12,0.516,18,0.235,19,0.007,20,0.885,21,2.511,22,1.492,23,0.24,28,0.612,29,0.472,34,0.15,36,0.066,50,0.005,51,0.005,67,2.513,119,2.063,154,0.206,217,2.786,219,0.378,221,2.328,260,1.669,261,4.274,275,1.366,283,0.9,285,1.411,297,0.676,352,1.947,387,1.868,414,3.083,416,1.146,456,1.548,470,3.144,488,0.82,505,2.141,523,1.533,549,2.177,559,2.942,733,1.669,734,3.965,737,2.959,738,2.513,739,3.249,740,3.088,742,1.464,745,2.297,747,3.412,763,2.011,764,2.011,769,4.163,770,3.754,771,3.754,772,4.137,773,3.754,774,3.864,776,3.492,779,3.754,780,4.626,781,4.163,782,3.754,784,4.665,785,5.015,786,3.896,788,2.769,789,3.617,790,3.754,791,2.239,792,2.627,793,2.726,794,2.726,795,2.726,796,2.726,797,2.726,798,2.726,799,2.726,1779,4.055,1780,6.387,1781,6.843,1782,6.284,1783,4.564,1784,4.564,1785,4.564,1786,6.284,1787,7.744]],["title/interfaces/RequestWithAuthUser.html",[212,1.989,497,3.317]],["body/interfaces/RequestWithAuthUser.html",[3,0.099,4,0.088,5,0.078,10,0.307,11,0.98,18,0.222,19,0.007,21,1.945,34,0.132,36,0.099,41,2.16,50,0.006,51,0.006,154,0.222,212,3.73,214,3.907,219,0.396,260,2.389,493,4.055,497,5.815,501,5.519,606,4.617,733,2.155,1788,6.787,1789,6.787]],["title/interfaces/Response.html",[212,1.989,221,1.253]],["body/interfaces/Response.html",[0,0.287,3,0.071,4,0.064,5,0.056,8,1.324,10,0.221,11,0.796,18,0.16,19,0.007,21,1.889,34,0.161,36,0.096,50,0.005,51,0.005,64,1.87,154,0.16,194,2.271,212,2.102,214,2.816,217,1.678,219,0.364,221,2.442,222,3.176,223,2.012,260,1.3,272,1.957,275,0.93,279,3.042,280,3.176,282,2.719,283,0.965,285,1.925,287,2.548,291,1.497,293,2.724,297,0.725,325,2.518,352,2.042,416,1.228,418,2.472,419,1.789,472,4.835,479,3.328,488,0.879,505,1.963,521,4.141,523,1.644,549,1.853,556,3.042,582,1.252,663,2.548,706,1.516,736,2.401,737,2.518,745,1.789,769,2.63,791,2.401,957,2.831,963,3.176,1066,6.074,1091,4.482,1093,3.721,1104,3.721,1105,3.721,1147,3.721,1152,3.989,1159,2.156,1163,3.989,1166,3.989,1168,3.989,1169,3.989,1301,6.327,1303,3.721,1307,3.507,1477,6.074,1479,3.721,1482,5.011,1484,5.011,1485,5.011,1487,3.507,1488,3.721,1496,3.507,1790,4.348,1791,6.621,1792,4.348,1793,3.989,1794,4.348,1795,4.348,1796,4.348,1797,3.989,1798,5.372,1799,5.855,1800,3.989,1801,4.348,1802,4.348,1803,5.855,1804,4.348,1805,4.348,1806,3.989,1807,4.348,1808,4.348,1809,4.348,1810,4.348]],["title/modules/ServicesModule.html",[443,1.941,451,3.317]],["body/modules/ServicesModule.html",[0,0.302,3,0.075,4,0.067,5,0.059,19,0.007,34,0.169,36,0.075,41,1.532,50,0.005,51,0.005,95,2.495,127,2.729,154,0.169,219,0.333,275,1.609,297,0.764,316,2.932,350,2.582,443,4.016,445,2.685,446,3.668,451,6.766,452,3.928,453,2.967,454,2.865,456,1.681,457,5.189,458,5.5,476,4.076,488,0.926,560,6.457,564,6.128,572,4.581,585,5.563,646,7.233,1687,6.457,1691,6.128,1693,4.581,1699,4.89,1811,4.581,1812,4.581,1813,6.128,1814,5.156,1815,9.206,1816,5.156,1817,5.156,1818,4.581]],["title/classes/SignInRequest.html",[0,0.271,537,3.774]],["body/classes/SignInRequest.html",[0,0.433,2,0.796,3,0.085,4,0.076,5,0.066,10,0.263,11,0.891,18,0.242,19,0.007,20,0.861,21,1.668,23,0.388,34,0.143,36,0.085,41,2.152,50,0.005,51,0.005,154,0.266,203,4.449,219,0.361,223,1.785,247,1.434,329,3.399,331,4.095,332,1.804,379,1.627,456,1.819,488,1.046,512,4.894,537,6.017,730,2.075,731,2.075,735,2.157,741,2.501,742,1.986,762,2.723,812,2.94,896,5.172,921,4.79,1819,8.106,1820,7.381,1821,5.82,1822,5.82,1823,5.82]],["title/classes/SignInResponse.html",[0,0.271,540,3.774]],["body/classes/SignInResponse.html",[0,0.333,2,0.778,3,0.083,4,0.074,5,0.065,10,0.257,11,0.878,18,0.238,19,0.007,20,0.854,21,1.63,23,0.383,29,0.752,34,0.11,36,0.083,41,1.898,50,0.005,51,0.005,154,0.263,219,0.355,223,1.759,247,1.401,322,3.469,379,1.603,456,1.792,462,4.865,488,1.022,503,6.994,513,5.212,540,6.89,579,7.121,580,6.26,581,2.006,585,6.89,663,4.79,729,2.505,730,2.045,731,2.045,735,2.125,741,2.443,742,1.97,762,2.444,903,5.929,1824,8.019,1825,8.452,1826,7.273,1827,5.687,1828,5.053,1829,7.273,1830,5.053]],["title/controllers/StoragesController.html",[277,2.208,1831,3.774]],["body/controllers/StoragesController.html",[0,0.244,3,0.061,4,0.054,5,0.101,10,0.188,12,0.667,13,1,15,1.624,18,0.244,19,0.007,23,0.219,28,0.558,29,0.43,30,0.908,31,1.425,34,0.18,36,0.061,50,0.004,51,0.004,60,2.877,64,2.614,98,3.52,154,0.267,216,3.392,217,2.347,219,0.288,221,2.441,224,3.045,247,1.026,251,4.087,256,2.313,257,4.223,258,3.677,277,3.549,283,1.468,285,1.323,291,0.836,297,0.617,298,4.804,374,2.168,378,2.701,379,0.918,384,4.008,397,2.831,400,2.831,401,2.532,402,1.555,403,2.251,404,4.481,405,4.804,406,3.393,407,4.804,408,3.698,409,4.008,410,5.06,411,2.831,413,4.008,414,2.042,416,1.045,417,2.614,418,2.103,419,1.522,422,1.788,500,4.008,502,2.356,505,1.24,518,4.223,519,2.701,520,2.983,524,3.824,525,2.983,526,2.983,536,3.453,546,2.587,547,3.663,549,1.923,556,2.587,557,2.983,558,2.983,559,2.412,706,1.29,826,4.871,831,2.983,832,2.701,840,3.698,841,3.698,1241,4.653,1383,4.804,1389,2.103,1392,3.824,1401,2.983,1402,2.983,1436,5.236,1457,3.393,1464,3.698,1466,3.698,1500,4.804,1638,4.481,1639,3.165,1640,3.165,1654,2.701,1668,3.165,1713,2.983,1831,4.804,1832,4.162,1833,6.079,1834,4.162,1835,4.162,1836,4.162,1837,4.162,1838,5.893,1839,4.162,1840,4.162,1841,4.162,1842,4.162,1843,4.162,1844,3.698,1845,4.162,1846,4.162,1847,4.162,1848,4.162,1849,4.162,1850,4.162,1851,4.162,1852,4.162,1853,4.162]],["title/modules/StoragesModule.html",[443,1.941,1813,3.149]],["body/modules/StoragesModule.html",[0,0.356,3,0.088,4,0.079,5,0.087,19,0.007,34,0.176,36,0.088,50,0.006,51,0.006,154,0.199,219,0.37,297,0.9,374,3.947,443,3.629,445,3.16,446,4.074,452,4.362,453,3.493,454,3.373,468,4.918,476,3.626,536,2.817,576,5.431,655,4.349,676,3.493,826,3.626,831,4.349,832,3.938,867,3.626,881,3.373,1234,6.908,1239,6.204,1241,5.155,1245,4.947,1813,6.391,1831,6.736,1854,5.393,1855,5.393,1856,5.393,1857,6.069,1858,6.069,1859,6.069]],["title/injectables/StoragesService.html",[582,0.88,1239,3.004]],["body/injectables/StoragesService.html",[0,0.204,3,0.051,4,0.045,5,0.108,10,0.157,12,0.827,13,0.878,15,2.067,18,0.239,19,0.007,20,0.841,23,0.384,28,0.98,29,0.756,30,1.257,31,1.971,34,0.142,35,1.099,36,0.051,37,1.623,45,1.635,50,0.004,51,0.004,58,1.851,60,3.095,68,2.068,83,3.304,85,2.964,154,0.251,219,0.253,223,1.493,269,1.749,283,1.565,285,0.781,291,1.703,293,3.099,297,0.515,304,2.874,390,2.401,391,4.869,401,2.938,402,1.299,403,2.359,416,1.717,417,2.792,419,1.891,422,2.938,458,3.689,460,2.163,465,5.765,500,3.518,502,3.063,536,4.276,546,4.251,547,4.251,582,0.983,583,1.168,588,1.659,676,2.002,706,2.526,754,2.994,826,4.869,831,2.492,832,2.257,1202,3.676,1203,3.676,1204,3.561,1239,3.356,1241,3.518,1699,4.425,1700,4.695,1705,5.49,1709,3.933,1712,3.933,1713,5.49,1721,3.933,1724,2.644,1833,4.596,1860,3.477,1861,5.172,1862,5.172,1863,5.172,1864,6.838,1865,3.477,1866,5.172,1867,3.477,1868,5.172,1869,3.477,1870,5.172,1871,3.477,1872,5.172,1873,3.477,1874,3.477,1875,3.477,1876,3.477,1877,5.172,1878,3.477,1879,3.477,1880,3.477,1881,3.477,1882,3.477,1883,3.477,1884,3.477,1885,3.477]],["title/classes/SuccessResponse.html",[0,0.271,521,2.573]],["body/classes/SuccessResponse.html",[0,0.231,2,0.54,3,0.058,4,0.051,5,0.045,10,0.178,11,0.877,12,0.447,18,0.27,19,0.007,20,0.809,23,0.434,28,0.529,29,0.687,34,0.11,36,0.058,41,1.274,45,2.432,50,0.004,51,0.004,64,2.939,154,0.27,194,3.571,219,0.277,221,2.457,223,2.196,247,0.973,260,2.243,275,1.078,283,0.779,293,3.361,297,0.585,312,2.438,352,1.223,379,1.696,387,1.616,416,0.991,456,1.398,470,2.074,488,1.019,505,2.739,521,4.587,549,1.868,581,1.832,597,3.669,706,2.251,729,1.739,730,1.595,731,1.595,735,1.658,736,3.775,737,2.939,738,2.904,741,3.306,742,2.081,745,2.929,751,3.782,752,2.955,756,2.838,757,3.782,758,2.784,759,2.784,760,2.784,762,2.691,774,4.306,776,3.153,963,3.682,964,6.421,1032,5.042,1033,4.625,1035,5.042,1038,5.042,1039,5.042,1040,5.042,1041,7.118,1051,3.218,1065,3.507,1517,3.507,1886,8.445,1887,5.674,1888,3.947,1889,3.947,1890,3.947,1891,3.947,1892,3.947,1893,3.947,1894,3.947]],["title/modules/TasksModule.html",[443,1.941,642,3.317]],["body/modules/TasksModule.html",[0,0.395,3,0.098,4,0.088,5,0.077,19,0.007,34,0.157,36,0.098,50,0.006,51,0.006,154,0.221,219,0.395,297,0.999,443,3.762,445,3.511,446,4.344,452,4.652,453,3.88,454,3.746,468,5.245,642,6.676,1895,5.99,1896,5.99,1897,7.084,1898,6.741,1899,7.181,1900,6.741]],["title/injectables/TasksService.html",[582,0.88,1897,3.52]],["body/injectables/TasksService.html",[0,0.362,3,0.09,4,0.08,5,0.071,10,0.279,11,0.926,13,1.301,19,0.007,21,1.772,22,1.468,23,0.403,30,0.953,34,0.149,36,0.09,50,0.006,51,0.006,68,3.332,154,0.203,219,0.375,278,3.992,297,0.916,316,3.294,379,1.363,396,5.04,417,3.328,419,3.046,458,4.58,460,2.685,549,2.155,582,1.457,583,2.077,648,6.249,687,5.04,1496,5.494,1897,5.829,1899,7.741,1901,6.182,1902,8.711,1903,7.666,1904,6.182,1905,8.333,1906,7.666,1907,6.182,1908,6.182,1909,6.182,1910,6.182]],["title/injectables/TimeoutInterceptor.html",[582,0.88,1911,4.114]],["body/injectables/TimeoutInterceptor.html",[0,0.287,3,0.071,4,0.064,5,0.056,8,1.327,10,0.221,12,0.746,13,1.12,18,0.216,19,0.007,23,0.347,28,0.884,29,0.682,30,0.756,34,0.161,36,0.071,50,0.005,51,0.005,154,0.216,219,0.322,222,3.181,223,1.185,260,2.277,261,3.334,272,2.638,275,0.931,279,3.047,280,3.181,282,2.724,283,0.967,285,1.101,287,3.436,291,1.673,297,0.727,352,2.044,386,3.941,416,1.872,418,2.476,419,1.792,472,4.281,479,3.334,549,1.378,582,1.254,583,1.647,663,3.436,745,1.792,756,3.117,791,2.405,957,3.427,1091,5.426,1104,3.727,1105,3.727,1159,2.906,1300,3.995,1301,6.863,1303,5.016,1307,4.728,1308,5.862,1478,3.995,1479,5.016,1481,5.378,1482,6.066,1484,5.67,1485,5.016,1487,3.512,1488,3.727,1496,3.512,1781,5.378,1793,5.378,1800,3.995,1806,3.995,1911,5.862,1912,4.901,1913,6.597,1914,7.977,1915,7.977,1916,6.597,1917,6.597,1918,7.457,1919,4.901,1920,4.901,1921,4.901,1922,6.597,1923,7.457,1924,7.457,1925,4.901,1926,4.901,1927,6.597,1928,5.862,1929,4.901,1930,4.901,1931,4.901]],["title/classes/TimestampResponse.html",[0,0.271,1579,3.149]],["body/classes/TimestampResponse.html",[0,0.335,2,0.781,3,0.083,4,0.074,5,0.065,10,0.258,11,0.88,18,0.239,19,0.007,23,0.383,34,0.111,36,0.083,50,0.005,51,0.005,128,5.034,131,5.034,154,0.263,194,3.929,219,0.356,223,2.293,247,1.407,379,1.607,456,1.796,488,1.026,622,5.262,729,2.515,730,2.05,731,2.05,732,3.296,735,2.13,741,3.133,742,1.972,756,3.597,758,4.153,759,4.153,760,4.153,762,2.699,890,4.872,1067,5.493,1068,5.493,1579,5.757,1932,8.033,1933,5.708,1934,5.708]],["title/interfaces/TokenPayload.html",[212,1.989,1337,3.774]],["body/interfaces/TokenPayload.html",[3,0.101,4,0.09,5,0.079,10,0.314,11,0.993,18,0.269,19,0.007,20,0.948,36,0.101,50,0.006,51,0.006,154,0.228,203,4.323,212,3.535,214,3.998,219,0.339,223,1.68,503,5.281,504,5.281,619,8.053,1337,6.706,1935,6.946,1936,6.946]],["title/classes/TooManyRequestsErrorResponse.html",[0,0.271,1937,4.114]],["body/classes/TooManyRequestsErrorResponse.html",[0,0.275,2,0.642,3,0.068,4,0.061,5,0.054,10,0.212,11,0.774,18,0.284,19,0.007,20,0.792,23,0.456,34,0.152,36,0.068,50,0.005,51,0.005,64,2.447,154,0.239,194,2.973,217,3.241,219,0.313,221,1.974,223,1.549,247,1.156,260,1.701,263,5.545,264,5.545,275,1.217,293,2.342,297,0.696,312,2.016,316,3.367,350,1.345,379,1.91,456,1.578,470,2.342,488,0.843,505,2.335,523,1.577,581,1.767,597,2.371,729,2.068,730,2.203,731,1.801,732,2.896,733,2.081,734,3.955,735,1.872,736,4.024,737,3.134,738,3.527,739,3.297,740,3.133,741,3.723,742,2.084,743,4.658,744,2.917,745,2.666,746,2.917,747,2.068,748,2.917,749,2.523,750,2.917,751,2.444,752,2.444,753,2.917,754,1.834,755,2.917,756,1.834,757,2.444,758,2.303,759,2.303,760,2.303,761,2.917,762,2.45,763,2.068,764,2.068,1937,5.692,1938,4.693,1939,6.406,1940,4.17,1941,4.17]],["title/classes/TooManyRequestsException.html",[0,0.271,1942,4.114]],["body/classes/TooManyRequestsException.html",[0,0.267,2,0.622,3,0.066,4,0.059,5,0.052,11,0.757,12,0.515,18,0.235,19,0.007,20,0.885,21,2.509,22,1.489,23,0.239,28,0.61,29,0.47,34,0.15,36,0.066,50,0.005,51,0.005,67,2.508,119,2.057,154,0.205,217,2.783,219,0.378,221,2.326,263,5.881,264,4.768,275,1.364,283,0.897,285,1.408,297,0.674,352,1.943,387,1.862,414,3.077,416,1.142,456,1.545,470,3.142,488,0.817,505,2.138,523,1.529,549,2.174,559,2.937,733,1.665,734,3.963,737,2.955,738,2.508,739,3.244,740,3.083,742,1.461,745,2.293,747,3.407,763,2.004,764,2.004,769,4.157,770,3.746,771,3.746,772,4.13,773,3.746,774,3.857,776,3.485,779,3.746,780,4.62,781,4.157,782,3.746,784,4.66,785,5.01,786,3.893,788,2.763,789,3.609,790,3.746,791,2.232,792,2.619,793,2.718,794,2.718,795,2.718,796,2.718,797,2.718,798,2.718,799,2.718,1162,6.872,1940,4.043,1941,6.376,1942,7.452,1943,6.271,1944,4.55,1945,4.55,1946,4.55,1947,6.271]],["title/entities/Topic.html",[127,1.851,269,1.184]],["body/entities/Topic.html",[0,0.316,3,0.079,4,0.07,5,0.062,10,0.244,11,0.849,12,1.015,18,0.256,19,0.007,20,0.837,23,0.411,34,0.152,35,1.707,36,0.079,49,3.264,50,0.005,51,0.005,60,3.015,75,2.506,95,3.281,127,3.826,128,4.048,131,4.048,154,0.177,219,0.344,269,2.254,379,1.724,456,1.733,488,0.97,706,2.179,733,1.434,735,2.055,756,3.239,890,4.048,955,4.564,956,4.564,957,3.022,1007,3.503,1062,4.564,1067,4.564,1068,4.564,1278,5.824,1369,5.348,1379,4.105,1382,3.869,1535,6.249,1537,4.797,1542,6.249,1948,5.398,1949,5.398,1950,4.797,1951,5.398,1952,5.398,1953,5.398]],["title/injectables/TopicByIdHook.html",[582,0.88,1954,4.114]],["body/injectables/TopicByIdHook.html",[0,0.29,3,0.072,4,0.064,5,0.057,8,1.34,10,0.224,12,0.751,13,1.127,15,1.779,18,0.218,19,0.007,23,0.349,28,0.89,29,0.687,30,1.024,31,1.606,34,0.162,36,0.072,37,1.175,50,0.005,51,0.005,68,2.656,127,3.513,154,0.218,219,0.324,260,2.218,273,3.168,275,1.522,283,1.478,291,0.995,297,0.734,352,2.058,390,3.083,391,3.967,401,3.441,402,1.85,403,2.863,416,2.011,417,3.191,419,2.428,421,2.501,422,2.127,460,2.326,488,0.889,489,5.05,581,2.067,582,1.262,583,1.663,588,2.361,662,3.077,673,4.759,700,2.849,786,2.298,879,3.077,1127,5.05,1222,2.853,1258,5.139,1260,3.355,1263,3.367,1419,4.99,1547,4.035,1548,6.549,1549,6.539,1550,5.414,1551,4.31,1552,4.759,1553,4.31,1554,4.035,1555,4.035,1556,4.035,1557,5.414,1558,4.035,1559,4.035,1954,7.117,1955,7.494,1956,4.95,1957,4.95,1958,4.95]],["title/injectables/TopicByIdPipe.html",[582,0.88,1959,3.317]],["body/injectables/TopicByIdPipe.html",[0,0.447,3,0.064,4,0.057,5,0.05,8,1.191,10,0.199,12,0.693,13,1.04,15,1.674,18,0.201,19,0.007,20,0.891,22,2.121,23,0.322,28,0.822,29,0.634,30,0.679,31,1.844,34,0.165,36,0.064,37,1.045,45,1.392,50,0.005,51,0.005,68,2.451,127,3.61,154,0.201,258,2.366,269,1.95,275,1.165,278,3.971,283,1.209,285,0.988,287,3.672,291,1.417,297,0.652,325,3.171,332,1.364,350,1.757,352,1.899,353,2.342,401,3.276,402,1.645,403,2.694,416,1.914,417,3.063,419,2.241,421,2.224,422,1.891,460,2.147,488,0.791,502,1.76,505,1.826,549,1.723,559,3.398,582,1.165,583,1.479,588,2.1,827,2.292,879,2.736,957,1.891,1150,3.978,1159,2.7,1222,3.276,1246,2.736,1247,2.736,1258,4.999,1260,3.096,1263,2.994,1313,2.736,1314,2.736,1315,2.63,1316,2.736,1317,2.736,1318,2.736,1385,3.347,1386,4.392,1387,4.169,1388,5.464,1389,4.302,1390,4.74,1391,5.186,1392,4.948,1393,4.66,1394,3.154,1396,4.392,1397,5.464,1399,4.66,1400,4.392,1401,3.154,1402,3.154,1403,3.154,1404,2.994,1405,3.154,1406,2.857,1408,3.347,1565,3.588,1566,3.588,1959,4.392,1960,7.051,1961,4.402,1962,4.402,1963,4.402]],["title/classes/TopicIdParam.html",[0,0.271,1964,3.317]],["body/classes/TopicIdParam.html",[0,0.452,2,0.853,3,0.091,4,0.081,5,0.071,10,0.282,11,0.931,18,0.204,19,0.007,20,0.778,23,0.328,34,0.169,36,0.091,50,0.006,51,0.006,60,3.016,127,3.59,154,0.252,219,0.376,247,1.536,260,2.046,329,3.231,332,1.932,379,1.374,581,1.72,730,2.167,731,2.167,742,1.796,762,2.589,786,3.577,827,3.246,837,4.467,863,4.24,864,4.467,865,5.859,867,3.724,872,5.082,881,3.464,1222,3.311,1389,3.893,1412,5.082,1414,5.522,1964,5.522,1965,7.706,1966,6.234,1967,5.539]],["title/classes/TopicResponse.html",[0,0.271,1580,3.52]],["body/classes/TopicResponse.html",[0,0.346,2,0.809,3,0.086,4,0.077,5,0.068,10,0.267,11,0.9,12,1.058,18,0.194,19,0.007,20,0.753,23,0.311,34,0.166,36,0.086,50,0.006,51,0.006,127,3.706,154,0.244,219,0.364,223,1.803,247,1.457,275,1.417,379,1.303,456,1.837,488,1.062,523,1.986,581,1.631,729,2.605,730,2.411,731,2.096,732,3.37,733,1.57,735,2.178,741,2.54,742,1.737,762,2.505,863,4.021,864,4.237,883,5.254,1578,4.143,1579,5.832,1580,6.519,1581,4.143,1582,4.496,1830,5.254,1964,6.144,1968,7.455,1969,5.254,1970,3.403]],["title/classes/TopicSeeder.html",[0,0.271,1971,4.114]],["body/classes/TopicSeeder.html",[0,0.368,2,0.858,3,0.091,4,0.081,5,0.072,8,2.094,10,0.283,12,0.71,13,1.313,15,1.991,18,0.205,19,0.007,21,1.798,23,0.33,28,0.841,29,0.649,30,0.967,31,1.871,34,0.17,35,2.445,36,0.091,37,1.489,50,0.006,51,0.006,127,3.354,154,0.205,219,0.378,269,1.979,275,1.192,863,4.267,990,4.071,1022,5.574,1418,6.445,1419,4.621,1420,5.543,1421,6.563,1425,4.495,1426,4.495,1429,4.495,1430,4.495,1971,6.874,1972,6.273,1973,6.273,1974,6.273,1975,6.273,1976,6.273]],["title/controllers/TopicsController.html",[277,2.208,1977,3.774]],["body/controllers/TopicsController.html",[0,0.131,3,0.032,4,0.029,5,0.025,10,0.101,12,0.759,13,0.619,15,1.939,18,0.176,19,0.007,23,0.311,28,0.718,29,0.554,30,1.149,31,1.803,34,0.171,36,0.032,37,1.272,50,0.003,51,0.003,58,1.918,60,2.997,64,0.851,68,1.459,83,2.423,85,2.21,95,1.334,127,3.813,154,0.267,216,2.1,217,2.721,219,0.178,221,2.459,223,1.919,224,3.052,247,0.549,248,2.775,250,1.446,251,4.329,252,4.83,253,1.446,256,1.238,257,3.841,258,1.197,265,4.552,266,1.282,267,3.841,268,1.385,269,0.57,277,2.556,283,1.381,291,1.188,293,2.85,297,0.33,302,2.615,304,3.727,306,3.838,307,1.385,309,3.153,311,1.385,374,1.16,378,1.446,379,1.304,384,5.072,389,3.645,400,1.515,401,1.568,402,0.832,403,1.394,409,4.32,410,5.072,411,1.515,412,2.615,413,4.32,414,1.093,416,0.916,417,1.771,419,1.334,422,2.541,460,0.78,502,2.54,505,2.462,516,4.83,518,2.615,519,1.446,520,4.238,521,3.53,522,1.694,523,1.226,524,3.838,525,1.596,526,1.596,539,1.962,546,3.676,547,4.505,549,2.096,556,3.332,557,3.841,558,3.841,559,2.421,581,2.15,663,1.16,706,0.69,730,1.507,731,1.507,767,2.615,781,2.492,875,5.099,879,1.385,1230,3.332,1258,3.085,1260,3.938,1263,1.515,1389,1.125,1553,1.446,1580,4.075,1621,4.369,1624,5.706,1637,1.816,1638,4.075,1639,1.694,1640,1.694,1641,1.816,1642,1.816,1643,1.816,1646,1.979,1647,1.979,1654,1.446,1666,1.816,1668,3.525,1670,1.816,1674,1.816,1677,1.816,1959,3.841,1977,2.975,1978,2.227,1979,4.635,1980,4.635,1981,5.359,1982,4.635,1983,4.635,1984,2.227,1985,2.227,1986,3.649,1987,2.227,1988,2.227,1989,2.227,1990,4.635,1991,4.635,1992,2.227,1993,2.227,1994,2.227,1995,2.227,1996,2.227,1997,2.227,1998,2.227,1999,5.706,2000,2.227,2001,2.227,2002,2.227,2003,1.979,2004,1.979,2005,1.979,2006,2.227,2007,2.227,2008,2.227,2009,2.227,2010,2.227,2011,2.227,2012,2.227,2013,2.227,2014,2.227,2015,2.227,2016,2.227,2017,2.227,2018,2.227,2019,2.227,2020,2.227,2021,2.227,2022,2.227,2023,2.227,2024,2.227]],["title/modules/TopicsModule.html",[443,1.941,1691,3.149]],["body/modules/TopicsModule.html",[0,0.325,3,0.081,4,0.072,5,0.063,12,0.628,19,0.007,34,0.181,36,0.081,50,0.005,51,0.005,127,2.863,154,0.182,219,0.35,297,0.823,374,3.728,443,3.511,445,2.89,446,3.849,452,4.121,453,3.194,454,3.084,468,4.646,476,3.315,576,5.131,655,3.977,661,4.219,662,3.45,676,3.194,700,3.194,867,3.315,879,3.45,881,3.979,882,3.977,1254,6.75,1258,5.436,1260,3.617,1263,3.774,1283,6.75,1551,3.601,1654,3.601,1691,6.455,1697,4.524,1959,6.361,1977,6.462,2004,4.931,2005,4.931,2025,4.931,2026,4.931,2027,4.931,2028,5.549,2029,7.159,2030,5.549,2031,5.549]],["title/injectables/TopicsService.html",[582,0.88,1258,2.665]],["body/injectables/TopicsService.html",[0,0.176,3,0.044,4,0.039,5,0.034,10,0.136,12,0.977,13,0.787,15,2.154,18,0.247,19,0.007,20,0.881,23,0.41,28,1.012,29,0.781,30,1.331,31,2.089,34,0.133,35,0.952,36,0.044,37,1.793,45,2.008,50,0.003,51,0.003,58,2.273,60,3.033,68,1.854,83,3.414,85,3.106,127,3.81,154,0.255,219,0.227,223,1.368,269,1.625,283,1.578,285,0.676,291,1.717,293,2.986,297,0.446,304,2.577,350,1.329,390,2.949,391,4.879,401,2.73,402,1.125,403,2.161,416,1.595,417,2.621,419,1.695,421,3.815,422,3.244,458,3.379,460,1.981,465,5.555,500,4.93,502,3.266,582,0.881,583,1.011,588,1.436,676,1.733,706,2.416,754,2.832,847,5.511,879,1.871,1202,3.415,1203,3.415,1204,3.309,1258,2.669,1260,4.126,1699,4.053,1700,4.3,1701,5.179,1702,3.78,1705,5.194,1709,3.526,1710,3.78,1712,3.526,1713,5.587,1716,4.831,1717,3.78,1719,3.78,1721,3.526,1724,2.289,2032,3.01,2033,4.637,2034,4.637,2035,6.353,2036,3.01,2037,4.637,2038,3.01,2039,3.01,2040,3.01,2041,3.01,2042,4.637,2043,3.01,2044,4.637,2045,3.01,2046,3.01,2047,3.01,2048,3.01,2049,3.01,2050,4.637,2051,3.01,2052,3.01,2053,3.01,2054,4.637,2055,3.01,2056,3.01,2057,3.01,2058,4.637,2059,3.01,2060,3.01,2061,3.01,2062,3.01,2063,3.01]],["title/injectables/TransformInterceptor.html",[582,0.88,1797,3.774]],["body/injectables/TransformInterceptor.html",[0,0.261,3,0.065,4,0.058,5,0.051,8,1.207,10,0.202,12,0.7,13,1.05,18,0.203,19,0.007,21,1.279,23,0.325,28,0.829,29,0.64,30,0.688,34,0.156,36,0.09,50,0.005,51,0.005,64,1.704,154,0.203,194,2.071,212,1.917,217,2.122,219,0.347,221,2.449,222,2.895,223,1.496,260,1.185,272,2.474,275,0.848,279,2.773,280,2.895,282,3.438,283,0.88,285,1.872,287,3.222,291,1.427,293,2.804,297,0.661,325,2.93,352,2.377,416,1.783,418,2.254,419,1.631,472,5.409,479,3.034,488,0.802,505,1.843,521,4.262,523,1.499,549,1.739,556,3.846,582,1.176,583,1.499,663,3.222,706,1.383,736,2.189,737,2.364,745,1.631,769,3.325,791,2.189,957,3.295,963,4.015,1066,3.637,1091,5.216,1093,3.392,1104,3.392,1105,3.392,1147,4.704,1152,5.043,1159,2.725,1163,3.637,1166,3.637,1168,3.637,1169,3.637,1300,3.637,1301,6.727,1303,4.704,1307,4.433,1477,6.795,1478,3.637,1479,5.4,1481,3.637,1482,5.831,1484,5.4,1485,4.704,1487,3.197,1488,3.392,1496,3.197,1790,3.964,1791,6.31,1792,3.964,1793,5.043,1794,5.497,1795,5.497,1796,5.497,1797,5.043,1798,5.043,1799,5.497,1800,3.637,1801,3.964,1802,3.964,1803,5.497,1804,3.964,1805,3.964,1806,3.637,1807,3.964,1808,3.964,1809,3.964,1810,3.964,2064,4.461,2065,4.461]],["title/classes/UnauthorizedErrorResponse.html",[0,0.271,2066,4.114]],["body/classes/UnauthorizedErrorResponse.html",[0,0.277,2,0.646,3,0.069,4,0.061,5,0.054,10,0.213,11,0.777,18,0.284,19,0.007,20,0.794,23,0.456,34,0.152,36,0.069,50,0.005,51,0.005,64,2.458,154,0.24,194,2.986,217,3.243,219,0.314,221,1.98,223,1.556,247,1.164,260,1.709,266,3.703,275,1.223,293,2.352,297,0.7,312,2.029,316,3.375,350,1.354,379,1.913,456,1.585,470,2.352,488,0.848,505,2.341,523,1.587,581,1.775,597,2.386,729,2.081,730,2.209,731,1.809,732,2.908,733,2.086,734,3.959,735,1.88,736,4.033,737,3.14,738,3.532,739,3.308,740,3.144,741,3.729,742,2.087,743,4.665,744,2.936,745,2.675,746,2.936,747,2.081,748,2.936,749,2.539,750,2.936,751,2.459,752,2.459,753,2.936,754,1.846,755,2.936,756,1.846,757,2.459,758,2.317,759,2.317,760,2.317,761,2.936,762,2.458,763,2.081,764,2.081,2066,6.981,2067,4.723,2068,4.196,2069,4.196]],["title/classes/UnauthorizedException.html",[0,0.271,1310,3.52]],["body/classes/UnauthorizedException.html",[0,0.269,2,0.628,3,0.067,4,0.06,5,0.052,11,0.762,12,0.52,18,0.236,19,0.007,20,0.886,21,2.515,22,1.498,23,0.242,28,0.616,29,0.475,34,0.15,36,0.067,50,0.005,51,0.005,67,2.523,119,2.076,154,0.207,217,2.792,219,0.379,221,2.331,266,3.632,275,1.37,283,0.906,285,1.417,297,0.681,352,1.956,387,1.88,414,3.096,416,1.153,456,1.555,470,3.149,488,0.825,505,2.148,523,1.543,549,2.183,559,2.952,733,1.676,734,3.969,737,2.966,738,2.523,739,3.26,740,3.098,742,1.471,745,2.307,747,3.421,763,2.023,764,2.023,769,4.174,770,3.77,771,3.77,772,4.15,773,3.77,774,3.876,776,3.507,779,3.77,780,4.638,781,4.174,782,3.77,784,4.674,785,5.024,786,3.903,788,2.78,789,3.632,790,3.77,791,2.253,792,2.643,793,2.743,794,2.743,795,2.743,796,2.743,797,2.743,798,2.743,799,2.743,1310,6.394,2068,4.08,2069,6.407,2070,4.592,2071,4.592,2072,4.592,2073,6.311,2074,7.764]],["title/classes/UnprocessableEntityErrorResponse.html",[0,0.271,2075,4.114]],["body/classes/UnprocessableEntityErrorResponse.html",[0,0.275,2,0.643,3,0.068,4,0.061,5,0.054,10,0.212,11,0.774,18,0.284,19,0.007,20,0.792,23,0.456,34,0.152,36,0.068,50,0.005,51,0.005,64,2.45,154,0.239,194,2.977,217,3.241,219,0.313,221,1.975,223,1.551,247,1.158,260,1.703,268,3.986,269,1.867,275,1.219,293,2.344,297,0.697,312,2.02,316,3.369,350,1.347,379,1.911,456,1.58,470,2.344,488,0.844,505,2.336,523,1.579,581,1.769,597,2.375,729,2.071,730,2.204,731,1.803,732,2.899,733,2.082,734,3.956,735,1.874,736,4.026,737,3.135,738,3.528,739,3.299,740,3.136,741,3.724,742,2.085,743,4.659,744,2.922,745,2.668,746,2.922,747,2.071,748,2.922,749,2.527,750,2.922,751,2.448,752,2.448,753,2.922,754,1.837,755,2.922,756,1.837,757,2.448,758,2.306,759,2.306,760,2.306,761,2.922,762,2.452,763,2.071,764,2.071,2075,6.967,2076,4.7,2077,4.177,2078,4.177]],["title/classes/UnprocessableEntityException.html",[0,0.271,1390,2.878]],["body/classes/UnprocessableEntityException.html",[0,0.33,2,0.535,3,0.057,4,0.051,5,0.045,11,0.681,12,0.443,18,0.216,19,0.007,20,0.851,21,2.414,22,1.569,23,0.206,28,0.524,29,0.404,30,0.603,34,0.155,36,0.057,50,0.004,51,0.004,67,2.254,119,1.768,154,0.185,217,3.085,219,0.39,221,2.323,268,3.504,269,1.442,275,1.256,283,1.304,284,2.66,285,1.484,291,0.786,297,0.58,332,1.212,352,1.747,355,3.448,387,2.307,414,4.328,416,1.415,434,1.68,456,1.389,470,3.009,488,0.703,505,1.969,523,1.314,549,2.033,559,2.705,733,1.497,734,3.895,737,2.763,738,2.254,739,2.987,740,2.839,742,1.313,745,2.061,747,3.186,749,3.03,763,1.723,764,1.723,769,3.888,770,3.367,771,3.367,772,3.804,773,2.336,774,3.552,776,3.132,779,4.32,780,4.32,781,3.888,782,3.367,784,4.438,785,4.771,786,3.707,788,3.186,789,4.163,790,3.367,791,1.919,792,2.251,793,2.336,794,2.336,795,2.336,796,2.336,797,2.336,798,2.336,799,2.336,1048,3.475,1049,3.475,1093,2.974,1132,3.475,1210,3.244,1390,4.964,1716,5.025,2077,3.475,2078,5.872,2079,5.636,2080,3.911,2081,7.666,2082,3.911,2083,3.911,2084,5.636,2085,7.232,2086,3.911,2087,5.636,2088,3.911,2089,3.911,2090,3.911,2091,3.911,2092,3.911,2093,3.911,2094,3.911,2095,3.911,2096,3.911]],["title/classes/UpdatePostRequest.html",[0,0.271,1629,3.774]],["body/classes/UpdatePostRequest.html",[0,0.329,2,0.768,3,0.082,4,0.073,5,0.064,10,0.253,12,0.635,13,1.224,18,0.184,19,0.007,23,0.295,28,0.752,29,0.58,30,1.112,34,0.163,36,0.082,50,0.005,51,0.005,58,2.008,85,2.695,95,3.415,154,0.236,219,0.352,223,1.744,247,1.383,260,2.234,269,2.151,275,1.371,283,1.107,285,1.26,291,1.128,325,3.213,350,2.067,488,1.008,539,3.017,549,1.578,730,2.579,731,2.028,733,1.49,735,2.107,812,2.835,815,4.587,816,4.151,819,4.021,844,5.711,846,5.42,856,4.308,868,3.642,874,4.987,1570,6.395,1578,4.008,1581,4.008,1584,4.987,1585,4.987,1629,7.092,2097,6.408,2098,6.408,2099,4.987,2100,5.612]],["title/classes/UpdatePostTopicsRequest.html",[0,0.271,1633,3.774]],["body/classes/UpdatePostTopicsRequest.html",[0,0.374,2,0.873,3,0.093,4,0.083,5,0.073,19,0.007,34,0.164,36,0.093,50,0.006,51,0.006,58,2.283,85,2.921,95,3.22,154,0.209,219,0.382,223,1.89,247,1.572,275,1.486,285,1.433,488,1.146,539,3.43,730,2.476,731,2.198,733,1.695,735,2.284,812,3.223,844,6.056,846,5.748,1260,4.269,1578,4.344,1581,4.344,1633,6.372,1964,6.312,1970,3.673,2097,5.67,2101,6.372,2102,5.201,2103,6.381,2104,6.381]],["title/classes/UpdateTopicRequest.html",[0,0.271,1999,3.774]],["body/classes/UpdateTopicRequest.html",[0,0.335,2,0.781,3,0.083,4,0.074,5,0.065,10,0.258,12,0.646,13,1.238,18,0.187,19,0.007,23,0.3,28,0.765,29,0.59,30,1.124,34,0.164,36,0.083,50,0.005,51,0.005,58,2.043,85,2.724,127,3.746,154,0.239,219,0.356,223,1.763,247,1.407,260,2.248,269,2.165,275,1.386,283,1.126,291,1.147,325,3.234,350,2.09,488,1.026,539,3.069,549,1.605,730,2.588,731,2.05,733,1.516,812,2.884,815,4.624,816,4.197,819,4.091,856,4.356,875,6.436,879,3.549,884,5.072,1578,4.052,1581,4.052,1964,6.065,1969,5.072,1970,3.286,1999,7.129,2105,7.291]],["title/classes/UpdateUserPasswordRequest.html",[0,0.271,2106,3.774]],["body/classes/UpdateUserPasswordRequest.html",[0,0.374,2,0.873,3,0.093,4,0.083,5,0.073,19,0.007,34,0.164,36,0.093,41,1.978,50,0.006,51,0.006,58,2.283,85,2.921,154,0.209,219,0.382,223,1.89,247,1.572,275,1.486,285,1.433,488,1.146,512,4.789,539,3.43,730,2.476,731,2.198,733,1.695,735,2.284,812,3.223,921,5.484,1578,4.344,1581,4.344,1970,3.673,2101,6.372,2102,5.201,2106,6.372,2107,5.201,2108,5.262,2109,4.141,2110,5.67]],["title/classes/UpdateUserProfileAvatarRequest.html",[0,0.271,2111,3.774]],["body/classes/UpdateUserProfileAvatarRequest.html",[0,0.335,2,0.781,3,0.083,4,0.074,5,0.065,10,0.258,11,0.88,18,0.263,19,0.007,20,0.812,23,0.383,34,0.141,36,0.083,41,2.087,50,0.005,51,0.005,60,2.699,85,2.724,154,0.263,219,0.356,223,1.763,247,1.407,275,1.085,379,1.607,456,1.796,488,1.026,581,1.575,730,2.38,731,2.05,733,2.248,735,2.13,742,1.33,743,3.069,762,2.45,812,2.884,824,5.944,886,5.944,888,4.793,1200,4.197,1389,2.884,1414,5.757,1970,3.286,2108,5.343,2109,3.705,2111,5.944,2112,5.944,2113,6.826,2114,5.708,2115,7.291,2116,5.708,2117,5.072,2118,5.708]],["title/classes/UpdateUserProfileRequest.html",[0,0.271,2119,3.774]],["body/classes/UpdateUserProfileRequest.html",[0,0.329,2,0.769,3,0.082,4,0.073,5,0.064,10,0.254,12,0.636,13,1.226,18,0.184,19,0.007,23,0.296,28,0.754,29,0.581,30,1.113,34,0.163,36,0.082,41,1.955,50,0.005,51,0.005,58,2.012,85,2.698,154,0.237,219,0.353,223,1.746,247,1.385,260,2.235,269,2.153,275,1.372,283,1.109,291,1.13,325,3.216,350,2.069,488,1.01,539,3.022,549,1.581,730,2.58,731,2.03,733,1.493,812,2.84,815,4.591,816,4.156,819,4.029,856,4.313,885,6.4,886,5.886,888,4.533,902,5.2,910,4.029,911,3.649,920,4.996,1578,4.013,1581,4.013,1970,3.236,2108,5.028,2109,3.649,2112,5.886,2119,7.096]],["title/classes/UpdateUserRequest.html",[0,0.271,2120,3.774]],["body/classes/UpdateUserRequest.html",[0,0.363,2,0.611,3,0.065,4,0.058,5,0.051,10,0.202,11,0.748,12,0.506,13,1.051,18,0.251,19,0.007,20,0.842,23,0.404,28,0.599,29,0.462,30,0.955,34,0.172,36,0.065,41,2.125,50,0.005,51,0.005,58,1.599,75,2.074,85,2.314,114,2.483,154,0.264,155,4.8,156,4.8,203,3.978,219,0.303,223,1.498,247,1.101,260,2.038,269,1.963,275,1.177,283,0.881,285,1.003,291,0.898,322,3.39,325,2.932,329,3.218,331,3.877,332,1.919,350,1.775,379,1.567,488,0.803,512,3.701,539,2.402,549,1.256,581,1.961,730,2.451,731,1.741,733,1.187,735,1.81,742,1.943,762,2.578,812,2.257,815,4.091,816,3.564,848,3.642,856,3.7,860,3.397,869,3.642,881,3.95,882,4.438,888,3.701,900,3.642,921,4.612,936,5.503,937,3.97,939,3.039,940,3.202,941,2.483,944,3.397,945,3.397,946,3.397,947,3.97,948,3.642,949,3.642,950,3.97,951,3.642,1226,3.97,1272,3.97,1292,3.97,1578,3.442,1581,3.442,1970,2.572,2098,5.503,2099,3.97,2107,6.57,2108,4.585,2109,2.899,2120,6.57,2121,4.468,2122,4.468,2123,4.468,2124,4.468,2125,4.468,2126,4.468,2127,4.468,2128,3.97]],["title/classes/UpdateUserRolesRequest.html",[0,0.271,2129,3.774]],["body/classes/UpdateUserRolesRequest.html",[0,0.326,2,0.762,3,0.081,4,0.072,5,0.064,10,0.252,12,0.63,13,1.218,18,0.182,19,0.007,23,0.293,28,0.747,29,0.576,30,1.106,34,0.163,36,0.081,41,2.095,50,0.005,51,0.005,58,1.993,85,2.682,114,5.024,154,0.235,219,0.351,223,1.736,247,1.372,260,2.227,269,2.145,275,1.364,283,1.099,285,1.251,291,1.119,325,3.204,350,2.057,488,1.001,539,2.994,549,1.566,730,2.575,731,2.018,733,1.479,735,2.097,812,2.814,815,4.57,816,4.131,819,3.991,856,4.288,921,5.153,941,3.095,1578,3.988,1581,3.988,1970,3.206,2101,5.85,2102,4.54,2107,5.85,2108,5.01,2109,3.615,2110,4.949,2128,4.949,2129,7.075]],["title/entities/User.html",[41,1.04,269,1.184]],["body/entities/User.html",[0,0.341,3,0.059,4,0.053,5,0.047,10,0.184,11,0.702,18,0.279,19,0.007,20,0.888,23,0.448,29,0.601,34,0.151,35,1.291,36,0.059,39,2.003,40,1.895,41,2.152,42,1.947,45,2.14,49,3.869,50,0.004,51,0.004,60,2.801,67,2.324,75,3.142,114,4.632,116,3.23,128,3.345,129,2.925,131,3.345,154,0.134,155,4.798,156,4.798,165,5.805,187,2.538,203,3.976,219,0.284,269,2.072,326,2.269,379,1.878,456,1.432,488,0.733,512,4.341,513,4.165,581,1.603,622,3.613,706,2.725,733,1.084,735,1.698,756,3.166,860,3.104,888,4.515,890,4.245,902,4.656,911,2.649,930,5.927,942,3.328,943,3.328,955,3.772,956,3.772,957,2.497,1007,2.649,1010,3.627,1062,3.772,1067,3.772,1068,3.772,1369,4.42,1379,3.104,1382,2.925,1950,6.014,2130,4.082,2131,4.082,2132,4.082,2133,5.812,2134,5.165,2135,4.082,2136,4.082,2137,4.082,2138,4.082,2139,3.627,2140,5.812,2141,4.082,2142,5.812,2143,4.082,2144,4.082,2145,5.812,2146,5.165,2147,4.082,2148,3.627,2149,4.082,2150,4.082,2151,3.627,2152,4.082,2153,4.082]],["title/injectables/UserByIdHook.html",[582,0.88,2154,3.774]],["body/injectables/UserByIdHook.html",[0,0.29,3,0.072,4,0.064,5,0.057,8,1.34,10,0.224,12,0.751,13,1.127,15,1.779,18,0.218,19,0.007,23,0.349,28,0.89,29,0.687,30,1.024,31,1.606,34,0.162,36,0.072,37,1.175,41,1.973,50,0.005,51,0.005,68,2.656,154,0.218,219,0.324,260,2.218,273,3.168,275,1.522,283,1.478,291,0.995,297,0.734,352,2.058,390,3.083,391,3.967,401,3.441,402,1.85,403,2.863,416,2.011,417,3.191,419,2.428,421,2.501,422,2.127,460,2.326,488,0.889,489,5.05,581,2.067,582,1.262,583,1.663,588,2.361,589,4.65,593,3.57,662,3.077,673,4.759,700,2.849,786,2.298,941,2.751,1127,5.05,1209,3.077,1222,2.853,1419,4.99,1547,4.035,1548,6.549,1549,6.539,1550,5.414,1551,4.31,1552,4.759,1553,4.31,1554,4.035,1555,4.035,1556,4.035,1557,5.414,1558,4.035,1559,4.035,2154,6.529,2155,7.494,2156,4.95,2157,4.95,2158,4.95]],["title/injectables/UserByIdPipe.html",[582,0.88,2159,3.317]],["body/injectables/UserByIdPipe.html",[0,0.447,3,0.064,4,0.057,5,0.05,8,1.191,10,0.199,12,0.693,13,1.04,15,1.674,18,0.201,19,0.007,20,0.891,22,2.121,23,0.322,28,0.822,29,0.634,30,0.679,31,1.844,34,0.165,36,0.064,37,1.045,41,2.027,45,1.392,50,0.005,51,0.005,68,2.451,154,0.201,258,2.366,269,1.95,275,1.165,278,3.971,283,1.209,285,0.988,287,3.672,291,1.417,297,0.652,325,3.171,332,1.364,350,1.757,352,1.899,353,2.342,401,3.276,402,1.645,403,2.694,416,1.914,417,3.063,419,2.241,421,2.224,422,1.891,460,2.147,488,0.791,502,1.76,505,1.826,549,1.723,559,3.398,582,1.165,583,1.479,588,2.1,589,4.523,593,3.295,827,2.292,941,2.446,957,1.891,1150,3.978,1159,2.7,1209,2.736,1222,3.276,1246,2.736,1247,2.736,1313,2.736,1314,2.736,1315,2.63,1316,2.736,1317,2.736,1318,2.736,1385,3.347,1386,4.392,1387,4.169,1388,5.464,1389,4.302,1390,4.74,1391,5.186,1392,4.948,1393,4.66,1394,3.154,1396,4.392,1397,5.464,1399,4.66,1400,4.392,1401,3.154,1402,3.154,1403,3.154,1404,2.994,1405,3.154,1406,2.857,1408,3.347,1565,3.588,1566,3.588,2159,4.392,2160,7.051,2161,4.402,2162,4.402,2163,4.402]],["title/classes/UserIdParam.html",[0,0.271,2108,2.766]],["body/classes/UserIdParam.html",[0,0.452,2,0.853,3,0.091,4,0.081,5,0.071,10,0.282,11,0.931,18,0.204,19,0.007,20,0.778,23,0.328,34,0.169,36,0.091,41,2.016,50,0.006,51,0.006,60,3.016,154,0.252,219,0.376,247,1.536,260,2.046,329,3.231,332,1.932,379,1.374,581,1.72,730,2.167,731,2.167,742,1.796,762,2.589,786,3.577,827,3.246,837,4.467,867,3.724,881,3.464,939,4.24,940,4.467,1222,3.311,1287,6.282,1389,3.893,1412,5.082,1414,5.522,1586,5.539,1967,5.539,2108,4.603,2117,5.539,2164,7.706]],["title/entities/UserProfile.html",[269,1.184,902,2.766]],["body/entities/UserProfile.html",[0,0.204,3,0.051,4,0.045,5,0.084,10,0.157,11,0.625,12,0.898,18,0.278,19,0.007,20,0.897,23,0.446,29,0.877,34,0.133,35,1.101,36,0.051,41,2.167,43,5.687,45,2.509,46,5.687,49,3.684,50,0.004,51,0.004,60,2.957,74,4.745,116,1.935,128,2.979,131,2.979,148,6.034,149,5.687,150,5.687,151,6.034,154,0.114,187,3.218,219,0.253,269,1.96,379,1.869,456,1.275,488,0.626,581,2.339,622,3.218,706,2.527,733,0.925,735,1.513,756,2.674,826,4.087,832,2.259,888,4.941,889,4.22,890,3.938,902,3.092,955,4.01,956,4.01,957,2.655,1007,2.259,1062,3.359,1067,3.359,1068,3.359,1374,5.577,1377,4.22,1380,5.037,1382,2.495,2113,4.903,2134,7.245,2139,4.6,2146,5.491,2148,4.6,2165,8.603,2166,3.481,2167,5.176,2168,4.6,2169,6.498,2170,3.481,2171,3.481,2172,3.481,2173,7.664,2174,3.481,2175,3.481,2176,3.481,2177,6.179,2178,3.481,2179,3.481,2180,3.481,2181,4.6,2182,3.481,2183,3.481,2184,3.481,2185,3.481,2186,3.481]],["title/classes/UserProfileResponse.html",[0,0.271,2187,3.774]],["body/classes/UserProfileResponse.html",[0,0.218,2,0.51,3,0.054,4,0.048,5,0.086,10,0.168,11,0.657,12,0.941,18,0.266,19,0.007,20,0.892,23,0.427,29,0.86,34,0.146,36,0.054,41,2.15,43,5.388,45,2.482,46,5.388,50,0.004,51,0.004,60,2.375,74,4.88,148,6.447,149,6.076,150,6.076,151,6.166,154,0.272,219,0.266,223,1.316,247,0.918,275,1.034,379,1.788,456,1.341,488,0.669,523,1.252,581,2.498,622,4.395,729,1.641,730,1.988,731,1.53,732,2.46,733,0.989,735,1.59,741,2.762,742,2.095,762,2.375,828,2.833,829,3.037,830,2.833,888,5.038,889,5.763,890,4.069,894,4.835,903,6.129,907,3.037,908,3.31,909,3.037,912,3.31,913,3.31,915,3.31,916,3.31,917,3.31,919,3.31,1416,3.31,1578,3.024,1579,4.808,1581,3.024,1582,2.833,1828,6.281,1970,2.144,2108,4.223,2109,2.418,2113,5.066,2187,5.763,2188,8.312,2189,7.386,2190,3.725,2191,3.725,2192,3.725,2193,3.725,2194,3.725,2195,3.725,2196,3.725]],["title/classes/UserProfileSeeder.html",[0,0.271,2197,4.114]],["body/classes/UserProfileSeeder.html",[0,0.365,2,0.851,3,0.091,4,0.081,5,0.071,8,2.083,10,0.281,12,0.704,13,1.306,15,1.984,18,0.204,19,0.007,21,1.783,23,0.327,28,0.834,29,0.643,30,0.959,31,1.861,34,0.169,35,2.433,36,0.091,37,1.477,50,0.006,51,0.006,154,0.204,219,0.376,269,1.968,275,1.182,902,4.992,907,5.071,909,5.071,911,4.037,990,4.037,1020,6.838,1021,5.528,1418,6.429,1419,4.597,1420,5.515,1421,6.55,1425,4.458,1426,4.458,1429,4.458,1430,4.458,2197,6.838,2198,6.221,2199,6.221,2200,6.221,2201,6.221,2202,6.221]],["title/classes/UserResponse.html",[0,0.271,527,3.317]],["body/classes/UserResponse.html",[0,0.248,2,0.578,3,0.062,4,0.055,5,0.048,10,0.191,11,0.719,18,0.282,19,0.007,20,0.828,23,0.431,29,0.616,34,0.159,36,0.062,41,2.162,45,1.883,50,0.004,51,0.004,67,2.382,114,4.858,154,0.276,155,5.031,156,5.031,165,5.659,203,4.169,219,0.291,223,1.441,247,1.042,275,1.132,311,3.704,322,2.842,379,1.806,456,1.468,488,0.759,513,5.368,523,2.002,527,5.368,581,2.26,622,3.704,706,1.846,729,1.862,730,2.106,731,1.675,732,2.693,733,1.123,735,1.741,741,3.521,742,2.064,756,2.927,758,2.923,759,2.923,760,2.923,762,2.829,888,4.613,890,4.312,930,6.005,939,2.875,940,3.029,942,3.446,943,3.446,948,3.446,949,3.446,951,3.446,954,3.756,1578,3.311,1579,5.095,1581,3.311,1582,3.214,1970,2.433,2108,4.475,2109,2.743,2187,6.438,2189,3.756,2203,8.419,2204,4.227,2205,4.227,2206,4.227,2207,4.227,2208,4.227,2209,4.227]],["title/classes/UserSeeder.html",[0,0.271,2210,4.114]],["body/classes/UserSeeder.html",[0,0.368,2,0.858,3,0.091,4,0.081,5,0.072,8,2.094,10,0.283,12,0.71,13,1.313,15,1.991,18,0.205,19,0.007,21,1.798,23,0.33,28,0.841,29,0.649,30,0.967,31,1.871,34,0.17,35,2.445,36,0.091,37,1.489,41,1.883,50,0.006,51,0.006,154,0.205,219,0.378,269,1.979,275,1.192,939,4.267,990,4.071,1017,5.574,1418,6.445,1419,4.621,1420,5.543,1421,6.563,1425,4.495,1426,4.495,1429,4.495,1430,4.495,2210,6.874,2211,6.273,2212,6.273,2213,6.273,2214,6.273,2215,6.273]],["title/controllers/UsersController.html",[277,2.208,2216,3.774]],["body/controllers/UsersController.html",[0,0.076,3,0.019,4,0.017,5,0.035,10,0.058,12,0.785,13,0.389,15,1.912,18,0.178,19,0.007,23,0.302,28,0.73,29,0.563,30,1.128,31,1.77,34,0.165,36,0.019,37,1.363,41,2.154,50,0.002,51,0.002,58,1.335,60,3.092,64,0.493,66,0.982,68,1.233,83,1.687,85,2.908,95,0.837,114,3.19,154,0.271,216,1.775,217,2.612,219,0.112,221,2.464,223,1.82,224,2.995,247,0.318,248,3.591,250,0.838,251,3.429,252,4.562,253,0.838,256,0.717,257,3.903,258,0.694,265,4.299,266,0.743,267,3.903,268,0.802,269,0.33,277,1.78,283,1.484,285,0.29,291,1.154,293,2.714,297,0.191,302,1.64,304,2.841,306,3.725,307,0.802,309,2.097,311,0.802,348,0.802,374,0.672,378,0.838,379,1.265,384,5.05,385,1.64,389,3.705,400,0.878,401,0.983,402,0.482,403,0.874,409,4.08,410,4.236,411,0.878,412,1.64,413,4.08,414,0.633,416,0.575,417,1.178,419,1.127,422,2.466,460,0.802,493,0.771,497,2.674,501,0.878,502,2.774,505,2.464,512,2.989,516,4.562,518,1.64,519,0.838,520,3.059,521,3.334,522,0.982,523,0.769,524,3.725,525,0.925,526,0.925,527,2.674,536,0.599,539,2.748,543,1.052,546,3.569,547,4.476,549,2.188,556,3.386,557,3.903,558,3.903,559,2.709,581,2.238,589,1.943,593,3.458,602,4.84,620,2.034,660,2.344,663,0.672,706,0.4,730,1.751,731,1.751,767,3.385,781,2.748,810,1.052,814,0.982,817,0.982,824,2.513,834,1.052,888,3.918,902,1.367,910,0.925,911,0.838,921,3.317,941,0.717,1209,0.802,1230,4.615,1239,2.421,1241,0.878,1389,0.652,1440,1.866,1553,0.838,1621,3.041,1624,4.44,1637,1.052,1638,4.142,1639,0.982,1640,0.982,1641,1.052,1642,1.052,1643,1.052,1644,1.147,1650,1.147,1654,0.838,1666,1.052,1668,3.886,1670,1.052,1674,3.48,1677,1.052,2106,4.44,2111,4.44,2112,1.866,2113,5.069,2119,4.44,2120,4.44,2129,4.44,2154,4.44,2159,3.903,2169,2.74,2181,1.147,2216,1.866,2217,1.291,2218,3.083,2219,3.083,2220,3.731,2221,3.083,2222,3.083,2223,3.083,2224,3.083,2225,3.083,2226,3.083,2227,1.291,2228,1.291,2229,2.289,2230,1.291,2231,1.291,2232,1.291,2233,5.111,2234,4.723,2235,1.291,2236,1.291,2237,1.291,2238,1.291,2239,1.291,2240,1.291,2241,1.291,2242,1.291,2243,1.291,2244,1.291,2245,1.291,2246,1.291,2247,1.291,2248,1.291,2249,1.291,2250,1.291,2251,1.291,2252,1.291,2253,2.289,2254,2.289,2255,3.083,2256,2.289,2257,1.291,2258,1.291,2259,1.291,2260,1.291,2261,1.291,2262,2.289,2263,1.291,2264,1.147,2265,3.083,2266,2.289,2267,1.291,2268,1.291,2269,1.291,2270,1.291,2271,1.147,2272,1.147,2273,1.291,2274,1.291,2275,1.291,2276,1.291,2277,1.291,2278,1.291,2279,1.291,2280,1.291,2281,1.291,2282,1.291,2283,1.291,2284,1.291,2285,1.291,2286,1.291,2287,1.291,2288,1.291,2289,1.291,2290,1.291,2291,1.291,2292,1.291,2293,2.289,2294,1.291,2295,1.291,2296,1.291,2297,1.291,2298,1.291,2299,1.291,2300,1.291,2301,1.291,2302,1.291,2303,1.291,2304,1.291,2305,1.291,2306,1.291,2307,1.291,2308,1.291,2309,1.291,2310,1.291,2311,1.291,2312,1.291,2313,2.289,2314,1.291,2315,2.289,2316,1.291,2317,1.291,2318,1.291,2319,1.291,2320,1.291,2321,1.291,2322,1.147,2323,1.291,2324,1.291,2325,1.291,2326,1.291,2327,1.291,2328,1.291,2329,1.291]],["title/modules/UsersModule.html",[443,1.941,564,3.149]],["body/modules/UsersModule.html",[0,0.295,3,0.073,4,0.066,5,0.058,19,0.007,34,0.182,36,0.073,41,1.51,50,0.005,51,0.005,75,2.34,154,0.165,155,2.902,156,2.902,203,2.405,219,0.328,297,0.747,322,2.405,332,1.563,374,3.501,443,3.383,445,2.626,446,3.614,452,3.87,453,2.902,454,2.802,468,4.363,476,4.017,564,6.518,576,4.818,589,4.849,593,3.614,655,3.613,661,3.834,662,3.135,676,2.902,700,2.902,867,3.012,881,4.484,882,4.818,902,4.017,910,3.613,911,3.272,941,2.802,1186,6.574,1209,3.135,1267,6.574,1286,6.574,1290,6.574,1551,3.272,1654,3.272,1697,4.11,1813,5.88,1818,4.48,2159,6.195,2216,6.166,2264,4.48,2272,4.48,2330,4.48,2331,5.042,2332,4.48,2333,4.48,2334,5.042,2335,6.723,2336,5.042,2337,5.042]],["title/injectables/UsersService.html",[582,0.88,589,2.411]],["body/injectables/UsersService.html",[0,0.13,3,0.032,4,0.029,5,0.025,10,0.1,12,0.842,13,0.616,15,2.141,18,0.244,19,0.007,20,0.901,23,0.401,28,0.998,29,0.769,30,1.32,31,2.071,34,0.13,35,0.7,36,0.032,37,1.88,41,2.136,45,2.208,50,0.003,51,0.003,58,1.911,60,3.04,68,1.452,83,3.024,85,3.331,154,0.25,155,3.85,156,3.85,203,3.191,219,0.177,223,1.116,269,1.366,283,1.587,285,0.815,291,1.745,293,3.131,297,0.328,304,2.018,350,1.041,390,3.241,391,5.117,401,2.294,402,0.827,403,1.764,416,1.341,417,2.252,419,1.328,421,3.379,422,3.197,458,2.758,460,1.617,465,5.825,500,5.061,502,3.3,512,3.97,546,2.87,547,2.87,582,0.69,583,0.744,588,1.056,589,1.891,593,3.405,610,2.96,676,1.274,706,2.673,754,3.041,888,3.97,902,4.32,910,1.587,911,1.437,941,1.231,957,0.951,1202,3.754,1203,3.754,1204,3.637,1313,1.377,1314,1.377,1315,1.323,1316,1.377,1317,1.377,1318,1.377,1406,1.437,1699,3.308,1700,3.51,1701,4.353,1702,2.96,1705,4.539,1709,2.761,1710,2.96,1712,2.761,1713,5.576,1716,2.761,1717,2.96,1719,2.96,1721,4.816,1724,1.684,1733,5.238,1743,1.968,2338,2.214,2339,3.631,2340,3.631,2341,3.631,2342,3.227,2343,3.227,2344,5.34,2345,2.214,2346,3.631,2347,2.214,2348,2.214,2349,2.214,2350,3.631,2351,2.214,2352,2.214,2353,3.631,2354,2.214,2355,3.631,2356,2.214,2357,2.214,2358,3.631,2359,2.214,2360,3.631,2361,2.214,2362,2.214,2363,2.214,2364,2.214,2365,3.631,2366,2.214,2367,2.214,2368,2.214,2369,2.214,2370,2.214,2371,2.214,2372,5.34,2373,2.214,2374,2.214,2375,2.214,2376,2.214,2377,3.631,2378,3.631,2379,2.214,2380,2.214,2381,2.214,2382,2.214,2383,2.214,2384,2.214]],["title/interfaces/ValidationErrors.html",[212,1.989,749,2.489]],["body/interfaces/ValidationErrors.html",[3,0.096,4,0.086,5,0.075,10,0.298,11,0.963,18,0.281,19,0.007,20,0.936,36,0.096,50,0.006,51,0.006,154,0.216,212,2.832,214,3.794,217,2.735,219,0.322,221,2.158,284,6.378,353,3.046,355,3.264,456,1.624,735,1.926,749,4.903,963,4.278,1133,6.5,1210,5.249,1391,5.423,2385,6.592,2386,6.592,2387,6.592]],["title/dependencies.html",[446,2.997,2388,3.423]],["body/dependencies.html",[0,0.434,19,0.007,35,2.342,50,0.006,51,0.006,247,1.442,287,3.049,297,0.868,324,3.049,326,3.253,332,1.814,397,3.982,402,2.188,403,2.831,446,3.147,470,2.14,471,5.039,479,3.982,487,4.451,533,3.799,536,2.717,569,3.982,571,3.982,610,4.772,662,3.639,676,3.37,683,6.04,684,6.04,685,4.772,687,4.772,691,4.772,700,3.37,990,3.799,1331,6.626,1389,2.957,1487,4.195,2389,8.813,2390,5.854,2391,5.854,2392,5.854,2393,5.854,2394,5.854,2395,5.854,2396,5.854,2397,5.854,2398,5.854,2399,5.854,2400,5.854,2401,5.854,2402,5.854,2403,5.854,2404,5.854,2405,5.854,2406,5.854,2407,5.854,2408,5.854,2409,5.854,2410,5.854,2411,5.854,2412,5.854,2413,5.854,2414,5.854,2415,5.854,2416,5.854,2417,5.854,2418,5.854,2419,5.854,2420,5.854,2421,5.854,2422,5.854,2423,5.854,2424,5.854,2425,5.854,2426,5.854,2427,5.854]],["title/miscellaneous/enumerations.html",[2428,2.62,2429,4.954]],["body/miscellaneous/enumerations.html",[5,0.055,10,0.219,14,3.042,18,0.215,19,0.007,22,2.312,41,1.784,50,0.005,51,0.005,58,2.345,60,1.631,67,3.318,68,2.621,83,2.963,85,3.266,95,1.774,98,2.899,108,3.301,114,2.697,119,2.194,120,3.301,217,3.175,219,0.427,250,3.15,253,3.15,255,3.69,256,2.697,258,2.609,260,1.289,261,3.301,263,3.69,264,3.69,266,2.794,268,3.017,269,1.241,315,3.956,316,3.414,319,4.124,342,4.983,343,5.342,344,4.983,345,5.342,346,4.983,348,4.613,355,1.987,512,2.527,593,2.609,663,2.527,664,5.823,732,2.194,738,1.941,740,2.816,817,4.983,888,3.413,930,4.983,1114,3.956,1133,3.956,1260,2.452,1703,4.313,2113,3.478,2342,4.313,2343,4.313,2428,3.301,2429,4.313,2430,5.823,2431,4.853,2432,6.553,2433,4.853,2434,4.853,2435,6.553,2436,4.853,2437,6.553,2438,6.553,2439,4.313,2440,6.553,2441,4.313,2442,4.853,2443,6.553,2444,4.853,2445,4.853,2446,6.593,2447,6.553,2448,4.853,2449,5.823,2450,4.853,2451,4.853,2452,4.853,2453,4.853,2454,4.853,2455,4.853,2456,4.853,2457,4.853,2458,4.853,2459,4.853,2460,4.853,2461,4.853,2462,4.853,2463,4.853,2464,4.853,2465,4.313,2466,4.313,2467,4.853,2468,4.853,2469,4.853,2470,4.853]],["title/miscellaneous/functions.html",[2428,2.62,2471,4.954]],["body/miscellaneous/functions.html",[0,0.235,5,0.08,10,0.113,12,0.991,18,0.278,19,0.007,20,0.739,21,1.643,22,2.104,28,1.147,29,0.885,30,0.967,41,1.287,50,0.003,51,0.003,64,0.954,75,1.859,84,2.694,95,1.464,127,1.601,154,0.28,155,2.305,156,2.305,187,1.553,203,1.91,219,0.28,221,1.904,224,3.167,260,1.778,261,2.724,272,0.999,273,3.84,276,3.811,277,2.735,278,3.487,279,1.553,281,3.811,282,2.785,284,1.699,312,3.141,316,1.073,317,2.694,318,1.9,319,3.186,322,3.194,325,2.397,326,3.186,327,1.79,329,1.679,330,1.553,333,2.87,336,2.49,338,2.305,340,2.885,347,1.438,351,3.3,353,2.558,355,3.087,359,2.49,360,2.87,368,1.438,379,1.105,385,2.87,386,4.809,387,3.393,389,1.699,404,4.359,407,4.674,434,2.877,456,0.616,462,3.3,467,4.454,470,0.913,471,1.699,472,3.253,502,2.509,503,1.9,536,2.661,651,2.22,652,2.22,663,2.085,692,3.264,706,2.18,732,1.81,742,1.932,754,1.959,756,0.976,784,1.388,865,4.359,880,4.674,944,4.359,945,4.359,946,4.359,957,2.877,958,3.721,1001,2.036,1028,3.264,1102,2.22,1114,3.264,1150,3.253,1187,4.108,1188,3.558,1199,4.108,1200,4.208,1206,5.436,1211,5.239,1219,4.108,1220,5.239,1221,4.108,1222,3.459,1223,4.799,1224,4.108,1225,4.108,1227,4.497,1228,4.108,1229,4.497,1230,3.564,1235,2.22,1236,5.239,1237,4.674,1253,2.22,1255,3.264,1256,5.092,1274,2.22,1275,4.674,1282,2.22,1285,2.22,1287,4.674,1289,2.22,1293,1.9,1500,4.674,1548,4.108,1549,1.9,1551,1.621,1552,1.79,1553,2.599,1798,2.036,1844,2.22,1928,5.094,2322,3.558,2428,1.699,2471,2.22,2472,5.012,2473,2.498,2474,4.005,2475,2.498,2476,7.541,2477,4.005,2478,4.005,2479,5.733,2480,5.733,2481,4.005,2482,4.005,2483,2.498,2484,4.005,2485,4.005,2486,2.498,2487,5.012,2488,4.005,2489,4.005,2490,4.005,2491,4.005,2492,2.498,2493,4.005,2494,2.498,2495,2.498,2496,2.498,2497,2.498,2498,5.733,2499,2.498,2500,2.498,2501,2.498,2502,4.005,2503,4.005,2504,2.498,2505,2.498,2506,2.498,2507,2.498,2508,4.005,2509,4.005,2510,4.005,2511,2.498,2512,2.498,2513,2.498,2514,2.498,2515,4.005,2516,2.498,2517,4.005,2518,4.005,2519,4.005,2520,2.498,2521,4.005,2522,4.005,2523,4.005,2524,4.005,2525,2.498,2526,2.498,2527,2.498,2528,2.498,2529,2.498,2530,2.498,2531,2.498,2532,2.498,2533,5.012,2534,2.498,2535,2.498,2536,2.498,2537,2.498,2538,4.005,2539,2.498,2540,2.498,2541,2.498,2542,2.498,2543,2.498,2544,5.012,2545,5.012,2546,5.012,2547,5.733,2548,5.012,2549,5.012,2550,5.012,2551,2.498,2552,2.498,2553,2.498,2554,4.005,2555,4.005,2556,2.498,2557,2.498,2558,2.498,2559,2.498,2560,2.498,2561,2.498]],["title/index.html",[10,0.174,2562,3.423,2563,3.423]],["body/index.html",[4,0.08,19,0.007,50,0.006,51,0.006,150,4.43,154,0.203,256,3.436,342,4.701,344,4.701,346,5.829,349,4.43,700,4.796,1315,3.693,1419,5.452,1457,5.04,1529,4.205,1705,4.43,2449,5.493,2564,6.182,2565,6.182,2566,7.666,2567,6.182,2568,6.182,2569,6.182,2570,6.182,2571,6.182,2572,6.182,2573,6.182,2574,9.252,2575,6.182,2576,6.182,2577,6.182,2578,7.666,2579,6.182,2580,6.182,2581,6.182,2582,7.666,2583,6.182,2584,6.182,2585,6.182,2586,6.182,2587,6.812,2588,7.666,2589,6.182,2590,6.182,2591,6.182,2592,6.182,2593,6.182,2594,5.493,2595,6.182,2596,6.182,2597,6.182,2598,6.182,2599,6.182,2600,6.182,2601,6.182,2602,6.182,2603,6.182,2604,6.182,2605,6.182,2606,6.182,2607,6.182,2608,5.04]],["title/license.html",[2562,3.423,2563,3.423,2608,3.14]],["body/license.html",[19,0.006,50,0.006,51,0.006,84,3.33,383,5.505,391,3.701,397,4.214,454,3.443,553,5.05,958,4.981,1121,5.505,1204,3.226,1548,4.439,1552,4.439,2609,8.34,2610,6.195,2611,6.195,2612,5.505,2613,5.505,2614,7.676,2615,6.195,2616,6.195,2617,6.195,2618,6.195,2619,6.195,2620,6.195,2621,7.676,2622,9.429,2623,6.195,2624,6.195,2625,6.195,2626,8.34,2627,6.195,2628,7.676,2629,6.195,2630,6.195,2631,6.195,2632,6.195,2633,6.195,2634,6.195,2635,6.195,2636,6.195,2637,6.195,2638,7.676,2639,6.195,2640,6.195,2641,6.195,2642,6.195,2643,6.195,2644,7.676,2645,7.676,2646,6.195,2647,6.195,2648,6.195,2649,6.195,2650,6.195,2651,6.195,2652,6.195,2653,6.195,2654,6.195,2655,6.195,2656,6.195,2657,6.195,2658,6.195,2659,6.195,2660,6.195,2661,6.195,2662,6.195,2663,6.195,2664,6.195,2665,6.195,2666,6.195,2667,6.195,2668,6.195,2669,6.195]],["title/modules.html",[445,3.305]],["body/modules.html",[19,0.006,50,0.006,51,0.006,444,5.149,445,3.527,449,4.853,450,4.853,451,4.853,560,4.853,564,4.606,642,4.853,1037,6.017,1687,4.853,1691,4.606,1813,4.606,2594,8.501,2670,9.567,2671,9.567,2672,9.616,2673,6.772]],["title/overview.html",[2674,5.639]],["body/overview.html",[2,0.645,19,0.007,50,0.005,51,0.005,214,2.714,374,2.456,444,6.714,445,2.456,446,3.455,447,4.19,448,4.19,449,5.887,450,5.239,451,6.646,452,3.699,453,2.714,454,2.62,529,4.973,560,6.55,561,4.19,562,4.19,563,4.19,564,6.473,565,5.559,566,5.559,583,1.584,589,4.518,640,4.19,641,4.19,642,5.887,1007,3.06,1186,5.559,1234,5.559,1239,5.63,1254,5.559,1258,4.993,1267,5.559,1273,5.559,1277,4.545,1283,5.559,1286,5.559,1290,5.559,1525,4.19,1563,5.239,1687,6.55,1688,4.19,1689,4.19,1690,4.19,1691,6.308,1811,4.19,1812,4.19,1813,6.09,1854,4.19,1855,4.19,1856,4.19,1895,4.19,1896,4.19,1897,5.559,1959,5.239,2025,4.19,2026,4.19,2027,4.19,2151,4.19,2159,5.239,2330,4.19,2332,4.19,2333,4.19,2674,4.19,2675,4.715,2676,4.715,2677,4.715,2678,4.715]],["title/properties.html",[11,0.673,2388,3.423]],["body/properties.html",[11,0.882,19,0.007,50,0.006,51,0.006,154,0.239,378,4.739,1529,4.967,2168,6.489,2587,6.489,2608,5.953,2612,6.489,2613,6.489,2679,7.303,2680,7.303,2681,7.303,2682,7.303,2683,7.303]],["title/miscellaneous/typealiases.html",[2428,2.62,2684,5.575]],["body/miscellaneous/typealiases.html",[10,0.256,18,0.306,19,0.007,41,1.272,50,0.005,51,0.005,95,2.071,127,2.901,215,5.517,216,4.176,217,3.113,218,6.901,219,0.453,220,6.634,221,2.361,226,6.447,227,6.447,228,6.447,256,3.148,270,5.034,272,2.901,293,2.926,295,5.915,296,5.915,308,5.915,1651,6.447,2003,6.447,2271,6.447,2428,3.853,2430,5.034,2439,6.447,2441,6.447,2446,5.034,2465,5.034,2466,5.034,2685,5.665,2686,8.725,2687,7.255,2688,7.255,2689,7.255,2690,7.255,2691,8.004,2692,8.004,2693,5.665]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"modules/ServicesModule.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TimestampResponse.html":{},"interfaces/TokenPayload.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrors.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":1132,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"classes/UnprocessableEntityException.html":{}}}],["0.0.1",{"_index":2679,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":2422,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":2402,"title":{},"body":{"dependencies.html":{}}}],["0.3.10",{"_index":2426,"title":{},"body":{"dependencies.html":{}}}],["0.30.3",{"_index":2398,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2401,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":2416,"title":{},"body":{"dependencies.html":{}}}],["02",{"_index":759,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SuccessResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UserResponse.html":{}}}],["1",{"_index":2322,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["1.0.0",{"_index":2418,"title":{},"body":{"dependencies.html":{}}}],["1.11.0",{"_index":2409,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":2407,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":2404,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":2414,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1525,"title":{},"body":{"injectables/ParseIntPipe.html":{},"overview.html":{}}}],["10.0.1",{"_index":2391,"title":{},"body":{"dependencies.html":{}}}],["11t05:24:50.680z",{"_index":760,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SuccessResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UserResponse.html":{}}}],["12",{"_index":947,"title":{},"body":{"classes/CreateUserRequest.html":{},"classes/UpdateUserRequest.html":{}}}],["12)@isusernameunique('id')@apiproperty({description",{"_index":2125,"title":{},"body":{"classes/UpdateUserRequest.html":{}}}],["12)@isusernameunique()@apiproperty({description",{"_index":934,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["2",{"_index":2321,"title":{},"body":{"controllers/UsersController.html":{}}}],["2.1.0",{"_index":2394,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":2390,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":2413,"title":{},"body":{"dependencies.html":{}}}],["2.6.2",{"_index":2427,"title":{},"body":{"dependencies.html":{}}}],["2022",{"_index":2611,"title":{},"body":{"license.html":{}}}],["2023",{"_index":758,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SuccessResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UserResponse.html":{}}}],["24h",{"_index":1829,"title":{},"body":{"classes/SignInResponse.html":{}}}],["250",{"_index":870,"title":{},"body":{"classes/CreatePostRequest.html":{}}}],["250)@apiproperty({description",{"_index":849,"title":{},"body":{"classes/CreatePostRequest.html":{}}}],["3.0.1",{"_index":2400,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":2424,"title":{},"body":{"dependencies.html":{}}}],["3.1.1",{"_index":2415,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":2676,"title":{},"body":{"overview.html":{}}}],["302",{"_index":426,"title":{},"body":{"controllers/AppController.html":{}}}],["302)@apiexcludeendpoint",{"_index":381,"title":{},"body":{"controllers/AppController.html":{}}}],["4",{"_index":1247,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["4.0.0",{"_index":2396,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":2417,"title":{},"body":{"dependencies.html":{}}}],["4.5.0",{"_index":2420,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1171,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["401",{"_index":2073,"title":{},"body":{"classes/UnauthorizedException.html":{}}}],["403",{"_index":1060,"title":{},"body":{"classes/ForbiddenException.html":{}}}],["404",{"_index":1512,"title":{},"body":{"classes/NotFoundException.html":{}}}],["408",{"_index":1786,"title":{},"body":{"classes/RequestTimeoutException.html":{}}}],["409",{"_index":778,"title":{},"body":{"classes/ConflictException.html":{}}}],["413",{"_index":806,"title":{},"body":{"classes/ContentTooLargeException.html":{}}}],["422",{"_index":2084,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["429",{"_index":1947,"title":{},"body":{"classes/TooManyRequestsException.html":{}}}],["5",{"_index":2675,"title":{},"body":{"overview.html":{}}}],["5.1.3",{"_index":2399,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":1184,"title":{},"body":{"classes/InternalServerErrorException.html":{}}}],["6",{"_index":2151,"title":{},"body":{"entities/User.html":{},"overview.html":{}}}],["6.0.0",{"_index":2411,"title":{},"body":{"dependencies.html":{}}}],["6.2.1",{"_index":2395,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":2425,"title":{},"body":{"dependencies.html":{}}}],["77",{"_index":2677,"title":{},"body":{"overview.html":{}}}],["8.2.1",{"_index":2419,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":2678,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":2389,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":2397,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":1008,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["above",{"_index":2643,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":1064,"title":{},"body":{"classes/GenericEntity.html":{}}}],["access",{"_index":663,"title":{},"body":{"modules/ConfigModule.html":{},"classes/CreateLocalFileRequest.html":{},"injectables/JwtAuthGuard.html":{},"entities/LocalFile.html":{},"controllers/PostsController.html":{},"interfaces/Response.html":{},"classes/SignInResponse.html":{},"injectables/TimeoutInterceptor.html":{},"controllers/TopicsController.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["access.enum",{"_index":834,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"entities/LocalFile.html":{},"controllers/UsersController.html":{}}}],["access.enum.ts",{"_index":2437,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["accesscontrolactions",{"_index":2430,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["accessguard",{"_index":2560,"title":{},"body":{"miscellaneous/functions.html":{}}}],["accessible",{"_index":2557,"title":{},"body":{"miscellaneous/functions.html":{}}}],["accesstoken",{"_index":579,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/SignInResponse.html":{}}}],["accomplish",{"_index":1084,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["action",{"_index":84,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["actions",{"_index":2446,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["actions.enum.ts",{"_index":2432,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["add",{"_index":42,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"entities/User.html":{}}}],["add(topic.id",{"_index":1602,"title":{},"body":{"classes/PostSeeder.html":{}}}],["addfirstandlastnameattribute.ts",{"_index":7,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{}}}],["addfirstandlastnameattribute.ts:17",{"_index":27,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{}}}],["addfirstandlastnameattribute.ts:6",{"_index":24,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{}}}],["addfirstandlastnameattribute.ts:8",{"_index":33,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{}}}],["addfirstandlastnameattribute1669010304048",{"_index":1,"title":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{}},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{}}}],["additional",{"_index":1200,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"miscellaneous/functions.html":{}}}],["addlocalfiletable.ts",{"_index":54,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{}}}],["addlocalfiletable.ts:27",{"_index":56,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{}}}],["addlocalfiletable.ts:4",{"_index":55,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{}}}],["addlocalfiletable.ts:6",{"_index":57,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{}}}],["addlocalfiletable1675692342862",{"_index":52,"title":{"classes/AddLocalFileTable1675692342862.html":{}},"body":{"classes/AddLocalFileTable1675692342862.html":{}}}],["addposttable.ts",{"_index":91,"title":{},"body":{"classes/AddPostTable1678073082722.html":{}}}],["addposttable.ts:15",{"_index":93,"title":{},"body":{"classes/AddPostTable1678073082722.html":{}}}],["addposttable.ts:4",{"_index":92,"title":{},"body":{"classes/AddPostTable1678073082722.html":{}}}],["addposttable.ts:6",{"_index":94,"title":{},"body":{"classes/AddPostTable1678073082722.html":{}}}],["addposttable1678073082722",{"_index":89,"title":{"classes/AddPostTable1678073082722.html":{}},"body":{"classes/AddPostTable1678073082722.html":{}}}],["addroletable.ts",{"_index":104,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{}}}],["addroletable.ts:25",{"_index":106,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{}}}],["addroletable.ts:4",{"_index":105,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{}}}],["addroletable.ts:6",{"_index":107,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{}}}],["addroletable1675697129483",{"_index":102,"title":{"classes/AddRoleTable1675697129483.html":{}},"body":{"classes/AddRoleTable1675697129483.html":{}}}],["addtopictable.ts",{"_index":123,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{}}}],["addtopictable.ts:22",{"_index":125,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{}}}],["addtopictable.ts:4",{"_index":124,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{}}}],["addtopictable.ts:6",{"_index":126,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{}}}],["addtopictable1678958507781",{"_index":121,"title":{"classes/AddTopicTable1678958507781.html":{}},"body":{"classes/AddTopicTable1678958507781.html":{}}}],["adduserprofiletable.ts",{"_index":144,"title":{},"body":{"classes/AddUserProfileTable1669618726311.html":{}}}],["adduserprofiletable.ts:24",{"_index":146,"title":{},"body":{"classes/AddUserProfileTable1669618726311.html":{}}}],["adduserprofiletable.ts:4",{"_index":145,"title":{},"body":{"classes/AddUserProfileTable1669618726311.html":{}}}],["adduserprofiletable.ts:6",{"_index":147,"title":{},"body":{"classes/AddUserProfileTable1669618726311.html":{}}}],["adduserprofiletable1669618726311",{"_index":142,"title":{"classes/AddUserProfileTable1669618726311.html":{}},"body":{"classes/AddUserProfileTable1669618726311.html":{}}}],["admin",{"_index":120,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemoveRoleTable1679272991389.html":{},"miscellaneous/enumerations.html":{}}}],["against",{"_index":1219,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"miscellaneous/functions.html":{}}}],["aliases",{"_index":2685,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":1915,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["already",{"_index":1218,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["alter",{"_index":39,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"entities/User.html":{}}}],["alterlastsignedinatattribute.ts",{"_index":161,"title":{},"body":{"classes/AlterLastSignedInAtAttribute1678189980290.html":{}}}],["alterlastsignedinatattribute.ts:17",{"_index":163,"title":{},"body":{"classes/AlterLastSignedInAtAttribute1678189980290.html":{}}}],["alterlastsignedinatattribute.ts:6",{"_index":162,"title":{},"body":{"classes/AlterLastSignedInAtAttribute1678189980290.html":{}}}],["alterlastsignedinatattribute.ts:8",{"_index":164,"title":{},"body":{"classes/AlterLastSignedInAtAttribute1678189980290.html":{}}}],["alterlastsignedinatattribute1678189980290",{"_index":159,"title":{"classes/AlterLastSignedInAtAttribute1678189980290.html":{}},"body":{"classes/AlterLastSignedInAtAttribute1678189980290.html":{}}}],["alterphoneattributeuniqueness.ts",{"_index":168,"title":{},"body":{"classes/AlterPhoneAttributeUniqueness1676900183425.html":{}}}],["alterphoneattributeuniqueness.ts:12",{"_index":170,"title":{},"body":{"classes/AlterPhoneAttributeUniqueness1676900183425.html":{}}}],["alterphoneattributeuniqueness.ts:4",{"_index":169,"title":{},"body":{"classes/AlterPhoneAttributeUniqueness1676900183425.html":{}}}],["alterphoneattributeuniqueness.ts:6",{"_index":171,"title":{},"body":{"classes/AlterPhoneAttributeUniqueness1676900183425.html":{}}}],["alterphoneattributeuniqueness1676900183425",{"_index":166,"title":{"classes/AlterPhoneAttributeUniqueness1676900183425.html":{}},"body":{"classes/AlterPhoneAttributeUniqueness1676900183425.html":{}}}],["alterrolenameattribute.ts",{"_index":177,"title":{},"body":{"classes/AlterRoleNameAttribute1675699186800.html":{}}}],["alterrolenameattribute.ts:13",{"_index":179,"title":{},"body":{"classes/AlterRoleNameAttribute1675699186800.html":{}}}],["alterrolenameattribute.ts:4",{"_index":178,"title":{},"body":{"classes/AlterRoleNameAttribute1675699186800.html":{}}}],["alterrolenameattribute.ts:6",{"_index":180,"title":{},"body":{"classes/AlterRoleNameAttribute1675699186800.html":{}}}],["alterrolenameattribute1675699186800",{"_index":175,"title":{"classes/AlterRoleNameAttribute1675699186800.html":{}},"body":{"classes/AlterRoleNameAttribute1675699186800.html":{}}}],["altertablescascade.ts",{"_index":183,"title":{},"body":{"classes/AlterTablesCascade1678096726170.html":{}}}],["altertablescascade.ts:27",{"_index":185,"title":{},"body":{"classes/AlterTablesCascade1678096726170.html":{}}}],["altertablescascade.ts:4",{"_index":184,"title":{},"body":{"classes/AlterTablesCascade1678096726170.html":{}}}],["altertablescascade.ts:6",{"_index":186,"title":{},"body":{"classes/AlterTablesCascade1678096726170.html":{}}}],["altertablescascade1678096726170",{"_index":181,"title":{"classes/AlterTablesCascade1678096726170.html":{}},"body":{"classes/AlterTablesCascade1678096726170.html":{}}}],["altertablescreatedandupdatedat.ts",{"_index":190,"title":{},"body":{"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{}}}],["altertablescreatedandupdatedat.ts:44",{"_index":192,"title":{},"body":{"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{}}}],["altertablescreatedandupdatedat.ts:6",{"_index":191,"title":{},"body":{"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{}}}],["altertablescreatedandupdatedat.ts:8",{"_index":193,"title":{},"body":{"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{}}}],["altertablescreatedandupdatedat1678183368786",{"_index":188,"title":{"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{}},"body":{"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{}}}],["altertablesidentifiertouuid.ts",{"_index":197,"title":{},"body":{"classes/AlterTablesIdentifierToUuid1676872212399.html":{}}}],["altertablesidentifiertouuid.ts:149",{"_index":199,"title":{},"body":{"classes/AlterTablesIdentifierToUuid1676872212399.html":{}}}],["altertablesidentifiertouuid.ts:6",{"_index":198,"title":{},"body":{"classes/AlterTablesIdentifierToUuid1676872212399.html":{}}}],["altertablesidentifiertouuid.ts:8",{"_index":200,"title":{},"body":{"classes/AlterTablesIdentifierToUuid1676872212399.html":{}}}],["altertablesidentifiertouuid1676872212399",{"_index":195,"title":{"classes/AlterTablesIdentifierToUuid1676872212399.html":{}},"body":{"classes/AlterTablesIdentifierToUuid1676872212399.html":{}}}],["alteruserrolesattribute.ts",{"_index":208,"title":{},"body":{"classes/AlterUserRolesAttribute1679276151891.html":{}}}],["alteruserrolesattribute.ts:15",{"_index":210,"title":{},"body":{"classes/AlterUserRolesAttribute1679276151891.html":{}}}],["alteruserrolesattribute.ts:6",{"_index":209,"title":{},"body":{"classes/AlterUserRolesAttribute1679276151891.html":{}}}],["alteruserrolesattribute.ts:8",{"_index":211,"title":{},"body":{"classes/AlterUserRolesAttribute1679276151891.html":{}}}],["alteruserrolesattribute1679276151891",{"_index":206,"title":{"classes/AlterUserRolesAttribute1679276151891.html":{}},"body":{"classes/AlterUserRolesAttribute1679276151891.html":{}}}],["always",{"_index":1032,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/SuccessResponse.html":{}}}],["amazing",{"_index":2595,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":2636,"title":{},"body":{"license.html":{}}}],["anyclass",{"_index":2554,"title":{},"body":{"miscellaneous/functions.html":{}}}],["api",{"_index":220,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"miscellaneous/typealiases.html":{}}}],["api/api",{"_index":216,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{},"miscellaneous/typealiases.html":{}}}],["api/errors/api",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["api/params/api",{"_index":1639,"title":{},"body":{"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["api/successes/api",{"_index":412,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["api/users",{"_index":1136,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["api/users/1",{"_index":1134,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["api/users?page=1&take=1",{"_index":1135,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["api/users?search=username",{"_index":1141,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["api/v1/auth/sign",{"_index":752,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{}}}],["apiacceptedresponse",{"_index":300,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{}}}],["apibadgatewayresponse",{"_index":229,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apibadrequestresponse",{"_index":230,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apibearerauth",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["apibody",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiclienterrorresponse",{"_index":226,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"miscellaneous/typealiases.html":{}}}],["apiconflicterrorresponse",{"_index":248,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["apiconflictresponse",{"_index":231,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apicreatedresponse",{"_index":299,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{}}}],["apicreatedsuccessresponse",{"_index":302,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["apicustomerrorresponse",{"_index":228,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"miscellaneous/typealiases.html":{}}}],["apicustomsuccessfulresponse",{"_index":296,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"miscellaneous/typealiases.html":{}}}],["apierrorresponse",{"_index":286,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apierrorresponsemetadata",{"_index":213,"title":{"interfaces/ApiErrorResponseMetadata.html":{}},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apierrorsresponse",{"_index":413,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["apiexcludeendpoint",{"_index":399,"title":{},"body":{"controllers/AppController.html":{}}}],["apifile",{"_index":2274,"title":{},"body":{"controllers/UsersController.html":{}}}],["apifile('avatar",{"_index":2318,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiforbiddenerrorresponse",{"_index":252,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["apiforbiddenresponse",{"_index":232,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apigatewaytimeoutresponse",{"_index":233,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apigoneresponse",{"_index":234,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apiinternalservererrorerrorresponse",{"_index":254,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apiinternalservererrorresponse",{"_index":235,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apimethodnotallowedresponse",{"_index":236,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apinocontentresponse",{"_index":301,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{}}}],["apinocontentsuccessresponse",{"_index":305,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{}}}],["apinotfounderrorresponse",{"_index":257,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":237,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apinotimplementedresponse",{"_index":238,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apiokresponse",{"_index":298,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/StoragesController.html":{}}}],["apioksuccessresponse",{"_index":306,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["apipayloadtoolargeresponse",{"_index":239,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apipreconditionfailedresponse",{"_index":240,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apiproperty",{"_index":762,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/LocalFileIdParam.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"classes/SuccessResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UserIdParam.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{}}}],["apiproperty({description",{"_index":741,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/PostResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"classes/SuccessResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TopicResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{}}}],["apiproperty({type",{"_index":2114,"title":{},"body":{"classes/UpdateUserProfileAvatarRequest.html":{}}}],["apipropertyoptional",{"_index":903,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/SignInResponse.html":{},"classes/UserProfileResponse.html":{}}}],["apipropertyoptional({description",{"_index":1828,"title":{},"body":{"classes/SignInResponse.html":{},"classes/UserProfileResponse.html":{}}}],["apirequesttimeouterrorresponse",{"_index":259,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apirequesttimeoutresponse",{"_index":241,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apiresponse",{"_index":1894,"title":{},"body":{"classes/SuccessResponse.html":{}}}],["apiresponseoptions",{"_index":225,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{}}}],["apiservererrorresponse",{"_index":227,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"miscellaneous/typealiases.html":{}}}],["apiserviceunavailableresponse",{"_index":242,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apisuccessesresponse",{"_index":409,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["apisuccessfulresponse",{"_index":295,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"miscellaneous/typealiases.html":{}}}],["apisuccessresponse",{"_index":313,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{}}}],["apisuccessresponsemetadata",{"_index":292,"title":{"interfaces/ApiSuccessResponseMetadata.html":{}},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{}}}],["apisuccessresponsemetadataoptions",{"_index":294,"title":{"interfaces/ApiSuccessResponseMetadataOptions.html":{}},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{}}}],["apitags",{"_index":400,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["apitags('app",{"_index":415,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('auth",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('posts",{"_index":1655,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('storages",{"_index":1841,"title":{},"body":{"controllers/StoragesController.html":{}}}],["apitags('topics",{"_index":2006,"title":{},"body":{"controllers/TopicsController.html":{}}}],["apitags('users",{"_index":2279,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitoomanyrequestserrorresponse",{"_index":262,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apitoomanyrequestsresponse",{"_index":243,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apiunauthorizederrorresponse",{"_index":265,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":244,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apiunprocessableentityerrorresponse",{"_index":267,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["apiunprocessableentityresponse",{"_index":245,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apiunsupportedmediatyperesponse",{"_index":246,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["apiuuidparam",{"_index":1638,"title":{},"body":{"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["app",{"_index":349,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"modules/AppModule.html":{},"injectables/HttpCacheInterceptor.html":{},"index.html":{}}}],["app.constant.ts",{"_index":1917,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["app.controller",{"_index":480,"title":{},"body":{"modules/AppModule.html":{}}}],["app/app.config",{"_index":670,"title":{},"body":{"modules/ConfigModule.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{}}}],["app_guard",{"_index":477,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":478,"title":{},"body":{"modules/AppModule.html":{}}}],["app_max_timeout",{"_index":1918,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["app_name",{"_index":988,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{}}}],["app_name.replace",{"_index":1013,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["app_version",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["appconfig",{"_index":366,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"modules/ConfigModule.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{}}}],["appconfigoptions",{"_index":314,"title":{"interfaces/AppConfigOptions.html":{}},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{}}}],["appconfigoptions.debug",{"_index":1002,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{}}}],["appconfigoptions.environment",{"_index":1003,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{}}}],["appcontroller",{"_index":373,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller.prototype.getdocs.name",{"_index":429,"title":{},"body":{"controllers/AppController.html":{}}}],["appcontroller.prototype.index.name",{"_index":423,"title":{},"body":{"controllers/AppController.html":{}}}],["appenvironmentvariables",{"_index":356,"title":{"classes/AppEnvironmentVariables.html":{}},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{}}}],["application",{"_index":316,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"modules/ServicesModule.html":{},"injectables/TasksService.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["applications",{"_index":2571,"title":{},"body":{"index.html":{}}}],["apply",{"_index":2547,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appmodule",{"_index":444,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1340,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["apps",{"_index":1078,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["argon2",{"_index":610,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["argon2.hash(password",{"_index":2382,"title":{},"body":{"injectables/UsersService.html":{}}}],["argon2.hash(user.password",{"_index":2367,"title":{},"body":{"injectables/UsersService.html":{}}}],["argon2.verify(user.password",{"_index":616,"title":{},"body":{"injectables/AuthService.html":{}}}],["argument",{"_index":779,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["argumentmetadata",{"_index":1397,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["arguments",{"_index":1201,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["argumentshost",{"_index":1157,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["arising",{"_index":2667,"title":{},"body":{"license.html":{}}}],["array",{"_index":1716,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TopicsService.html":{},"classes/UnprocessableEntityException.html":{},"injectables/UsersService.html":{}}}],["array.isarray(error.children",{"_index":2093,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["arraynotempty",{"_index":858,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/CreateUserRequest.html":{}}}],["arrayunique",{"_index":859,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/CreateUserRequest.html":{}}}],["associate",{"_index":1081,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["associated",{"_index":2623,"title":{},"body":{"license.html":{}}}],["async",{"_index":15,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/InitialMigration1668674726738.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileSeeder.html":{},"injectables/LocalStrategy.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attribute",{"_index":735,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/GenericEntity.html":{},"classes/InternalServerErrorErrorResponse.html":{},"entities/LocalFile.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"entities/Post.html":{},"classes/PostResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"classes/SuccessResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"entities/Topic.html":{},"classes/TopicResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{},"interfaces/ValidationErrors.html":{}}}],["auth",{"_index":493,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"interfaces/RequestWithAuthUser.html":{},"controllers/UsersController.html":{}}}],["auth.controller",{"_index":573,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.decorator",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":1295,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["auth.guard.ts:10",{"_index":1302,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:23",{"_index":1305,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":530,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":1816,"title":{},"body":{"modules/ServicesModule.html":{}}}],["auth/casl.config",{"_index":698,"title":{},"body":{"modules/ConfigModule.html":{}}}],["auth/decorators/use",{"_index":1642,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["auth/interface/request",{"_index":1644,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["auth/jwt.config",{"_index":696,"title":{},"body":{"modules/ConfigModule.html":{}}}],["authcontroller",{"_index":491,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authcontroller.prototype.authenticate.name",{"_index":548,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcontroller.prototype.signin.name",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticate",{"_index":494,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticate(undefined",{"_index":496,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticated",{"_index":501,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"interfaces/RequestWithAuthUser.html":{},"controllers/UsersController.html":{}}}],["authenticateduser",{"_index":1356,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authentication",{"_index":585,"title":{},"body":{"injectables/AuthService.html":{},"modules/ServicesModule.html":{},"classes/SignInResponse.html":{}}}],["authguard",{"_index":1309,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":1312,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["authguard('local",{"_index":1361,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["authmodule",{"_index":560,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/ServicesModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1529,"title":{},"body":{"entities/Post.html":{},"classes/PostResponse.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":100,"title":{},"body":{"classes/AddPostTable1678073082722.html":{},"classes/AlterTablesCascade1678096726170.html":{},"entities/Post.html":{},"classes/PostResponse.html":{}}}],["authorization",{"_index":603,"title":{},"body":{"injectables/AuthService.html":{}}}],["authors",{"_index":2659,"title":{},"body":{"license.html":{}}}],["authresponse",{"_index":514,"title":{"interfaces/AuthResponse.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{}}}],["authservice",{"_index":529,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"overview.html":{}}}],["authservice.prototype.signin.name",{"_index":617,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice.prototype.validateuser.name",{"_index":614,"title":{},"body":{"injectables/AuthService.html":{}}}],["authuser",{"_index":2315,"title":{},"body":{"controllers/UsersController.html":{}}}],["authuser.id",{"_index":2329,"title":{},"body":{"controllers/UsersController.html":{}}}],["auto_increment",{"_index":62,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["available",{"_index":1037,"title":{},"body":{"classes/ErrorResponse.html":{},"modules.html":{}}}],["avatar",{"_index":2113,"title":{},"body":{"classes/UpdateUserProfileAvatarRequest.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["avatarfile",{"_index":2169,"title":{},"body":{"entities/UserProfile.html":{},"controllers/UsersController.html":{}}}],["avatarfilefiltervalidator",{"_index":2255,"title":{},"body":{"controllers/UsersController.html":{}}}],["avatarfileid",{"_index":74,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{}}}],["await",{"_index":37,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/InitialMigration1668674726738.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileSeeder.html":{},"injectables/LocalStrategy.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"injectables/StoragesService.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":2596,"title":{},"body":{"index.html":{}}}],["base",{"_index":1133,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/enumerations.html":{}}}],["based",{"_index":652,"title":{},"body":{"modules/ConfigModule.html":{},"miscellaneous/functions.html":{}}}],["baseresponse",{"_index":1794,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["baseresponsebody",{"_index":1803,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["baseresponsebody.message",{"_index":1810,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["being",{"_index":1332,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["below",{"_index":2556,"title":{},"body":{"miscellaneous/functions.html":{}}}],["between",{"_index":1476,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["binary",{"_index":2115,"title":{},"body":{"classes/UpdateUserProfileAvatarRequest.html":{}}}],["bio",{"_index":148,"title":{},"body":{"classes/AddUserProfileTable1669618726311.html":{},"classes/CreateUserProfileRequest.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{}}}],["birth",{"_index":894,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/UserProfileResponse.html":{}}}],["birthdate",{"_index":151,"title":{},"body":{"classes/AddUserProfileTable1669618726311.html":{},"classes/CreateUserProfileRequest.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{}}}],["body",{"_index":781,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"controllers/PostsController.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"controllers/TopicsController.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":312,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/ConflictErrorResponse.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"miscellaneous/functions.html":{}}}],["boolean.transformer.util",{"_index":335,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{}}}],["boolean.transformer.util.ts",{"_index":2480,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":2472,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bootstrapping",{"_index":2495,"title":{},"body":{"miscellaneous/functions.html":{}}}],["browse",{"_index":2672,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2670,"title":{},"body":{"modules.html":{}}}],["builder.md",{"_index":1595,"title":{},"body":{"classes/PostSeeder.html":{}}}],["building",{"_index":2567,"title":{},"body":{"index.html":{}}}],["built",{"_index":770,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["business",{"_index":464,"title":{},"body":{"modules/AppModule.html":{}}}],["bypass",{"_index":1100,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["bypassed",{"_index":1225,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"miscellaneous/functions.html":{}}}],["c",{"_index":2610,"title":{},"body":{"license.html":{}}}],["cache",{"_index":471,"title":{},"body":{"modules/AppModule.html":{},"classes/CacheEnvironmentVariables.html":{},"modules/ConfigModule.html":{},"injectables/HttpCacheInterceptor.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["cache.interceptor",{"_index":482,"title":{},"body":{"modules/AppModule.html":{}}}],["cache.interceptor.ts",{"_index":1074,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cache.interceptor.ts:17",{"_index":1094,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cache.interceptor.ts:19",{"_index":1092,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cache/cache.config",{"_index":678,"title":{},"body":{"modules/ConfigModule.html":{}}}],["cache/redis",{"_index":680,"title":{},"body":{"modules/ConfigModule.html":{}}}],["cache_key_metadata",{"_index":1095,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cache_max",{"_index":629,"title":{},"body":{"classes/CacheEnvironmentVariables.html":{}}}],["cache_ttl",{"_index":630,"title":{},"body":{"classes/CacheEnvironmentVariables.html":{}}}],["cacheconfig",{"_index":634,"title":{},"body":{"classes/CacheEnvironmentVariables.html":{},"modules/ConfigModule.html":{}}}],["cached",{"_index":1102,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"miscellaneous/functions.html":{}}}],["cached.decorator",{"_index":406,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/StoragesController.html":{}}}],["cached.decorator.ts",{"_index":2488,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cachedroutes",{"_index":1089,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cacheenvironmentvariables",{"_index":627,"title":{"classes/CacheEnvironmentVariables.html":{}},"body":{"classes/CacheEnvironmentVariables.html":{}}}],["cacheinterceptor",{"_index":1087,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cachekey",{"_index":1080,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cachemanageroptions",{"_index":633,"title":{},"body":{"classes/CacheEnvironmentVariables.html":{},"modules/ConfigModule.html":{}}}],["cachemetadata",{"_index":1110,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cachemodule",{"_index":657,"title":{},"body":{"modules/ConfigModule.html":{}}}],["cachemodule.registerasync",{"_index":714,"title":{},"body":{"modules/ConfigModule.html":{}}}],["cachestore",{"_index":668,"title":{},"body":{"modules/ConfigModule.html":{}}}],["caching",{"_index":1101,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["call",{"_index":422,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["callhandler",{"_index":1482,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["carries",{"_index":731,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/LocalFileIdParam.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"controllers/PostsController.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"classes/SuccessResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"controllers/TopicsController.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"classes/UserIdParam.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{},"controllers/UsersController.html":{}}}],["cascade",{"_index":116,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"entities/LocalFile.html":{},"entities/Post.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"entities/User.html":{},"entities/UserProfile.html":{}}}],["cascade'})@joincolumn",{"_index":1375,"title":{},"body":{"entities/LocalFile.html":{},"entities/Post.html":{}}}],["cascade'})@joincolumn({name",{"_index":2182,"title":{},"body":{"entities/UserProfile.html":{}}}],["cascade'})@jointable({name",{"_index":1539,"title":{},"body":{"entities/Post.html":{}}}],["cases",{"_index":1038,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/SuccessResponse.html":{}}}],["casl",{"_index":662,"title":{},"body":{"modules/ConfigModule.html":{},"injectables/PostByIdHook.html":{},"modules/PostsModule.html":{},"injectables/TopicByIdHook.html":{},"modules/TopicsModule.html":{},"injectables/UserByIdHook.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["casl#subject",{"_index":1559,"title":{},"body":{"injectables/PostByIdHook.html":{},"injectables/TopicByIdHook.html":{},"injectables/UserByIdHook.html":{}}}],["caslconfig",{"_index":697,"title":{},"body":{"modules/ConfigModule.html":{}}}],["caslmodule",{"_index":661,"title":{},"body":{"modules/ConfigModule.html":{},"modules/PostsModule.html":{},"modules/TopicsModule.html":{},"modules/UsersModule.html":{}}}],["caslmodule.forfeature",{"_index":1697,"title":{},"body":{"modules/PostsModule.html":{},"modules/TopicsModule.html":{},"modules/UsersModule.html":{}}}],["caslmodule.forrootasync",{"_index":723,"title":{},"body":{"modules/ConfigModule.html":{}}}],["catch",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/PostsController.html":{},"interfaces/Response.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{}}}],["catch(exception",{"_index":1156,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1164,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catcherror",{"_index":1921,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["catcherror((err",{"_index":1930,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["category",{"_index":99,"title":{},"body":{"classes/AddPostTable1678073082722.html":{},"classes/AddTopicTable1678958507781.html":{}}}],["change",{"_index":201,"title":{},"body":{"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["charge",{"_index":2618,"title":{},"body":{"license.html":{}}}],["children",{"_index":2089,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["claim",{"_index":2662,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"classes/SuccessResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"classes/UserIdParam.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{}},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"modules/ServicesModule.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["classconstructor",{"_index":2510,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classdecorator",{"_index":289,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"classes/SuccessResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"classes/UserIdParam.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"overview.html":{}}}],["client",{"_index":270,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"miscellaneous/typealiases.html":{}}}],["cluster_appmodule",{"_index":447,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":448,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":561,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":563,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":562,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_commonservicesmodule",{"_index":640,"title":{},"body":{"modules/CommonServicesModule.html":{},"overview.html":{}}}],["cluster_commonservicesmodule_imports",{"_index":641,"title":{},"body":{"modules/CommonServicesModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1688,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1690,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":1689,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_servicesmodule",{"_index":1811,"title":{},"body":{"modules/ServicesModule.html":{},"overview.html":{}}}],["cluster_servicesmodule_imports",{"_index":1812,"title":{},"body":{"modules/ServicesModule.html":{},"overview.html":{}}}],["cluster_storagesmodule",{"_index":1854,"title":{},"body":{"modules/StoragesModule.html":{},"overview.html":{}}}],["cluster_storagesmodule_exports",{"_index":1855,"title":{},"body":{"modules/StoragesModule.html":{},"overview.html":{}}}],["cluster_storagesmodule_providers",{"_index":1856,"title":{},"body":{"modules/StoragesModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":1895,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_providers",{"_index":1896,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_topicsmodule",{"_index":2025,"title":{},"body":{"modules/TopicsModule.html":{},"overview.html":{}}}],["cluster_topicsmodule_exports",{"_index":2026,"title":{},"body":{"modules/TopicsModule.html":{},"overview.html":{}}}],["cluster_topicsmodule_providers",{"_index":2027,"title":{},"body":{"modules/TopicsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2330,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2332,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2331,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2333,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":738,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"miscellaneous/enumerations.html":{}}}],["code.enum",{"_index":764,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{}}}],["code.enum.ts",{"_index":2435,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["column",{"_index":49,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"entities/LocalFile.html":{},"entities/Post.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"entities/Topic.html":{},"entities/User.html":{},"entities/UserProfile.html":{}}}],["column('datetime",{"_index":2133,"title":{},"body":{"entities/User.html":{}}}],["column('enum",{"_index":1367,"title":{},"body":{"entities/LocalFile.html":{}}}],["column('set",{"_index":2142,"title":{},"body":{"entities/User.html":{}}}],["column('uuid",{"_index":1377,"title":{},"body":{"entities/LocalFile.html":{},"entities/Post.html":{},"entities/UserProfile.html":{}}}],["column('varchar",{"_index":2173,"title":{},"body":{"entities/UserProfile.html":{}}}],["column({unique",{"_index":1950,"title":{},"body":{"entities/Topic.html":{},"entities/User.html":{}}}],["combination",{"_index":2559,"title":{},"body":{"miscellaneous/functions.html":{}}}],["combine",{"_index":2545,"title":{},"body":{"miscellaneous/functions.html":{}}}],["common",{"_index":645,"title":{},"body":{"modules/CommonServicesModule.html":{}}}],["common/constants",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["common/decorators/interceptors/not",{"_index":405,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/StoragesController.html":{}}}],["common/decorators/open",{"_index":410,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["common/dto/responses/success",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["common/dto/responses/timestamp",{"_index":1582,"title":{},"body":{"classes/PostResponse.html":{},"classes/TopicResponse.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{}}}],["common/entities/generic.entity",{"_index":1382,"title":{},"body":{"entities/LocalFile.html":{},"entities/Post.html":{},"entities/Topic.html":{},"entities/User.html":{},"entities/UserProfile.html":{}}}],["common/exceptions/conflict.exception",{"_index":1641,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["common/exceptions/internal",{"_index":525,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["common/exceptions/not",{"_index":1401,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/PostByIdPipe.html":{},"controllers/StoragesController.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["common/exceptions/unauthorized.exception",{"_index":1311,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["common/exceptions/unprocessable",{"_index":1403,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["common/interceptors/http",{"_index":481,"title":{},"body":{"modules/AppModule.html":{}}}],["common/services/common",{"_index":483,"title":{},"body":{"modules/AppModule.html":{}}}],["common/utils/transformers/to",{"_index":334,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["common/utils/validators/is",{"_index":339,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["commonservicesmodule",{"_index":449,"title":{"modules/CommonServicesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonServicesModule.html":{},"modules.html":{},"overview.html":{}}}],["compare",{"_index":1221,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"miscellaneous/functions.html":{}}}],["compression",{"_index":2403,"title":{},"body":{"dependencies.html":{}}}],["condition",{"_index":790,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["conditions",{"_index":1552,"title":{},"body":{"injectables/PostByIdHook.html":{},"injectables/TopicByIdHook.html":{},"injectables/UserByIdHook.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["config",{"_index":594,"title":{},"body":{"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/JwtStrategy.html":{}}}],["config/config.module",{"_index":485,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":450,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":591,"title":{},"body":{"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('cache",{"_index":716,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('casl",{"_index":724,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('database",{"_index":713,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('jwt",{"_index":722,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('jwt')?.secret",{"_index":1353,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt')?.signoptions",{"_index":1351,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('local",{"_index":720,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('logger",{"_index":711,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('rate",{"_index":726,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('redis",{"_index":715,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configuration",{"_index":317,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"modules/AppModule.html":{},"classes/CacheEnvironmentVariables.html":{},"modules/ConfigModule.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["configured",{"_index":1916,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["conflict",{"_index":250,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["conflicterrorresponse",{"_index":727,"title":{"classes/ConflictErrorResponse.html":{}},"body":{"classes/ConflictErrorResponse.html":{}}}],["conflictexception",{"_index":767,"title":{"classes/ConflictException.html":{}},"body":{"classes/ConflictException.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["conflictexception()`the",{"_index":777,"title":{},"body":{"classes/ConflictException.html":{}}}],["connection",{"_index":2668,"title":{},"body":{"license.html":{}}}],["const",{"_index":285,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateUserRequest.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ForbiddenException.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundException.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/PostsService.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TooManyRequestsException.html":{},"injectables/TopicByIdPipe.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constants",{"_index":791,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenException.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TooManyRequestsException.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["constraint",{"_index":78,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["constraint(s",{"_index":2387,"title":{},"body":{"interfaces/ValidationErrors.html":{}}}],["constraints",{"_index":1210,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"classes/UnprocessableEntityException.html":{},"interfaces/ValidationErrors.html":{}}}],["constructor",{"_index":416,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundException.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TooManyRequestsException.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(errorresponse",{"_index":773,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["constructor(logger",{"_index":588,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"injectables/TopicsService.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"injectables/UsersService.html":{}}}],["constructor(partial",{"_index":1033,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/GenericEntity.html":{},"classes/SuccessResponse.html":{}}}],["constructor(postsservice",{"_index":1276,"title":{},"body":{"injectables/IsPostExistValidator.html":{}}}],["constructor(private",{"_index":418,"title":{},"body":{"controllers/AppController.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/Response.html":{},"controllers/StoragesController.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["constructor(reflector",{"_index":1300,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["constructor(storagesservice",{"_index":1238,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{}}}],["constructor(topicsservice",{"_index":1257,"title":{},"body":{"injectables/IsNameUniqueValidator.html":{},"injectables/IsTopicExistValidator.html":{}}}],["constructor(usersservice",{"_index":1190,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["contains",{"_index":456,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"entities/LocalFile.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"entities/Post.html":{},"classes/PostResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"modules/ServicesModule.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"classes/SuccessResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"classes/TopicResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"entities/User.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/functions.html":{}}}],["content",{"_index":98,"title":{},"body":{"classes/AddPostTable1678073082722.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"classes/CreatePostRequest.html":{},"classes/NoContentSuccessResponse.html":{},"entities/Post.html":{},"classes/PostResponse.html":{},"controllers/StoragesController.html":{},"miscellaneous/enumerations.html":{}}}],["contenttoolarge",{"_index":803,"title":{},"body":{"classes/ContentTooLargeException.html":{}}}],["contenttoolargeexception",{"_index":800,"title":{"classes/ContentTooLargeException.html":{}},"body":{"classes/ContentTooLargeException.html":{}}}],["contenttoolargeexception()`the",{"_index":805,"title":{},"body":{"classes/ContentTooLargeException.html":{}}}],["context",{"_index":282,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/functions.html":{}}}],["context.gethandler",{"_index":1105,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["context.switchtohttp",{"_index":1801,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":1097,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["context.switchtohttp().getrequest().url",{"_index":1491,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["contract",{"_index":2665,"title":{},"body":{"license.html":{}}}],["control",{"_index":664,"title":{},"body":{"modules/ConfigModule.html":{},"miscellaneous/enumerations.html":{}}}],["control.decorator",{"_index":1643,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["control.decorator.ts",{"_index":2493,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controlled",{"_index":2558,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controller",{"_index":277,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["controllers",{"_index":374,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":2405,"title":{},"body":{"dependencies.html":{}}}],["cookies",{"_index":2501,"title":{},"body":{"miscellaneous/functions.html":{}}}],["copies",{"_index":2638,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2621,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2609,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":2585,"title":{},"body":{"index.html":{}}}],["create",{"_index":58,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/InitialMigration1668674726738.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RemoveRoleTable1679272991389.html":{},"injectables/StoragesService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["create(post",{"_index":1707,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(topic",{"_index":2037,"title":{},"body":{"injectables/TopicsService.html":{}}}],["create(user",{"_index":2346,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":304,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"classes/CreatedSuccessResponse.html":{},"injectables/HttpCacheInterceptor.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createdat",{"_index":128,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/GenericEntity.html":{},"entities/LocalFile.html":{},"entities/Post.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/TimestampResponse.html":{},"entities/Topic.html":{},"entities/User.html":{},"entities/UserProfile.html":{}}}],["createdate",{"_index":2149,"title":{},"body":{"entities/User.html":{}}}],["createdatecolumn",{"_index":1070,"title":{},"body":{"classes/GenericEntity.html":{}}}],["createdfile",{"_index":1877,"title":{},"body":{"injectables/StoragesService.html":{}}}],["createdpost",{"_index":1728,"title":{},"body":{"injectables/PostsService.html":{}}}],["createdsuccessresponse",{"_index":961,"title":{"classes/CreatedSuccessResponse.html":{}},"body":{"classes/CreatedSuccessResponse.html":{}}}],["createdtopic",{"_index":2050,"title":{},"body":{"injectables/TopicsService.html":{}}}],["createduser",{"_index":2365,"title":{},"body":{"injectables/UsersService.html":{}}}],["createlocalfile",{"_index":1861,"title":{},"body":{"injectables/StoragesService.html":{}}}],["createlocalfile(file",{"_index":1866,"title":{},"body":{"injectables/StoragesService.html":{}}}],["createlocalfilerequest",{"_index":810,"title":{"classes/CreateLocalFileRequest.html":{}},"body":{"classes/CreateLocalFileRequest.html":{},"controllers/UsersController.html":{}}}],["createlocalfilerequest.toentity(avatar",{"_index":2327,"title":{},"body":{"controllers/UsersController.html":{}}}],["createpost",{"_index":1605,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(undefined",{"_index":1611,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostrequest",{"_index":844,"title":{"classes/CreatePostRequest.html":{}},"body":{"classes/CreatePostRequest.html":{},"controllers/PostsController.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{}}}],["createpostrequest.toentity(createpostrequest",{"_index":1660,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostrequest.topicids",{"_index":1662,"title":{},"body":{"controllers/PostsController.html":{}}}],["createquerybuilder",{"_index":1425,"title":{},"body":{"classes/LocalFileSeeder.html":{},"classes/PostSeeder.html":{},"classes/TopicSeeder.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{}}}],["creates",{"_index":1709,"title":{},"body":{"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["createtopic",{"_index":1979,"title":{},"body":{"controllers/TopicsController.html":{}}}],["createtopic(createtopicrequest",{"_index":1984,"title":{},"body":{"controllers/TopicsController.html":{}}}],["createtopicrequest",{"_index":875,"title":{"classes/CreateTopicRequest.html":{}},"body":{"classes/CreateTopicRequest.html":{},"controllers/TopicsController.html":{},"classes/UpdateTopicRequest.html":{}}}],["createtopicrequest.toentity(createtopicrequest",{"_index":2011,"title":{},"body":{"controllers/TopicsController.html":{}}}],["createuser",{"_index":2218,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserrequest",{"_index":2227,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserprofilerequest",{"_index":885,"title":{"classes/CreateUserProfileRequest.html":{}},"body":{"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/UpdateUserProfileRequest.html":{}}}],["createuserprofilerequest.toentity(profile",{"_index":960,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["createuserrequest",{"_index":921,"title":{"classes/CreateUserRequest.html":{}},"body":{"classes/CreateUserRequest.html":{},"classes/SignInRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"controllers/UsersController.html":{}}}],["createuserrequest.toentity(createuserrequest",{"_index":2284,"title":{},"body":{"controllers/UsersController.html":{}}}],["creation",{"_index":1067,"title":{},"body":{"classes/GenericEntity.html":{},"entities/LocalFile.html":{},"entities/Post.html":{},"classes/TimestampResponse.html":{},"entities/Topic.html":{},"entities/User.html":{},"entities/UserProfile.html":{}}}],["credential",{"_index":552,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{}}}],["cron",{"_index":1905,"title":{},"body":{"injectables/TasksService.html":{}}}],["cron(cronexpression.every_minute",{"_index":1903,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronexpression",{"_index":1908,"title":{},"body":{"injectables/TasksService.html":{}}}],["csurf",{"_index":2408,"title":{},"body":{"dependencies.html":{}}}],["csurfmiddleware",{"_index":2474,"title":{},"body":{"miscellaneous/functions.html":{}}}],["csurfmiddleware(req",{"_index":2497,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ctx",{"_index":1166,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["ctx.getrequest",{"_index":1168,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["ctx.getresponse",{"_index":1169,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["current",{"_index":2517,"title":{},"body":{"miscellaneous/functions.html":{}}}],["current_timestamp(6",{"_index":130,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["custom",{"_index":272,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["customprops",{"_index":1472,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["cycle",{"_index":1122,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["damages",{"_index":2663,"title":{},"body":{"license.html":{}}}],["data",{"_index":223,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/AuthController.html":{},"classes/ConflictErrorResponse.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/PostResponse.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RequestTimeoutErrorResponse.html":{},"interfaces/Response.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TimestampResponse.html":{},"interfaces/TokenPayload.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TopicResponse.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data/local",{"_index":1424,"title":{},"body":{"classes/LocalFileSeeder.html":{}}}],["data/posts.data",{"_index":1590,"title":{},"body":{"classes/PostSeeder.html":{}}}],["data/topics.data",{"_index":1974,"title":{},"body":{"classes/TopicSeeder.html":{}}}],["data/user",{"_index":2200,"title":{},"body":{"classes/UserProfileSeeder.html":{}}}],["data/users.data",{"_index":2213,"title":{},"body":{"classes/UserSeeder.html":{}}}],["database",{"_index":656,"title":{},"body":{"modules/ConfigModule.html":{},"classes/DatabaseEnvironmentVariables.html":{}}}],["database/data/local",{"_index":829,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"classes/LocalFileIdParam.html":{},"classes/UserProfileResponse.html":{}}}],["database/data/posts.data",{"_index":862,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{}}}],["database/data/topics.data",{"_index":864,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/PostResponse.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{}}}],["database/data/user",{"_index":908,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/UserProfileResponse.html":{}}}],["database/data/users.data",{"_index":940,"title":{},"body":{"classes/CreateUserRequest.html":{},"classes/PostResponse.html":{},"classes/UpdateUserRequest.html":{},"classes/UserIdParam.html":{},"classes/UserResponse.html":{}}}],["database/database.config",{"_index":675,"title":{},"body":{"modules/ConfigModule.html":{}}}],["database/migrations/*{.ts,.js",{"_index":1011,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["database_host",{"_index":974,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["database_name",{"_index":975,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["database_password",{"_index":976,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["database_port",{"_index":977,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["database_ssl",{"_index":978,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["database_username",{"_index":979,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["databaseconfig",{"_index":674,"title":{},"body":{"modules/ConfigModule.html":{},"classes/DatabaseEnvironmentVariables.html":{}}}],["databaseenvironmentvariables",{"_index":972,"title":{"classes/DatabaseEnvironmentVariables.html":{}},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["datasource",{"_index":1421,"title":{},"body":{"classes/LocalFileSeeder.html":{},"classes/PostSeeder.html":{},"classes/TopicSeeder.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{}}}],["datasourceoptions",{"_index":677,"title":{},"body":{"modules/ConfigModule.html":{},"classes/DatabaseEnvironmentVariables.html":{}}}],["date",{"_index":622,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserProfileRequest.html":{},"classes/GenericEntity.html":{},"classes/TimestampResponse.html":{},"entities/User.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{}}}],["date().toisostring",{"_index":1804,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["date.now",{"_index":1495,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["datetime",{"_index":152,"title":{},"body":{"classes/AddUserProfileTable1669618726311.html":{}}}],["datetime(6",{"_index":129,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/RemoveRoleTable1679272991389.html":{},"entities/User.html":{}}}],["deal",{"_index":2625,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2669,"title":{},"body":{"license.html":{}}}],["debug",{"_index":318,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["decorator",{"_index":273,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/PostByIdHook.html":{},"injectables/TopicByIdHook.html":{},"injectables/UserByIdHook.html":{},"miscellaneous/functions.html":{}}}],["decorators",{"_index":379,"title":{},"body":{"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"controllers/AuthController.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/ConflictErrorResponse.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/GenericEntity.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/JwtEnvironmentVariables.html":{},"entities/LocalFile.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"entities/Post.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"controllers/PostsController.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"classes/SuccessResponse.html":{},"injectables/TasksService.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"entities/Topic.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"controllers/TopicsController.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserRequest.html":{},"entities/User.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["decorators/use",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{}}}],["default",{"_index":21,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"controllers/AppController.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorException.html":{},"classes/LocalFileSeeder.html":{},"classes/NotFoundException.html":{},"classes/PostSeeder.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutException.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"injectables/TasksService.html":{},"classes/TooManyRequestsException.html":{},"classes/TopicSeeder.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{},"miscellaneous/functions.html":{}}}],["default_conflict_message",{"_index":783,"title":{},"body":{"classes/ConflictException.html":{}}}],["default_content_too_large_message",{"_index":807,"title":{},"body":{"classes/ContentTooLargeException.html":{}}}],["default_forbidden_message",{"_index":1061,"title":{},"body":{"classes/ForbiddenException.html":{}}}],["default_help_message",{"_index":747,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{}}}],["default_internal_server_error_message",{"_index":1185,"title":{},"body":{"classes/InternalServerErrorException.html":{}}}],["default_not_found_message",{"_index":1513,"title":{},"body":{"classes/NotFoundException.html":{}}}],["default_request_timeout_message",{"_index":1787,"title":{},"body":{"classes/RequestTimeoutException.html":{}}}],["default_too_many_requests_message",{"_index":1162,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/TooManyRequestsException.html":{}}}],["default_unauthorized_message",{"_index":2074,"title":{},"body":{"classes/UnauthorizedException.html":{}}}],["default_unprocessable_entity_message",{"_index":2085,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["defaultmessage",{"_index":1189,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["defaultmessage(validationarguments",{"_index":1192,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["defines",{"_index":219,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"entities/LocalFile.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"modules/ServicesModule.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TimestampResponse.html":{},"interfaces/TokenPayload.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["defining",{"_index":1386,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["delete",{"_index":83,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"injectables/HttpCacheInterceptor.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"injectables/StoragesService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["delete(':id",{"_index":1677,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@useaccesscontrol(postactions.delete",{"_index":1617,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete(':id')@useaccesscontrol(topicactions.delete",{"_index":1989,"title":{},"body":{"controllers/TopicsController.html":{}}}],["delete(':id')@useaccesscontrol(useractions.delete",{"_index":2232,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(id",{"_index":1710,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["deleted",{"_index":1621,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["deletelocalfile",{"_index":1862,"title":{},"body":{"injectables/StoragesService.html":{}}}],["deletelocalfile(id",{"_index":1868,"title":{},"body":{"injectables/StoragesService.html":{}}}],["deletepost",{"_index":1606,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(undefined",{"_index":1615,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletes",{"_index":1712,"title":{},"body":{"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["deletetopic",{"_index":1980,"title":{},"body":{"controllers/TopicsController.html":{}}}],["deletetopic(undefined",{"_index":1988,"title":{},"body":{"controllers/TopicsController.html":{}}}],["deleteuser",{"_index":2219,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(undefined",{"_index":2231,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":446,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonServicesModule.html":{},"modules/PostsModule.html":{},"modules/ServicesModule.html":{},"modules/StoragesModule.html":{},"modules/TasksModule.html":{},"modules/TopicsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depending",{"_index":281,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"miscellaneous/functions.html":{}}}],["describing",{"_index":789,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["description",{"_index":154,"title":{},"body":{"classes/AddUserProfileTable1669618726311.html":{},"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"modules/ServicesModule.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TimestampResponse.html":{},"interfaces/TokenPayload.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["dest",{"_index":1440,"title":{},"body":{"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"controllers/UsersController.html":{}}}],["destination",{"_index":1437,"title":{},"body":{"classes/LocalFileUploadEnvironmentVariables.html":{}}}],["development",{"_index":342,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["disable",{"_index":1314,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/PostsService.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{},"injectables/UsersService.html":{}}}],["disabled",{"_index":1025,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["disposition",{"_index":1850,"title":{},"body":{"controllers/StoragesController.html":{}}}],["distribute",{"_index":2634,"title":{},"body":{"license.html":{}}}],["docsurl",{"_index":430,"title":{},"body":{"controllers/AppController.html":{}}}],["docsurl}/v${version",{"_index":433,"title":{},"body":{"controllers/AppController.html":{}}}],["docsurl}/v1",{"_index":432,"title":{},"body":{"controllers/AppController.html":{}}}],["documentation",{"_index":383,"title":{},"body":{"controllers/AppController.html":{},"license.html":{}}}],["doesn't",{"_index":1251,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{}}}],["don't",{"_index":1126,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["down",{"_index":16,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["down(queryrunner",{"_index":25,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["drop",{"_index":48,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["dto",{"_index":730,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/LocalFileIdParam.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"controllers/PostsController.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"classes/SuccessResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"controllers/TopicsController.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"classes/UserIdParam.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{},"controllers/UsersController.html":{}}}],["dto/requests/create",{"_index":1646,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TopicsController.html":{}}}],["dto/requests/sign",{"_index":538,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/requests/update",{"_index":1647,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TopicsController.html":{}}}],["dto/requests/user",{"_index":2266,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/requests/users/create",{"_index":2263,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/requests/users/update",{"_index":2265,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/responses/error",{"_index":792,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["dto/responses/post",{"_index":1648,"title":{},"body":{"controllers/PostsController.html":{}}}],["dto/responses/sign",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/responses/success",{"_index":1792,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["dto/responses/topic",{"_index":2002,"title":{},"body":{"controllers/TopicsController.html":{}}}],["dto/responses/users/user",{"_index":2273,"title":{},"body":{"controllers/UsersController.html":{}}}],["due",{"_index":1026,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["e.g",{"_index":1140,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["e2e",{"_index":2583,"title":{},"body":{"index.html":{}}}],["each",{"_index":852,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/CreateUserRequest.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["ed",{"_index":2524,"title":{},"body":{"miscellaneous/functions.html":{}}}],["efficient",{"_index":2568,"title":{},"body":{"index.html":{}}}],["email",{"_index":155,"title":{},"body":{"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/CreateUserRequest.html":{},"injectables/IsEmailUniqueValidator.html":{},"classes/UpdateUserRequest.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["embed",{"_index":2499,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enabled",{"_index":2549,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encapsulates",{"_index":274,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{}}}],["endpoint",{"_index":384,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["endpoints",{"_index":1083,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["engine=innodb",{"_index":72,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["entities",{"_index":1007,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"entities/LocalFile.html":{},"entities/Post.html":{},"entities/Topic.html":{},"entities/User.html":{},"entities/UserProfile.html":{},"overview.html":{}}}],["entities/local",{"_index":831,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"injectables/LocalFileByIdPipe.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{}}}],["entities/post.entity",{"_index":868,"title":{},"body":{"classes/CreatePostRequest.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdatePostRequest.html":{}}}],["entities/topic.entity",{"_index":879,"title":{},"body":{"classes/CreateTopicRequest.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"classes/UpdateTopicRequest.html":{}}}],["entities/user",{"_index":910,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entities/user.entity",{"_index":941,"title":{},"body":{"classes/CreateUserRequest.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":269,"title":{"entities/LocalFile.html":{},"entities/Post.html":{},"entities/Topic.html":{},"entities/User.html":{},"entities/UserProfile.html":{}},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/GenericEntity.html":{},"injectables/JwtStrategy.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileSeeder.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"injectables/PostByIdPipe.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"entities/Topic.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdPipe.html":{},"entities/UserProfile.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["entity.exception",{"_index":1404,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["entity.exception.ts",{"_index":2080,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["entity.exception.ts:16",{"_index":2082,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["entity{.ts,.js",{"_index":1009,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["enum",{"_index":67,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/ForbiddenException.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorException.html":{},"entities/LocalFile.html":{},"classes/NotFoundException.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":2429,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/file",{"_index":833,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"entities/LocalFile.html":{}}}],["enums/http/error",{"_index":763,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{}}}],["enums/user",{"_index":942,"title":{},"body":{"classes/CreateUserRequest.html":{},"entities/User.html":{},"classes/UserResponse.html":{}}}],["env",{"_index":340,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["env.cache_max",{"_index":639,"title":{},"body":{"classes/CacheEnvironmentVariables.html":{}}}],["env.cache_ttl",{"_index":637,"title":{},"body":{"classes/CacheEnvironmentVariables.html":{}}}],["env.database_host",{"_index":993,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["env.database_name",{"_index":997,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["env.database_password",{"_index":996,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["env.database_port",{"_index":994,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["env.database_ssl",{"_index":998,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["env.database_username",{"_index":995,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["env.debug",{"_index":372,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{}}}],["env.host",{"_index":370,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{}}}],["env.jwt_expires_in",{"_index":1328,"title":{},"body":{"classes/JwtEnvironmentVariables.html":{}}}],["env.jwt_secret",{"_index":1326,"title":{},"body":{"classes/JwtEnvironmentVariables.html":{}}}],["env.local_file_upload_dest",{"_index":1441,"title":{},"body":{"classes/LocalFileUploadEnvironmentVariables.html":{}}}],["env.logger_stream_buffer",{"_index":1469,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["env.logger_stream_destination",{"_index":1467,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["env.logger_stream_sync",{"_index":1471,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["env.node_env",{"_index":369,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{}}}],["env.port",{"_index":371,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{}}}],["env.redis_store_host",{"_index":1762,"title":{},"body":{"classes/RedisStoreEnvironmentVariables.html":{}}}],["env.redis_store_port",{"_index":1763,"title":{},"body":{"classes/RedisStoreEnvironmentVariables.html":{}}}],["env.throttler_limit",{"_index":1753,"title":{},"body":{"classes/RateLimitingEnvironmentVariables.html":{}}}],["env.throttler_ttl",{"_index":1751,"title":{},"body":{"classes/RateLimitingEnvironmentVariables.html":{}}}],["environment",{"_index":319,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["environment.production",{"_index":1004,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{}}}],["environments",{"_index":653,"title":{},"body":{"modules/ConfigModule.html":{}}}],["environmentvariables",{"_index":2514,"title":{},"body":{"miscellaneous/functions.html":{}}}],["envvariablesclass",{"_index":2509,"title":{},"body":{"miscellaneous/functions.html":{}}}],["equal",{"_index":1223,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"miscellaneous/functions.html":{}}}],["equals",{"_index":1224,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"miscellaneous/functions.html":{}}}],["err",{"_index":1308,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/TimeoutInterceptor.html":{}}}],["error",{"_index":217,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"controllers/AuthController.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"controllers/PostsController.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"controllers/StoragesController.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"controllers/TopicsController.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"controllers/UsersController.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["error.children.length",{"_index":2094,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["error.exception",{"_index":526,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["error.exception.ts",{"_index":1181,"title":{},"body":{"classes/InternalServerErrorException.html":{}}}],["error.exception.ts:14",{"_index":1182,"title":{},"body":{"classes/InternalServerErrorException.html":{}}}],["error.property",{"_index":2092,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["errorcode",{"_index":740,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"miscellaneous/enumerations.html":{}}}],["errorcode.conflict",{"_index":787,"title":{},"body":{"classes/ConflictException.html":{}}}],["errorcode.errorconflict",{"_index":766,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{}}}],["errorcode.errorcontenttoolarge",{"_index":808,"title":{},"body":{"classes/ContentTooLargeException.html":{}}}],["errorcode.errorforbidden",{"_index":1055,"title":{},"body":{"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{}}}],["errorcode.errorinternalservererror",{"_index":1036,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{}}}],["errorcode.errornotfound",{"_index":1507,"title":{},"body":{"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{}}}],["errorcode.errorrequesttimeout",{"_index":1780,"title":{},"body":{"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{}}}],["errorcode.errortoomanyrequests",{"_index":1941,"title":{},"body":{"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{}}}],["errorcode.errorunauthorized",{"_index":2069,"title":{},"body":{"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{}}}],["errorcode.errorunprocessableentity",{"_index":2078,"title":{},"body":{"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{}}}],["errorconflict",{"_index":2456,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["errorcontenttoolarge",{"_index":2457,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["errorforbidden",{"_index":2453,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["errorinputvalidation",{"_index":2462,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["errorinternalservererror",{"_index":2461,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["errornotfound",{"_index":2454,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["errorrequesttimeout",{"_index":2455,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["errorresponse",{"_index":734,"title":{"classes/ErrorResponse.html":{}},"body":{"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{}}}],["errorresponse:21",{"_index":746,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{}}}],["errorresponse:27",{"_index":744,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{}}}],["errorresponse:31",{"_index":761,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{}}}],["errorresponse:37",{"_index":753,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{}}}],["errorresponse:43",{"_index":755,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{}}}],["errorresponse:49",{"_index":750,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{}}}],["errorresponse:61",{"_index":748,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{}}}],["errorresponse?.error",{"_index":796,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["errorresponse?.help",{"_index":797,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["errorresponse?.message",{"_index":795,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["errors",{"_index":414,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"controllers/PostsController.html":{},"classes/RequestTimeoutException.html":{},"controllers/StoragesController.html":{},"classes/TooManyRequestsException.html":{},"controllers/TopicsController.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"controllers/UsersController.html":{}}}],["errors.interface",{"_index":1049,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/UnprocessableEntityException.html":{}}}],["errors.interface.ts",{"_index":2386,"title":{},"body":{"interfaces/ValidationErrors.html":{}}}],["errors.map((error",{"_index":2091,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["errors/api",{"_index":249,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{}}}],["errortoomanyrequests",{"_index":2460,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["errorunauthorized",{"_index":2452,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["errorunprocessableentity",{"_index":2459,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["eslint",{"_index":1313,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/PostsService.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{},"injectables/UsersService.html":{}}}],["eslint/no",{"_index":1316,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/PostsService.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{},"injectables/UsersService.html":{}}}],["event",{"_index":1121,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"license.html":{}}}],["ex",{"_index":2522,"title":{},"body":{"miscellaneous/functions.html":{}}}],["exactly",{"_index":2147,"title":{},"body":{"entities/User.html":{}}}],["example",{"_index":742,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"classes/LocalFileIdParam.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"classes/SuccessResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UserIdParam.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{},"miscellaneous/functions.html":{}}}],["examples",{"_index":932,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["exceed",{"_index":1913,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["exception",{"_index":769,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"classes/TooManyRequestsException.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["exception.filter.ts",{"_index":1149,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:22",{"_index":1154,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:36",{"_index":1158,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":1170,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":1153,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter.catch",{"_index":1160,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/ParseIntPipe.html":{}}}],["exceptions",{"_index":771,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["exceptions/request",{"_index":1925,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["exceptions/unprocessable",{"_index":1522,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["exceptions](https://docs.nestjs.com/exception",{"_index":793,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["exclude",{"_index":2145,"title":{},"body":{"entities/User.html":{}}}],["exclude()@column",{"_index":2136,"title":{},"body":{"entities/User.html":{}}}],["execute",{"_index":1430,"title":{},"body":{"classes/LocalFileSeeder.html":{},"classes/PostSeeder.html":{},"classes/TopicSeeder.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{}}}],["executioncontext",{"_index":1091,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["exist",{"_index":1252,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{}}}],["exist.validator",{"_index":867,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/LocalFileIdParam.html":{},"classes/PostIdParam.html":{},"modules/PostsModule.html":{},"modules/StoragesModule.html":{},"classes/TopicIdParam.html":{},"modules/TopicsModule.html":{},"classes/UserIdParam.html":{},"modules/UsersModule.html":{}}}],["exist.validator.ts",{"_index":1236,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"miscellaneous/functions.html":{}}}],["exist.validator.ts:17",{"_index":1240,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{}}}],["exist.validator.ts:32",{"_index":1243,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{}}}],["exist.validator.ts:46",{"_index":1279,"title":{},"body":{"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{}}}],["exist.validator.ts:48",{"_index":1242,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{}}}],["existence",{"_index":1244,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{}}}],["existing",{"_index":1220,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"miscellaneous/functions.html":{}}}],["exists",{"_index":390,"title":{},"body":{"controllers/AppController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/PostByIdHook.html":{},"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicsService.html":{},"injectables/UserByIdHook.html":{},"injectables/UsersService.html":{}}}],["expiration",{"_index":1825,"title":{},"body":{"classes/SignInResponse.html":{}}}],["expiresin",{"_index":580,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"classes/SignInResponse.html":{}}}],["export",{"_index":36,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"modules/ServicesModule.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TimestampResponse.html":{},"interfaces/TokenPayload.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrors.html":{}}}],["exports",{"_index":576,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/StoragesModule.html":{},"modules/TopicsModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":397,"title":{},"body":{"controllers/AppController.html":{},"modules/ConfigModule.html":{},"classes/HttpExceptionFilter.html":{},"controllers/StoragesController.html":{},"dependencies.html":{},"license.html":{}}}],["express.multer.file",{"_index":824,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"controllers/UsersController.html":{}}}],["express/multer/interfaces/multer",{"_index":693,"title":{},"body":{"modules/ConfigModule.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{}}}],["extend",{"_index":2534,"title":{},"body":{"miscellaneous/functions.html":{}}}],["extending",{"_index":1129,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["extends",{"_index":733,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"entities/LocalFile.html":{},"injectables/LocalStrategy.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"entities/Post.html":{},"classes/PostResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/RequestWithAuthUser.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"classes/TopicResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{}}}],["extension",{"_index":990,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"classes/LocalFileSeeder.html":{},"classes/PostSeeder.html":{},"classes/TopicSeeder.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{},"dependencies.html":{}}}],["extractjwt",{"_index":1342,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1349,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyj1c2vybmftzsi6invzzxiilcjzdwiiojisimlhdci6mty3nja5mza5mcwizxhwijoxnjc2mtc5ndkwfq.mhtzvdjfigbqh2z126irt7l_nncx8avrsualan5qjex",{"_index":1826,"title":{},"body":{"classes/SignInResponse.html":{}}}],["factories",{"_index":1029,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["fail",{"_index":1391,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{},"interfaces/ValidationErrors.html":{}}}],["false",{"_index":754,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtStrategy.html":{},"classes/NotFoundErrorResponse.html":{},"injectables/PostsService.html":{},"classes/RequestTimeoutErrorResponse.html":{},"injectables/StoragesService.html":{},"classes/TooManyRequestsErrorResponse.html":{},"injectables/TopicsService.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["farista",{"_index":2612,"title":{},"body":{"license.html":{},"properties.html":{}}}],["field",{"_index":1227,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"miscellaneous/functions.html":{}}}],["fieldname",{"_index":2540,"title":{},"body":{"miscellaneous/functions.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"modules/ServicesModule.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TimestampResponse.html":{},"interfaces/TokenPayload.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["file'})@apisuccessesresponse(['undefined'])@apierrorsresponse(['undefined",{"_index":1836,"title":{},"body":{"controllers/StoragesController.html":{}}}],["file.decorator",{"_index":2275,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.entity",{"_index":832,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileSeeder.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"entities/UserProfile.html":{}}}],["file.entity.ts",{"_index":1363,"title":{},"body":{"entities/LocalFile.html":{}}}],["file.entity.ts:30",{"_index":1370,"title":{},"body":{"entities/LocalFile.html":{}}}],["file.entity.ts:33",{"_index":1366,"title":{},"body":{"entities/LocalFile.html":{}}}],["file.entity.ts:36",{"_index":1372,"title":{},"body":{"entities/LocalFile.html":{}}}],["file.entity.ts:39",{"_index":1371,"title":{},"body":{"entities/LocalFile.html":{}}}],["file.entity.ts:42",{"_index":1368,"title":{},"body":{"entities/LocalFile.html":{}}}],["file.entity.ts:45",{"_index":1378,"title":{},"body":{"entities/LocalFile.html":{}}}],["file.entity.ts:49",{"_index":1376,"title":{},"body":{"entities/LocalFile.html":{}}}],["file.mimetype",{"_index":841,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"controllers/StoragesController.html":{}}}],["file.originalname",{"_index":839,"title":{},"body":{"classes/CreateLocalFileRequest.html":{}}}],["file.path",{"_index":840,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"controllers/StoragesController.html":{}}}],["file.seeder.ts",{"_index":1019,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"classes/LocalFileSeeder.html":{}}}],["file.seeder.ts:10",{"_index":1422,"title":{},"body":{"classes/LocalFileSeeder.html":{}}}],["filefilter",{"_index":2254,"title":{},"body":{"controllers/UsersController.html":{}}}],["filegeneralaccess",{"_index":817,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"entities/LocalFile.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["filegeneralaccess.public",{"_index":2328,"title":{},"body":{"controllers/UsersController.html":{}}}],["fileinterceptor",{"_index":2535,"title":{},"body":{"miscellaneous/functions.html":{}}}],["filename",{"_index":63,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/CreateLocalFileRequest.html":{},"entities/LocalFile.html":{}}}],["filename=\"${file.filename",{"_index":1852,"title":{},"body":{"controllers/StoragesController.html":{}}}],["files",{"_index":2624,"title":{},"body":{"license.html":{}}}],["files.data",{"_index":830,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/UserProfileResponse.html":{}}}],["filesize",{"_index":2319,"title":{},"body":{"controllers/UsersController.html":{}}}],["filter",{"_index":1151,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["filter.validator",{"_index":2278,"title":{},"body":{"controllers/UsersController.html":{}}}],["filters",{"_index":1152,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["filters#built",{"_index":794,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["filters/avatar",{"_index":2277,"title":{},"body":{"controllers/UsersController.html":{}}}],["filters](https://docs.nestjs.com/exception",{"_index":1163,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["find",{"_index":1713,"title":{},"body":{"injectables/PostsService.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":1701,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["findallposts",{"_index":1607,"title":{},"body":{"controllers/PostsController.html":{}}}],["findalltopics",{"_index":1981,"title":{},"body":{"controllers/TopicsController.html":{}}}],["findallusers",{"_index":2220,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyemail",{"_index":2339,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":2350,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid",{"_index":1702,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["findbyid(id",{"_index":1717,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["findbyids",{"_index":2033,"title":{},"body":{"injectables/TopicsService.html":{}}}],["findbyids(ids",{"_index":2042,"title":{},"body":{"injectables/TopicsService.html":{}}}],["findbyname",{"_index":2034,"title":{},"body":{"injectables/TopicsService.html":{}}}],["findbyname(name",{"_index":2044,"title":{},"body":{"injectables/TopicsService.html":{}}}],["findbyphone",{"_index":2340,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyphone(phone",{"_index":2353,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyusername",{"_index":2341,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyusername(username",{"_index":2355,"title":{},"body":{"injectables/UsersService.html":{}}}],["findlocalfilebyid",{"_index":1833,"title":{},"body":{"controllers/StoragesController.html":{},"injectables/StoragesService.html":{}}}],["findlocalfilebyid(file",{"_index":1834,"title":{},"body":{"controllers/StoragesController.html":{}}}],["findlocalfilebyid(id",{"_index":1870,"title":{},"body":{"injectables/StoragesService.html":{}}}],["findlocalfilebyid(value",{"_index":1249,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{}}}],["findpostbyid",{"_index":1608,"title":{},"body":{"controllers/PostsController.html":{}}}],["findpostbyid(post",{"_index":1625,"title":{},"body":{"controllers/PostsController.html":{}}}],["findtopicbyid",{"_index":1982,"title":{},"body":{"controllers/TopicsController.html":{}}}],["findtopicbyid(topic",{"_index":1995,"title":{},"body":{"controllers/TopicsController.html":{}}}],["finduserbyid",{"_index":2221,"title":{},"body":{"controllers/UsersController.html":{}}}],["finduserbyid(user",{"_index":2238,"title":{},"body":{"controllers/UsersController.html":{}}}],["finish",{"_index":2543,"title":{},"body":{"miscellaneous/functions.html":{}}}],["first",{"_index":889,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{}}}],["firstname",{"_index":43,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/CreateUserProfileRequest.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{}}}],["fitness",{"_index":2655,"title":{},"body":{"license.html":{}}}],["fk_1dc62b3a3dd9182d23a01bb0c31",{"_index":86,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{}}}],["fk_3f24071759ec6354b0259f9c4d1",{"_index":79,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{}}}],["fk_4fb14631257670efa14b15a3d86",{"_index":117,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["fk_776b7cf9330802e5ef5a8fb18dc",{"_index":115,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["fk_7c5dca0db8653a4c4efa3974a37",{"_index":140,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{}}}],["fk_89db8ec91d69803e1c35e871742",{"_index":1770,"title":{},"body":{"classes/RemovePostTitleAttribute1678285751957.html":{}}}],["fk_c6fb082a3114f35d0cc27c518e0",{"_index":101,"title":{},"body":{"classes/AddPostTable1678073082722.html":{},"classes/AlterTablesCascade1678096726170.html":{}}}],["fk_c7456e05d41b3df071726b7084a",{"_index":138,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{}}}],["fk_f44d0cd18cfd80b0fed7806c3b7",{"_index":157,"title":{},"body":{"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{}}}],["flag",{"_index":1202,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["follow",{"_index":457,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"modules/ServicesModule.html":{}}}],["following",{"_index":2642,"title":{},"body":{"license.html":{}}}],["forbidden",{"_index":253,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["forbiddenerrorresponse",{"_index":1052,"title":{"classes/ForbiddenErrorResponse.html":{}},"body":{"classes/ForbiddenErrorResponse.html":{}}}],["forbiddenexception",{"_index":1056,"title":{"classes/ForbiddenException.html":{}},"body":{"classes/ForbiddenException.html":{}}}],["forbiddenexception()`the",{"_index":1059,"title":{},"body":{"classes/ForbiddenException.html":{}}}],["foreign",{"_index":80,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["format",{"_index":1414,"title":{},"body":{"classes/LocalFileIdParam.html":{},"classes/PostIdParam.html":{},"classes/TopicIdParam.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UserIdParam.html":{}}}],["found",{"_index":258,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["found.exception",{"_index":1402,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/PostByIdPipe.html":{},"controllers/StoragesController.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["found.exception.ts",{"_index":1509,"title":{},"body":{"classes/NotFoundException.html":{}}}],["found.exception.ts:11",{"_index":1510,"title":{},"body":{"classes/NotFoundException.html":{}}}],["framework",{"_index":2566,"title":{},"body":{"index.html":{}}}],["free",{"_index":2617,"title":{},"body":{"license.html":{}}}],["fs",{"_index":1436,"title":{},"body":{"classes/LocalFileUploadEnvironmentVariables.html":{},"controllers/StoragesController.html":{}}}],["fs.createreadstream(path",{"_index":1848,"title":{},"body":{"controllers/StoragesController.html":{}}}],["fs.existssync(env.local_file_upload_dest",{"_index":1438,"title":{},"body":{"classes/LocalFileUploadEnvironmentVariables.html":{}}}],["fs.existssync(path",{"_index":1847,"title":{},"body":{"controllers/StoragesController.html":{}}}],["fs.mkdirsync(env.local_file_upload_dest",{"_index":1439,"title":{},"body":{"classes/LocalFileUploadEnvironmentVariables.html":{}}}],["full",{"_index":2168,"title":{},"body":{"entities/UserProfile.html":{},"properties.html":{}}}],["fullname",{"_index":2167,"title":{},"body":{"entities/UserProfile.html":{}}}],["function",{"_index":434,"title":{},"body":{"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/UnprocessableEntityException.html":{},"miscellaneous/functions.html":{}}}],["function](https://docs.nestjs.com/techniques/configuration#schema",{"_index":354,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["functions",{"_index":2471,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":2641,"title":{},"body":{"license.html":{}}}],["general",{"_index":348,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/CreateLocalFileRequest.html":{},"classes/JwtEnvironmentVariables.html":{},"entities/LocalFile.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["generalaccess",{"_index":66,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/CreateLocalFileRequest.html":{},"entities/LocalFile.html":{},"controllers/UsersController.html":{}}}],["generates",{"_index":598,"title":{},"body":{"injectables/AuthService.html":{}}}],["generic",{"_index":1065,"title":{},"body":{"classes/GenericEntity.html":{},"classes/SuccessResponse.html":{}}}],["genericentity",{"_index":1062,"title":{"classes/GenericEntity.html":{}},"body":{"classes/GenericEntity.html":{},"entities/LocalFile.html":{},"entities/Post.html":{},"entities/Topic.html":{},"entities/User.html":{},"entities/UserProfile.html":{}}}],["get(':id",{"_index":1666,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@useaccesscontrol(postactions.readbyid",{"_index":1626,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':id')@useaccesscontrol(topicactions.readbyid",{"_index":1996,"title":{},"body":{"controllers/TopicsController.html":{}}}],["get(':id')@useaccesscontrol(useractions.readbyid",{"_index":2239,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('docs",{"_index":424,"title":{},"body":{"controllers/AppController.html":{}}}],["get('docs')@nottobecached()@nottobetransformed()@redirect('https://docs.nestjs.com",{"_index":380,"title":{},"body":{"controllers/AppController.html":{}}}],["get('local/:id",{"_index":1843,"title":{},"body":{"controllers/StoragesController.html":{}}}],["get('local/:id')@nottobecached()@nottobetransformed()@apiuuidparam({name",{"_index":1835,"title":{},"body":{"controllers/StoragesController.html":{}}}],["get()@apisuccessesresponse(['undefined'])@apierrorsresponse",{"_index":393,"title":{},"body":{"controllers/AppController.html":{}}}],["get()@nottobecached()@usejwtauth()@apibearerauth()@apisuccessesresponse(['undefined'])@apierrorsresponse(['undefined",{"_index":498,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@useaccesscontrol(postactions.readall",{"_index":1622,"title":{},"body":{"controllers/PostsController.html":{}}}],["get()@useaccesscontrol(topicactions.readall",{"_index":1993,"title":{},"body":{"controllers/TopicsController.html":{}}}],["get()@useaccesscontrol(useractions.readall",{"_index":2236,"title":{},"body":{"controllers/UsersController.html":{}}}],["getdocs",{"_index":376,"title":{},"body":{"controllers/AppController.html":{}}}],["getdocs(req",{"_index":377,"title":{},"body":{"controllers/AppController.html":{}}}],["gets",{"_index":500,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostsService.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":2562,"title":{"index.html":{},"license.html":{}},"body":{}}],["given",{"_index":502,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["global",{"_index":467,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["going",{"_index":1229,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"miscellaneous/functions.html":{}}}],["granted",{"_index":2616,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2673,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":1098,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["grow",{"_index":2591,"title":{},"body":{"index.html":{}}}],["gt",{"_index":2523,"title":{},"body":{"miscellaneous/functions.html":{}}}],["guard",{"_index":475,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["guards",{"_index":1333,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["handle",{"_index":1496,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["handlecron",{"_index":1902,"title":{},"body":{"injectables/TasksService.html":{}}}],["handler",{"_index":280,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["handlerequest",{"_index":1299,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":1304,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["helmet",{"_index":2410,"title":{},"body":{"dependencies.html":{}}}],["help",{"_index":739,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{}}}],["hence",{"_index":1796,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["here",{"_index":2600,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":2615,"title":{},"body":{"license.html":{}}}],["hitting",{"_index":1493,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["hold",{"_index":347,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["holders",{"_index":2660,"title":{},"body":{"license.html":{}}}],["hook",{"_index":1549,"title":{},"body":{"injectables/PostByIdHook.html":{},"injectables/TopicByIdHook.html":{},"injectables/UserByIdHook.html":{},"miscellaneous/functions.html":{}}}],["hook](https://github.com/getjerry/nest",{"_index":1558,"title":{},"body":{"injectables/PostByIdHook.html":{},"injectables/TopicByIdHook.html":{},"injectables/UserByIdHook.html":{}}}],["hooks",{"_index":1550,"title":{},"body":{"injectables/PostByIdHook.html":{},"injectables/TopicByIdHook.html":{},"injectables/UserByIdHook.html":{}}}],["host",{"_index":320,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/HttpExceptionFilter.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["host.switchtohttp",{"_index":1167,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["http",{"_index":470,"title":{},"body":{"modules/AppModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["httpadapter",{"_index":1106,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequestmethod",{"_index":1109,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequestmethod(request",{"_index":1113,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequesturl(request",{"_index":1146,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequesturl(request).split('?')[0",{"_index":1137,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpcacheinterceptor",{"_index":469,"title":{"injectables/HttpCacheInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["httpcode",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200",{"_index":550,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":772,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["httpexception.createbody(response",{"_index":798,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["httpexceptionfilter",{"_index":1147,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["https://docs.nestjs.com/openapi/operations#advanced",{"_index":1893,"title":{},"body":{"classes/SuccessResponse.html":{}}}],["https://nestjs.com",{"_index":2605,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":737,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{}}}],["httpstatus.conflict",{"_index":765,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{}}}],["httpstatus.created",{"_index":971,"title":{},"body":{"classes/CreatedSuccessResponse.html":{}}}],["httpstatus.forbidden",{"_index":1054,"title":{},"body":{"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{}}}],["httpstatus.internal_server_error",{"_index":1050,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{}}}],["httpstatus.no_content",{"_index":1503,"title":{},"body":{"classes/NoContentSuccessResponse.html":{}}}],["httpstatus.not_found",{"_index":1506,"title":{},"body":{"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{}}}],["httpstatus.ok",{"_index":1517,"title":{},"body":{"classes/OkSuccessResponse.html":{},"classes/SuccessResponse.html":{}}}],["httpstatus.payload_too_large",{"_index":809,"title":{},"body":{"classes/ContentTooLargeException.html":{}}}],["httpstatus.request_timeout",{"_index":1779,"title":{},"body":{"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{}}}],["httpstatus.too_many_requests",{"_index":1940,"title":{},"body":{"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{}}}],["httpstatus.unauthorized",{"_index":2068,"title":{},"body":{"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{}}}],["httpstatus.unprocessable_entity",{"_index":2077,"title":{},"body":{"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{}}}],["id",{"_index":60,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/CreateLocalFileRequest.html":{},"classes/InitialMigration1668674726738.html":{},"entities/LocalFile.html":{},"classes/LocalFileIdParam.html":{},"entities/Post.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RemoveRoleTable1679272991389.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"entities/Topic.html":{},"classes/TopicIdParam.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"entities/User.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["id.hook",{"_index":1650,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["id.hook.ts",{"_index":1547,"title":{},"body":{"injectables/PostByIdHook.html":{},"injectables/TopicByIdHook.html":{},"injectables/UserByIdHook.html":{}}}],["id.hook.ts:17",{"_index":1554,"title":{},"body":{"injectables/PostByIdHook.html":{},"injectables/TopicByIdHook.html":{},"injectables/UserByIdHook.html":{}}}],["id.hook.ts:38",{"_index":1556,"title":{},"body":{"injectables/PostByIdHook.html":{},"injectables/TopicByIdHook.html":{},"injectables/UserByIdHook.html":{}}}],["id.param",{"_index":1970,"title":{},"body":{"classes/TopicResponse.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{}}}],["id.param.dto",{"_index":1585,"title":{},"body":{"classes/PostResponse.html":{},"classes/UpdatePostRequest.html":{}}}],["id.param.dto.ts",{"_index":1572,"title":{},"body":{"classes/PostIdParam.html":{}}}],["id.param.dto.ts:18",{"_index":1574,"title":{},"body":{"classes/PostIdParam.html":{}}}],["id.param.ts",{"_index":1412,"title":{},"body":{"classes/LocalFileIdParam.html":{},"classes/TopicIdParam.html":{},"classes/UserIdParam.html":{}}}],["id.param.ts:18",{"_index":1967,"title":{},"body":{"classes/TopicIdParam.html":{},"classes/UserIdParam.html":{}}}],["id.param.ts:19",{"_index":1415,"title":{},"body":{"classes/LocalFileIdParam.html":{}}}],["id.pipe",{"_index":1654,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["id.pipe.ts",{"_index":1385,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["id.pipe.ts:21",{"_index":1565,"title":{},"body":{"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["id.pipe.ts:23",{"_index":1395,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{}}}],["id.pipe.ts:38",{"_index":1398,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{}}}],["id.pipe.ts:39",{"_index":1566,"title":{},"body":{"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["identifier",{"_index":1222,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"miscellaneous/functions.html":{}}}],["identifierkey",{"_index":1211,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"miscellaneous/functions.html":{}}}],["ids",{"_index":847,"title":{},"body":{"classes/CreatePostRequest.html":{},"entities/Post.html":{},"classes/PostResponse.html":{},"injectables/TopicsService.html":{}}}],["idx_15f634a2dbf62a79bb726fc615",{"_index":132,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{}}}],["idx_3f24071759ec6354b0259f9c4d",{"_index":76,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{}}}],["idx_4fb14631257670efa14b15a3d8",{"_index":113,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["idx_776b7cf9330802e5ef5a8fb18d",{"_index":112,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["idx_78a916df40e02a9deb1c4b75ed",{"_index":202,"title":{},"body":{"classes/AlterTablesIdentifierToUuid1676872212399.html":{}}}],["idx_7c5dca0db8653a4c4efa3974a3",{"_index":137,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{}}}],["idx_8e1f623798118e629b46a9e629",{"_index":173,"title":{},"body":{"classes/AlterPhoneAttributeUniqueness1676900183425.html":{}}}],["idx_ae4578dcaed5adff96595e6166",{"_index":205,"title":{},"body":{"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["idx_c7456e05d41b3df071726b7084",{"_index":136,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{}}}],["idx_e12875dfb3b1d92d7d7c5377e2",{"_index":204,"title":{},"body":{"classes/AlterTablesIdentifierToUuid1676872212399.html":{}}}],["idx_f44d0cd18cfd80b0fed7806c3b",{"_index":172,"title":{},"body":{"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{}}}],["ie",{"_index":2519,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ignore",{"_index":956,"title":{},"body":{"classes/CreateUserRequest.html":{},"entities/LocalFile.html":{},"classes/LoggerEnvironmentVariables.html":{},"entities/Post.html":{},"entities/Topic.html":{},"entities/User.html":{},"entities/UserProfile.html":{}}}],["ignoreexpiration",{"_index":1350,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["immediately",{"_index":1111,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["implementation",{"_index":1150,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{},"miscellaneous/functions.html":{}}}],["implemented",{"_index":1339,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["implementing",{"_index":1334,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileSeeder.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostSeeder.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicSeeder.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{}}}],["implied",{"_index":2651,"title":{},"body":{"license.html":{}}}],["import",{"_index":34,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"modules/ServicesModule.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":476,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"modules/PostsModule.html":{},"modules/ServicesModule.html":{},"modules/StoragesModule.html":{},"modules/TopicsModule.html":{},"modules/UsersModule.html":{}}}],["in')@httpcode(200)@uselocalauth()@apibody({type",{"_index":508,"title":{},"body":{"controllers/AuthController.html":{}}}],["in(ids",{"_index":2056,"title":{},"body":{"injectables/TopicsService.html":{}}}],["included",{"_index":2646,"title":{},"body":{"license.html":{}}}],["including",{"_index":2628,"title":{},"body":{"license.html":{}}}],["incoming",{"_index":386,"title":{},"body":{"controllers/AppController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/functions.html":{}}}],["inconsistent",{"_index":1674,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/ConflictErrorResponse.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutErrorResponse.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TimestampResponse.html":{},"interfaces/TokenPayload.html":{},"classes/TooManyRequestsErrorResponse.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indicated",{"_index":1714,"title":{},"body":{"injectables/PostsService.html":{}}}],["indicates",{"_index":1203,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["infersubjects",{"_index":2692,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"modules/ServicesModule.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TimestampResponse.html":{},"interfaces/TokenPayload.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrors.html":{}}}],["inheritdoc",{"_index":1159,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TopicByIdPipe.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserByIdPipe.html":{}}}],["inherited",{"_index":743,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UpdateUserProfileAvatarRequest.html":{}}}],["initialmigration.ts",{"_index":1174,"title":{},"body":{"classes/InitialMigration1668674726738.html":{}}}],["initialmigration.ts:12",{"_index":1176,"title":{},"body":{"classes/InitialMigration1668674726738.html":{}}}],["initialmigration.ts:4",{"_index":1175,"title":{},"body":{"classes/InitialMigration1668674726738.html":{}}}],["initialmigration.ts:6",{"_index":1177,"title":{},"body":{"classes/InitialMigration1668674726738.html":{}}}],["initialmigration1668674726738",{"_index":1172,"title":{"classes/InitialMigration1668674726738.html":{}},"body":{"classes/InitialMigration1668674726738.html":{}}}],["inject",{"_index":709,"title":{},"body":{"modules/ConfigModule.html":{}}}],["injectable",{"_index":582,"title":{"injectables/AuthService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"injectables/StoragesService.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"injectables/UsersService.html":{}}}],["injectables",{"_index":583,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":1155,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["injectpinologger",{"_index":1161,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["injectpinologger(httpexceptionfilter.name",{"_index":1165,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["injectpinologger(logginginterceptor.name",{"_index":1490,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["injectrepository",{"_index":1724,"title":{},"body":{"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(localfile",{"_index":1874,"title":{},"body":{"injectables/StoragesService.html":{}}}],["injectrepository(post",{"_index":1725,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(topic",{"_index":2047,"title":{},"body":{"injectables/TopicsService.html":{}}}],["injectrepository(user",{"_index":2362,"title":{},"body":{"injectables/UsersService.html":{}}}],["inline",{"_index":1851,"title":{},"body":{"controllers/StoragesController.html":{}}}],["input",{"_index":2463,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["insert",{"_index":1426,"title":{},"body":{"classes/LocalFileSeeder.html":{},"classes/PostSeeder.html":{},"classes/TopicSeeder.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{}}}],["inside",{"_index":2152,"title":{},"body":{"entities/User.html":{}}}],["installation",{"_index":2573,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":2575,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1931,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["instantiate",{"_index":776,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["int",{"_index":61,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/InitialMigration1668674726738.html":{},"injectables/ParseIntPipe.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["int.pipe.ts",{"_index":1520,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["int.pipe.ts:19",{"_index":1521,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["intercept",{"_index":1479,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":1481,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercepting",{"_index":1793,"title":{},"body":{"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptor",{"_index":472,"title":{},"body":{"modules/AppModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/functions.html":{}}}],["interceptor.ts",{"_index":2484,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interceptors",{"_index":1478,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptors](https://docs.nestjs.com/interceptors",{"_index":1488,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":212,"title":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"interfaces/AuthResponse.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"interfaces/TokenPayload.html":{},"interfaces/ValidationErrors.html":{}},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"interfaces/AuthResponse.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"interfaces/ValidationErrors.html":{}}}],["interface/auth",{"_index":608,"title":{},"body":{"injectables/AuthService.html":{}}}],["interface/request",{"_index":542,"title":{},"body":{"controllers/AuthController.html":{}}}],["interface/token",{"_index":1343,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["interfaces",{"_index":214,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"interfaces/AuthResponse.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"interfaces/TokenPayload.html":{},"interfaces/ValidationErrors.html":{},"overview.html":{}}}],["interfaces/http/validation",{"_index":1048,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/UnprocessableEntityException.html":{}}}],["internal",{"_index":255,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"miscellaneous/enumerations.html":{}}}],["internalservererrorerrorresponse",{"_index":1178,"title":{"classes/InternalServerErrorErrorResponse.html":{}},"body":{"classes/InternalServerErrorErrorResponse.html":{}}}],["internalservererrorexception",{"_index":524,"title":{"classes/InternalServerErrorException.html":{}},"body":{"controllers/AuthController.html":{},"classes/InternalServerErrorException.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["internalservererrorexception()`the",{"_index":1183,"title":{},"body":{"classes/InternalServerErrorException.html":{}}}],["intersect",{"_index":1578,"title":{},"body":{"classes/PostResponse.html":{},"classes/TopicResponse.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{}}}],["intersectiontype",{"_index":1581,"title":{},"body":{"classes/PostResponse.html":{},"classes/TopicResponse.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{}}}],["into(localfile",{"_index":1427,"title":{},"body":{"classes/LocalFileSeeder.html":{}}}],["into(post",{"_index":1591,"title":{},"body":{"classes/PostSeeder.html":{}}}],["into(topic",{"_index":1975,"title":{},"body":{"classes/TopicSeeder.html":{}}}],["into(user",{"_index":2214,"title":{},"body":{"classes/UserSeeder.html":{}}}],["into(userprofile",{"_index":2201,"title":{},"body":{"classes/UserProfileSeeder.html":{}}}],["isarray",{"_index":311,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"classes/CreatePostRequest.html":{},"classes/CreateUserRequest.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"classes/UserResponse.html":{},"controllers/UsersController.html":{}}}],["isboolean",{"_index":327,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["isdatestring",{"_index":904,"title":{},"body":{"classes/CreateUserProfileRequest.html":{}}}],["isdefined",{"_index":987,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["isdefined()@isstring",{"_index":982,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["isemail",{"_index":936,"title":{},"body":{"classes/CreateUserRequest.html":{},"classes/UpdateUserRequest.html":{}}}],["isemailunique",{"_index":944,"title":{},"body":{"classes/CreateUserRequest.html":{},"injectables/IsEmailUniqueValidator.html":{},"classes/UpdateUserRequest.html":{},"miscellaneous/functions.html":{}}}],["isemailunique(&#39;id&#39",{"_index":2505,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isemailunique('id",{"_index":1226,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"classes/UpdateUserRequest.html":{}}}],["isemailunique(identifierkey",{"_index":2504,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isemailuniquevalidator",{"_index":1186,"title":{"injectables/IsEmailUniqueValidator.html":{}},"body":{"injectables/IsEmailUniqueValidator.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["isenum",{"_index":328,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreateUserRequest.html":{}}}],["isenum(environment",{"_index":357,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{}}}],["isenum(filegeneralaccess",{"_index":835,"title":{},"body":{"classes/CreateLocalFileRequest.html":{}}}],["isenum(userrole",{"_index":953,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["isenvvalid",{"_index":338,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["isenvvalid(env",{"_index":2507,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isenvvalid(process.env",{"_index":2513,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isfalse",{"_index":2478,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isfalse(value",{"_index":2516,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isgetrequest",{"_index":1112,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["isglobal",{"_index":707,"title":{},"body":{"modules/ConfigModule.html":{}}}],["ishttpapp",{"_index":1108,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["islocalfileexist",{"_index":1237,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{},"classes/LocalFileIdParam.html":{},"miscellaneous/functions.html":{}}}],["islocalfileexist(validationoptions",{"_index":1253,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{},"miscellaneous/functions.html":{}}}],["islocalfileexistvalidator",{"_index":1234,"title":{"injectables/IsLocalFileExistValidator.html":{}},"body":{"injectables/IsLocalFileExistValidator.html":{},"modules/StoragesModule.html":{},"overview.html":{}}}],["isnameunique",{"_index":880,"title":{},"body":{"classes/CreateTopicRequest.html":{},"injectables/IsNameUniqueValidator.html":{},"miscellaneous/functions.html":{}}}],["isnameunique(&#39;id&#39",{"_index":2526,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isnameunique('id",{"_index":1266,"title":{},"body":{"injectables/IsNameUniqueValidator.html":{}}}],["isnameunique(identifierkey",{"_index":2525,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isnameuniquevalidator",{"_index":1254,"title":{"injectables/IsNameUniqueValidator.html":{}},"body":{"injectables/IsNameUniqueValidator.html":{},"modules/TopicsModule.html":{},"overview.html":{}}}],["isnan(val",{"_index":1526,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isnotempty",{"_index":329,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/PostIdParam.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/SignInRequest.html":{},"classes/TopicIdParam.html":{},"classes/UpdateUserRequest.html":{},"classes/UserIdParam.html":{},"miscellaneous/functions.html":{}}}],["isnotempty()@isarray()@arraynotempty()@arrayunique()@isenum(userrole",{"_index":931,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["isnotempty()@isarray()@arraynotempty()@arrayunique()@isuuid('4",{"_index":851,"title":{},"body":{"classes/CreatePostRequest.html":{}}}],["isnotempty()@isboolean()@transform",{"_index":435,"title":{},"body":{"classes/AppEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{}}}],["isnotempty()@isdatestring({strict",{"_index":893,"title":{},"body":{"classes/CreateUserProfileRequest.html":{}}}],["isnotempty()@isenum(environment",{"_index":439,"title":{},"body":{"classes/AppEnvironmentVariables.html":{}}}],["isnotempty()@isenum(filegeneralaccess)@apiproperty({description",{"_index":818,"title":{},"body":{"classes/CreateLocalFileRequest.html":{}}}],["isnotempty()@isnumber()@transform",{"_index":441,"title":{},"body":{"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["isnotempty()@isstring",{"_index":437,"title":{},"body":{"classes/AppEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["isnotempty()@isstring()@apiproperty({description",{"_index":896,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/SignInRequest.html":{}}}],["isnotempty()@isstring()@isemail()@isemailunique('id')@apiproperty({description",{"_index":2121,"title":{},"body":{"classes/UpdateUserRequest.html":{}}}],["isnotempty()@isstring()@isemail()@isemailunique()@apiproperty({description",{"_index":923,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["isnotempty()@isstring()@islocalfileexist()@apiproperty({description",{"_index":1413,"title":{},"body":{"classes/LocalFileIdParam.html":{}}}],["isnotempty()@isstring()@isnameunique()@apiproperty({description",{"_index":877,"title":{},"body":{"classes/CreateTopicRequest.html":{}}}],["isnotempty()@isstring()@isphonenumber('id')@isphonenumberunique('id')@apiproperty({description",{"_index":2123,"title":{},"body":{"classes/UpdateUserRequest.html":{}}}],["isnotempty()@isstring()@isphonenumber('id')@isphonenumberunique()@apiproperty({description",{"_index":927,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["isnotempty()@isstring()@length(4",{"_index":848,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/CreateUserRequest.html":{},"classes/UpdateUserRequest.html":{}}}],["isnotempty()@isstring()@length(6)@apiproperty({description",{"_index":925,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["isnotempty()@isuuid('4')@apiproperty({description",{"_index":820,"title":{},"body":{"classes/CreateLocalFileRequest.html":{}}}],["isnotempty()@isuuid('4')@ispostexist()@apiproperty({description",{"_index":1573,"title":{},"body":{"classes/PostIdParam.html":{}}}],["isnotempty()@isuuid('4')@istopicexist()@apiproperty({description",{"_index":1966,"title":{},"body":{"classes/TopicIdParam.html":{}}}],["isnotempty()@isuuid('4')@isuserexist()@apiproperty({description",{"_index":2117,"title":{},"body":{"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UserIdParam.html":{}}}],["isnotempty()@validatenested()@type(undefined)@apiproperty({description",{"_index":928,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["isnumber",{"_index":330,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["isoptional",{"_index":905,"title":{},"body":{"classes/CreateUserProfileRequest.html":{}}}],["isoptional()@isstring()@apipropertyoptional({description",{"_index":898,"title":{},"body":{"classes/CreateUserProfileRequest.html":{}}}],["isoptional()@isstring()@maxlength(160)@apipropertyoptional({description",{"_index":891,"title":{},"body":{"classes/CreateUserProfileRequest.html":{}}}],["isphonenumber",{"_index":937,"title":{},"body":{"classes/CreateUserRequest.html":{},"classes/UpdateUserRequest.html":{}}}],["isphonenumber('id",{"_index":950,"title":{},"body":{"classes/CreateUserRequest.html":{},"classes/UpdateUserRequest.html":{}}}],["isphonenumberunique",{"_index":945,"title":{},"body":{"classes/CreateUserRequest.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"classes/UpdateUserRequest.html":{},"miscellaneous/functions.html":{}}}],["isphonenumberunique(&#39;id&#39",{"_index":2528,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isphonenumberunique('id",{"_index":1272,"title":{},"body":{"injectables/IsPhoneNumberUniqueValidator.html":{},"classes/UpdateUserRequest.html":{}}}],["isphonenumberunique(identifierkey",{"_index":2527,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isphonenumberuniquevalidator",{"_index":1267,"title":{"injectables/IsPhoneNumberUniqueValidator.html":{}},"body":{"injectables/IsPhoneNumberUniqueValidator.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["ispostexist",{"_index":1275,"title":{},"body":{"injectables/IsPostExistValidator.html":{},"classes/PostIdParam.html":{},"miscellaneous/functions.html":{}}}],["ispostexist(validationoptions",{"_index":1282,"title":{},"body":{"injectables/IsPostExistValidator.html":{},"miscellaneous/functions.html":{}}}],["ispostexistvalidator",{"_index":1273,"title":{"injectables/IsPostExistValidator.html":{}},"body":{"injectables/IsPostExistValidator.html":{},"modules/PostsModule.html":{},"overview.html":{}}}],["isstring",{"_index":331,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/SignInRequest.html":{},"classes/UpdateUserRequest.html":{}}}],["istanbul",{"_index":955,"title":{},"body":{"classes/CreateUserRequest.html":{},"entities/LocalFile.html":{},"classes/LoggerEnvironmentVariables.html":{},"entities/Post.html":{},"entities/Topic.html":{},"entities/User.html":{},"entities/UserProfile.html":{}}}],["istopicexist",{"_index":865,"title":{},"body":{"classes/CreatePostRequest.html":{},"injectables/IsTopicExistValidator.html":{},"classes/TopicIdParam.html":{},"miscellaneous/functions.html":{}}}],["istopicexist(validationoptions",{"_index":1285,"title":{},"body":{"injectables/IsTopicExistValidator.html":{},"miscellaneous/functions.html":{}}}],["istopicexistvalidator",{"_index":1283,"title":{"injectables/IsTopicExistValidator.html":{}},"body":{"injectables/IsTopicExistValidator.html":{},"modules/TopicsModule.html":{},"overview.html":{}}}],["istrue",{"_index":2481,"title":{},"body":{"miscellaneous/functions.html":{}}}],["istrue(value",{"_index":2520,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isuserexist",{"_index":1287,"title":{},"body":{"injectables/IsUserExistValidator.html":{},"classes/UserIdParam.html":{},"miscellaneous/functions.html":{}}}],["isuserexist(validationoptions",{"_index":1289,"title":{},"body":{"injectables/IsUserExistValidator.html":{},"miscellaneous/functions.html":{}}}],["isuserexistvalidator",{"_index":1286,"title":{"injectables/IsUserExistValidator.html":{}},"body":{"injectables/IsUserExistValidator.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["isusernameunique",{"_index":946,"title":{},"body":{"classes/CreateUserRequest.html":{},"injectables/IsUsernameUniqueValidator.html":{},"classes/UpdateUserRequest.html":{},"miscellaneous/functions.html":{}}}],["isusernameunique(&#39;id&#39",{"_index":2530,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isusernameunique('id",{"_index":1292,"title":{},"body":{"injectables/IsUsernameUniqueValidator.html":{},"classes/UpdateUserRequest.html":{}}}],["isusernameunique(identifierkey",{"_index":2529,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isusernameuniquevalidator",{"_index":1290,"title":{"injectables/IsUsernameUniqueValidator.html":{}},"body":{"injectables/IsUsernameUniqueValidator.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["isuuid",{"_index":827,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{}}}],["isuuid('4",{"_index":837,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/PostIdParam.html":{},"classes/TopicIdParam.html":{},"classes/UserIdParam.html":{}}}],["isuuid(value",{"_index":1246,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["itself",{"_index":2548,"title":{},"body":{"miscellaneous/functions.html":{}}}],["join",{"_index":1457,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{},"controllers/StoragesController.html":{},"index.html":{}}}],["join(process.cwd",{"_index":1466,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{},"controllers/StoragesController.html":{}}}],["joincolumn",{"_index":1380,"title":{},"body":{"entities/LocalFile.html":{},"entities/Post.html":{},"entities/UserProfile.html":{}}}],["jointable",{"_index":1541,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":780,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["jwt",{"_index":533,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_expires_in",{"_index":1321,"title":{},"body":{"classes/JwtEnvironmentVariables.html":{}}}],["jwt_secret",{"_index":1322,"title":{},"body":{"classes/JwtEnvironmentVariables.html":{}}}],["jwtauthguard",{"_index":1293,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/functions.html":{}}}],["jwtconfig",{"_index":695,"title":{},"body":{"modules/ConfigModule.html":{},"classes/JwtEnvironmentVariables.html":{}}}],["jwtenvironmentvariables",{"_index":1319,"title":{"classes/JwtEnvironmentVariables.html":{}},"body":{"classes/JwtEnvironmentVariables.html":{}}}],["jwtfromrequest",{"_index":1348,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":568,"title":{},"body":{"modules/AuthModule.html":{},"modules/ConfigModule.html":{}}}],["jwtmodule.registerasync",{"_index":721,"title":{},"body":{"modules/ConfigModule.html":{}}}],["jwtmoduleoptions",{"_index":586,"title":{},"body":{"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":590,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":565,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"overview.html":{}}}],["jwtstrategy.prototype.validate.name",{"_index":1355,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["kamil",{"_index":2603,"title":{},"body":{"index.html":{}}}],["key",{"_index":71,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["keyof",{"_index":1214,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["kind",{"_index":2650,"title":{},"body":{"license.html":{}}}],["large",{"_index":2458,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["large.exception.ts",{"_index":802,"title":{},"body":{"classes/ContentTooLargeException.html":{}}}],["large.exception.ts:15",{"_index":804,"title":{},"body":{"classes/ContentTooLargeException.html":{}}}],["last",{"_index":890,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/GenericEntity.html":{},"entities/LocalFile.html":{},"entities/Post.html":{},"classes/TimestampResponse.html":{},"entities/Topic.html":{},"entities/User.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{}}}],["lastname",{"_index":46,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/CreateUserProfileRequest.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{}}}],["lastsignedinat",{"_index":165,"title":{},"body":{"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"classes/UserResponse.html":{}}}],["latuconsina",{"_index":2613,"title":{},"body":{"license.html":{},"properties.html":{}}}],["length",{"_index":860,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/CreateUserRequest.html":{},"classes/UpdateUserRequest.html":{},"entities/User.html":{}}}],["length(4",{"_index":869,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/CreateUserRequest.html":{},"classes/UpdateUserRequest.html":{}}}],["length(6",{"_index":952,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["level",{"_index":1460,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["liability",{"_index":2664,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2661,"title":{},"body":{"license.html":{}}}],["license",{"_index":2608,"title":{"license.html":{}},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":2588,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1752,"title":{},"body":{"classes/RateLimitingEnvironmentVariables.html":{}}}],["limitation",{"_index":2629,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2652,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":667,"title":{},"body":{"modules/ConfigModule.html":{},"classes/RateLimitingEnvironmentVariables.html":{}}}],["limiting.config",{"_index":703,"title":{},"body":{"modules/ConfigModule.html":{}}}],["limiting.config.ts",{"_index":1746,"title":{},"body":{"classes/RateLimitingEnvironmentVariables.html":{}}}],["limiting.config.ts:17",{"_index":1750,"title":{},"body":{"classes/RateLimitingEnvironmentVariables.html":{}}}],["limiting.config.ts:22",{"_index":1749,"title":{},"body":{"classes/RateLimitingEnvironmentVariables.html":{}}}],["limiting/rate",{"_index":702,"title":{},"body":{"modules/ConfigModule.html":{},"classes/RateLimitingEnvironmentVariables.html":{}}}],["limits",{"_index":2256,"title":{},"body":{"controllers/UsersController.html":{}}}],["line",{"_index":1406,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/PostsService.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{},"injectables/UsersService.html":{}}}],["link",{"_index":275,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileSeeder.html":{},"injectables/LocalStrategy.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"modules/ServicesModule.html":{},"classes/SuccessResponse.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{}}}],["literal",{"_index":388,"title":{},"body":{"controllers/AppController.html":{}}}],["load",{"_index":651,"title":{},"body":{"modules/ConfigModule.html":{},"miscellaneous/functions.html":{}}}],["loaded",{"_index":1844,"title":{},"body":{"controllers/StoragesController.html":{},"miscellaneous/functions.html":{}}}],["local",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{},"modules/ConfigModule.html":{},"classes/CreateLocalFileRequest.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/LocalAuthGuard.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"controllers/UsersController.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["local_file",{"_index":59,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{}}}],["local_file\\`(\\`id",{"_index":82,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{}}}],["local_file_upload_dest",{"_index":1434,"title":{},"body":{"classes/LocalFileUploadEnvironmentVariables.html":{}}}],["localauthguard",{"_index":1359,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["localfile",{"_index":826,"title":{"entities/LocalFile.html":{}},"body":{"classes/CreateLocalFileRequest.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileSeeder.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"entities/UserProfile.html":{}}}],["localfilebyidpipe",{"_index":1383,"title":{"injectables/LocalFileByIdPipe.html":{}},"body":{"injectables/LocalFileByIdPipe.html":{},"controllers/StoragesController.html":{}}}],["localfilebyidpipe.prototype.transform.name",{"_index":1407,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{}}}],["localfileidparam",{"_index":1410,"title":{"classes/LocalFileIdParam.html":{}},"body":{"classes/LocalFileIdParam.html":{}}}],["localfileinterceptor",{"_index":2482,"title":{},"body":{"miscellaneous/functions.html":{}}}],["localfileinterceptor(fieldname",{"_index":2532,"title":{},"body":{"miscellaneous/functions.html":{}}}],["localfilesdata",{"_index":828,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/UserProfileResponse.html":{}}}],["localfilesdata[0].generalaccess",{"_index":836,"title":{},"body":{"classes/CreateLocalFileRequest.html":{}}}],["localfilesdata[0].id",{"_index":1416,"title":{},"body":{"classes/LocalFileIdParam.html":{},"classes/UserProfileResponse.html":{}}}],["localfilesdata[0].uploaderid",{"_index":838,"title":{},"body":{"classes/CreateLocalFileRequest.html":{}}}],["localfileseeder",{"_index":1417,"title":{"classes/LocalFileSeeder.html":{}},"body":{"classes/LocalFileSeeder.html":{}}}],["localfilesrepository",{"_index":1864,"title":{},"body":{"injectables/StoragesService.html":{}}}],["localfileuploadconfig",{"_index":688,"title":{},"body":{"modules/ConfigModule.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{}}}],["localfileuploadenvironmentvariables",{"_index":1431,"title":{"classes/LocalFileUploadEnvironmentVariables.html":{}},"body":{"classes/LocalFileUploadEnvironmentVariables.html":{}}}],["localoptions",{"_index":2533,"title":{},"body":{"miscellaneous/functions.html":{}}}],["localstrategy",{"_index":566,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"overview.html":{}}}],["localstrategy.prototype.validate.name",{"_index":1447,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["location",{"_index":149,"title":{},"body":{"classes/AddUserProfileTable1669618726311.html":{},"classes/CreateUserProfileRequest.html":{},"entities/LocalFile.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{}}}],["logger",{"_index":417,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"injectables/TasksService.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["logger(tasksservice.name",{"_index":1906,"title":{},"body":{"injectables/TasksService.html":{}}}],["logger/logger.config",{"_index":672,"title":{},"body":{"modules/ConfigModule.html":{}}}],["logger](https://docs.nestjs.com/techniques/logger#logger",{"_index":1489,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logger_buffer",{"_index":2551,"title":{},"body":{"miscellaneous/functions.html":{}}}],["logger_stream_buffer",{"_index":1451,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["logger_stream_destination",{"_index":1452,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["logger_stream_sync",{"_index":1453,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["loggerconfig",{"_index":671,"title":{},"body":{"modules/ConfigModule.html":{},"classes/LoggerEnvironmentVariables.html":{}}}],["loggerenvironmentvariables",{"_index":1449,"title":{"classes/LoggerEnvironmentVariables.html":{}},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["loggermiddleware",{"_index":2485,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermiddleware(req",{"_index":2542,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermodule",{"_index":654,"title":{},"body":{"modules/ConfigModule.html":{}}}],["loggermodule.forrootasync",{"_index":708,"title":{},"body":{"modules/ConfigModule.html":{}}}],["logging",{"_index":1001,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"miscellaneous/functions.html":{}}}],["logginginterceptor",{"_index":1473,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"injectables/LoggingInterceptor.html":{}}}],["long",{"_index":2681,"title":{},"body":{"properties.html":{}}}],["made",{"_index":757,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{}}}],["make",{"_index":1117,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["manage",{"_index":2447,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["manager",{"_index":683,"title":{},"body":{"modules/ConfigModule.html":{},"injectables/HttpCacheInterceptor.html":{},"dependencies.html":{}}}],["manually",{"_index":2153,"title":{},"body":{"entities/User.html":{}}}],["many",{"_index":263,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"miscellaneous/enumerations.html":{}}}],["manytomany",{"_index":1542,"title":{},"body":{"entities/Post.html":{},"entities/Topic.html":{}}}],["manytomany(undefined",{"_index":1537,"title":{},"body":{"entities/Post.html":{},"entities/Topic.html":{}}}],["manytoone",{"_index":1381,"title":{},"body":{"entities/LocalFile.html":{},"entities/Post.html":{}}}],["manytoone(undefined",{"_index":1373,"title":{},"body":{"entities/LocalFile.html":{},"entities/Post.html":{}}}],["map",{"_index":1093,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UnprocessableEntityException.html":{}}}],["map((responsebody",{"_index":1807,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["mapchildrentovalidationerrorresponses",{"_index":2090,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["mapchildrentovalidationerrorresponses(error.children",{"_index":2095,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["mapchildrentovalidationerrorresponses(errors",{"_index":2086,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["maps",{"_index":2087,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["matches",{"_index":1296,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["matching",{"_index":51,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"modules/ServicesModule.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TimestampResponse.html":{},"interfaces/TokenPayload.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrors.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["math.pow(1024",{"_index":2320,"title":{},"body":{"controllers/UsersController.html":{}}}],["max",{"_index":638,"title":{},"body":{"classes/CacheEnvironmentVariables.html":{}}}],["maximum",{"_index":1914,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["maxlength",{"_index":906,"title":{},"body":{"classes/CreateUserProfileRequest.html":{}}}],["maxlength(160",{"_index":914,"title":{},"body":{"classes/CreateUserProfileRequest.html":{}}}],["mb",{"_index":2323,"title":{},"body":{"controllers/UsersController.html":{}}}],["merchantability",{"_index":2654,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2632,"title":{},"body":{"license.html":{}}}],["merged",{"_index":1795,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["message",{"_index":505,"title":{},"body":{"controllers/AuthController.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"controllers/StoragesController.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{}}}],["meta",{"_index":222,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["metadata",{"_index":287,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TopicByIdPipe.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserByIdPipe.html":{},"dependencies.html":{}}}],["method",{"_index":278,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TasksService.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{},"miscellaneous/functions.html":{}}}],["methoddecorator",{"_index":288,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{}}}],["methods",{"_index":13,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileSeeder.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["microservices",{"_index":1077,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["middleware",{"_index":2503,"title":{},"body":{"miscellaneous/functions.html":{}}}],["migration",{"_index":1005,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["migrationinterface",{"_index":9,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["migrations",{"_index":1010,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"entities/User.html":{}}}],["migrationstablename",{"_index":1012,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["mime",{"_index":1365,"title":{},"body":{"entities/LocalFile.html":{}}}],["mimetype",{"_index":65,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/CreateLocalFileRequest.html":{},"entities/LocalFile.html":{}}}],["minlength",{"_index":1468,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["minute",{"_index":1910,"title":{},"body":{"injectables/TasksService.html":{}}}],["miscellaneous",{"_index":2428,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":2587,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mixin",{"_index":2536,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mode",{"_index":2578,"title":{},"body":{"index.html":{}}}],["model",{"_index":309,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["modify",{"_index":2631,"title":{},"body":{"license.html":{}}}],["module",{"_index":443,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"modules/PostsModule.html":{},"modules/ServicesModule.html":{},"modules/StoragesModule.html":{},"modules/TasksModule.html":{},"modules/TopicsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"modules/PostsModule.html":{},"modules/ServicesModule.html":{},"modules/StoragesModule.html":{},"modules/TasksModule.html":{},"modules/TopicsModule.html":{},"modules/UsersModule.html":{}}}],["module(s",{"_index":461,"title":{},"body":{"modules/AppModule.html":{}}}],["modules",{"_index":445,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"modules/PostsModule.html":{},"modules/ServicesModule.html":{},"modules/StoragesModule.html":{},"modules/TasksModule.html":{},"modules/TopicsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":2599,"title":{},"body":{"index.html":{}}}],["multer",{"_index":2538,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multermodule",{"_index":659,"title":{},"body":{"modules/ConfigModule.html":{}}}],["multermodule.registerasync",{"_index":719,"title":{},"body":{"modules/ConfigModule.html":{}}}],["multeroptions",{"_index":692,"title":{},"body":{"modules/ConfigModule.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["multiple",{"_index":2546,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mysql",{"_index":992,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["mysql2",{"_index":2412,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":2604,"title":{},"body":{"index.html":{}}}],["name",{"_index":12,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileSeeder.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundException.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutException.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["named",{"_index":1298,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["namespace",{"_index":363,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["namespace](https://docs.nestjs.com/techniques/configuration#configuration",{"_index":364,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["namespaces",{"_index":365,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["need",{"_index":1127,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"injectables/PostByIdHook.html":{},"injectables/TopicByIdHook.html":{},"injectables/UserByIdHook.html":{}}}],["nest",{"_index":700,"title":{},"body":{"modules/ConfigModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/PostByIdHook.html":{},"modules/PostsModule.html":{},"injectables/TopicByIdHook.html":{},"modules/TopicsModule.html":{},"injectables/UserByIdHook.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["nestconfigmodule",{"_index":669,"title":{},"body":{"modules/ConfigModule.html":{}}}],["nestconfigmodule.forroot",{"_index":705,"title":{},"body":{"modules/ConfigModule.html":{}}}],["nested",{"_index":2088,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["nestframework",{"_index":2607,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1485,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestinterceptor.intercept",{"_index":1307,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":402,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":297,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"modules/ServicesModule.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":324,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"modules/ConfigModule.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":479,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":569,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2392,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":571,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":691,"title":{},"body":{"modules/ConfigModule.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":687,"title":{},"body":{"modules/ConfigModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":247,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConflictErrorResponse.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/LocalFileIdParam.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"controllers/PostsController.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"classes/SuccessResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"controllers/TopicsController.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"classes/UserIdParam.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":487,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":676,"title":{},"body":{"modules/ConfigModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":549,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenException.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/InternalServerErrorException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"classes/NotFoundException.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"controllers/StoragesController.html":{},"classes/SuccessResponse.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TooManyRequestsException.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{}}}],["next",{"_index":957,"title":{},"body":{"classes/CreateUserRequest.html":{},"injectables/HttpCacheInterceptor.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdPipe.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"entities/Topic.html":{},"injectables/TopicByIdPipe.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"injectables/UserByIdPipe.html":{},"entities/UserProfile.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["next.handle",{"_index":1800,"title":{},"body":{"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe",{"_index":1806,"title":{},"body":{"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nextfunction",{"_index":2498,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nocontentsuccessresponse",{"_index":1501,"title":{"classes/NoContentSuccessResponse.html":{}},"body":{"classes/NoContentSuccessResponse.html":{}}}],["node.js",{"_index":2565,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":358,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{}}}],["noninfringement",{"_index":2658,"title":{},"body":{"license.html":{}}}],["not_to_be_cached_key",{"_index":1096,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["not_to_be_timeouted_key",{"_index":1924,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["not_to_be_transformed_key",{"_index":1791,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["notfounderrorresponse",{"_index":1504,"title":{"classes/NotFoundErrorResponse.html":{}},"body":{"classes/NotFoundErrorResponse.html":{}}}],["notfoundexception",{"_index":1392,"title":{"classes/NotFoundException.html":{}},"body":{"injectables/LocalFileByIdPipe.html":{},"classes/NotFoundException.html":{},"injectables/PostByIdPipe.html":{},"controllers/StoragesController.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["notfoundexception()`the",{"_index":1511,"title":{},"body":{"classes/NotFoundException.html":{}}}],["notice",{"_index":2644,"title":{},"body":{"license.html":{}}}],["nottobecached",{"_index":404,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/StoragesController.html":{},"miscellaneous/functions.html":{}}}],["nottobecachedmetadata",{"_index":1103,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["nottobetimeouted",{"_index":1928,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"miscellaneous/functions.html":{}}}],["nottobetransformed",{"_index":407,"title":{},"body":{"controllers/AppController.html":{},"controllers/StoragesController.html":{},"miscellaneous/functions.html":{}}}],["nottobetransformedmetadata",{"_index":1799,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["now",{"_index":1494,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":1499,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":2574,"title":{},"body":{"index.html":{}}}],["null",{"_index":45,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"injectables/AuthService.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/InitialMigration1668674726738.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/NoContentSuccessResponse.html":{},"classes/OkSuccessResponse.html":{},"injectables/PostByIdPipe.html":{},"injectables/PostsService.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"injectables/TopicByIdPipe.html":{},"injectables/TopicsService.html":{},"entities/User.html":{},"injectables/UserByIdPipe.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{},"injectables/UsersService.html":{}}}],["null'})@joincolumn",{"_index":2170,"title":{},"body":{"entities/UserProfile.html":{}}}],["nullable",{"_index":2134,"title":{},"body":{"entities/User.html":{},"entities/UserProfile.html":{}}}],["number",{"_index":322,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"interfaces/AuthResponse.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/CreateUserRequest.html":{},"classes/DatabaseEnvironmentVariables.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/ParseIntPipe.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/SignInResponse.html":{},"classes/UpdateUserRequest.html":{},"classes/UserResponse.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{}}}],["number.transformer.util",{"_index":337,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["number.transformer.util.ts",{"_index":2491,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":788,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateUserRequest.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["object.assign(this",{"_index":1051,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/GenericEntity.html":{},"classes/SuccessResponse.html":{}}}],["object.constructor",{"_index":1233,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["object.values(error.constraints",{"_index":2096,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["object[identifierkey",{"_index":1213,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["observable",{"_index":1484,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["obtaining",{"_index":2620,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["of(postdata.id",{"_index":1601,"title":{},"body":{"classes/PostSeeder.html":{}}}],["ok",{"_index":307,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/OkSuccessResponse.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["oksuccessresponse",{"_index":1514,"title":{"classes/OkSuccessResponse.html":{}},"body":{"classes/OkSuccessResponse.html":{}}}],["omitted",{"_index":2098,"title":{},"body":{"classes/UpdatePostRequest.html":{},"classes/UpdateUserRequest.html":{}}}],["omittype",{"_index":2099,"title":{},"body":{"classes/UpdatePostRequest.html":{},"classes/UpdateUserRequest.html":{}}}],["omittype(createpostrequest",{"_index":2100,"title":{},"body":{"classes/UpdatePostRequest.html":{}}}],["omittype(createuserrequest",{"_index":2127,"title":{},"body":{"classes/UpdateUserRequest.html":{}}}],["ondelete",{"_index":1374,"title":{},"body":{"entities/LocalFile.html":{},"entities/Post.html":{},"entities/UserProfile.html":{}}}],["onetoone",{"_index":2146,"title":{},"body":{"entities/User.html":{},"entities/UserProfile.html":{}}}],["onetoone(undefined",{"_index":2139,"title":{},"body":{"entities/User.html":{},"entities/UserProfile.html":{}}}],["open",{"_index":2589,"title":{},"body":{"index.html":{}}}],["operations",{"_index":1815,"title":{},"body":{"modules/ServicesModule.html":{}}}],["optional",{"_index":29,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileSeeder.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutException.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TooManyRequestsException.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":224,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"classes/LoggerEnvironmentVariables.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["options.interface",{"_index":694,"title":{},"body":{"modules/ConfigModule.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{}}}],["optionsforroot",{"_index":699,"title":{},"body":{"modules/ConfigModule.html":{}}}],["order",{"_index":1028,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"injectables/HttpCacheInterceptor.html":{},"miscellaneous/functions.html":{}}}],["origin",{"_index":1130,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["original",{"_index":1364,"title":{},"body":{"entities/LocalFile.html":{}}}],["orignore",{"_index":1429,"title":{},"body":{"classes/LocalFileSeeder.html":{},"classes/PostSeeder.html":{},"classes/TopicSeeder.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{}}}],["otherwise",{"_index":391,"title":{},"body":{"controllers/AppController.html":{},"injectables/PostByIdHook.html":{},"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicsService.html":{},"injectables/UserByIdHook.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["out",{"_index":454,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonServicesModule.html":{},"modules/PostsModule.html":{},"modules/ServicesModule.html":{},"modules/StoragesModule.html":{},"modules/TasksModule.html":{},"modules/TopicsModule.html":{},"modules/UsersModule.html":{},"license.html":{},"overview.html":{}}}],["outgoing",{"_index":1477,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["override",{"_index":784,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"miscellaneous/functions.html":{}}}],["overview",{"_index":2674,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":813,"title":{},"body":{"classes/CreateLocalFileRequest.html":{}}}],["ownerid",{"_index":69,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/CreateLocalFileRequest.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{}}}],["package",{"_index":2388,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":395,"title":{},"body":{"controllers/AppController.html":{}}}],["param",{"_index":283,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundException.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TooManyRequestsException.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('id",{"_index":1668,"title":{},"body":{"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["param.decorator",{"_index":1640,"title":{},"body":{"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["parameter",{"_index":786,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/LocalFileIdParam.html":{},"classes/NotFoundException.html":{},"injectables/PostByIdHook.html":{},"classes/PostIdParam.html":{},"controllers/PostsController.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"injectables/TopicByIdHook.html":{},"classes/TopicIdParam.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"injectables/UserByIdHook.html":{},"classes/UserIdParam.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileSeeder.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundException.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutException.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TooManyRequestsException.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":673,"title":{},"body":{"modules/ConfigModule.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/PostByIdHook.html":{},"injectables/TopicByIdHook.html":{},"injectables/UserByIdHook.html":{}}}],["params/post",{"_index":1584,"title":{},"body":{"classes/PostResponse.html":{},"classes/UpdatePostRequest.html":{}}}],["params/topic",{"_index":1969,"title":{},"body":{"classes/TopicResponse.html":{},"classes/UpdateTopicRequest.html":{}}}],["params/users/user",{"_index":2109,"title":{},"body":{"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{}}}],["parse",{"_index":1388,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["parsed",{"_index":1393,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["parseint(value",{"_index":1524,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":1518,"title":{"injectables/ParseIntPipe.html":{}},"body":{"injectables/ParseIntPipe.html":{}}}],["parser",{"_index":2406,"title":{},"body":{"dependencies.html":{}}}],["partial",{"_index":774,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["particular",{"_index":2656,"title":{},"body":{"license.html":{}}}],["passport",{"_index":1331,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":570,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1330,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1347,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passthrough",{"_index":1845,"title":{},"body":{"controllers/StoragesController.html":{}}}],["password",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserRequest.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/InitialMigration1668674726738.html":{},"injectables/LocalStrategy.html":{},"classes/SignInRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserRequest.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["password'})@isnotempty()@isstring",{"_index":1821,"title":{},"body":{"classes/SignInRequest.html":{}}}],["path",{"_index":64,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"controllers/AuthController.html":{},"classes/ConflictErrorResponse.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"entities/LocalFile.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"controllers/PostsController.html":{},"classes/RequestTimeoutErrorResponse.html":{},"interfaces/Response.html":{},"controllers/StoragesController.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"controllers/TopicsController.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["pattern",{"_index":2537,"title":{},"body":{"miscellaneous/functions.html":{}}}],["payload",{"_index":504,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/TokenPayload.html":{}}}],["payload.interface",{"_index":1344,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":1936,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["payload.sub",{"_index":1358,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["perform",{"_index":1114,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["permission",{"_index":2614,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":1551,"title":{},"body":{"injectables/PostByIdHook.html":{},"modules/PostsModule.html":{},"injectables/TopicByIdHook.html":{},"modules/TopicsModule.html":{},"injectables/UserByIdHook.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{}}}],["permissions/hooks/post",{"_index":1649,"title":{},"body":{"controllers/PostsController.html":{}}}],["permissions/hooks/users/user",{"_index":2270,"title":{},"body":{"controllers/UsersController.html":{}}}],["permissions/post.permissions",{"_index":1652,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["permissions/topic.permissions",{"_index":2004,"title":{},"body":{"controllers/TopicsController.html":{},"modules/TopicsModule.html":{}}}],["permissions/user.permissions",{"_index":2272,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["permit",{"_index":2639,"title":{},"body":{"license.html":{}}}],["person",{"_index":2619,"title":{},"body":{"license.html":{}}}],["personal",{"_index":2680,"title":{},"body":{"properties.html":{}}}],["persons",{"_index":2640,"title":{},"body":{"license.html":{}}}],["phone",{"_index":156,"title":{},"body":{"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/CreateUserRequest.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"classes/UpdateUserRequest.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["picked",{"_index":2101,"title":{},"body":{"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserRolesRequest.html":{}}}],["picktype",{"_index":2102,"title":{},"body":{"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserRolesRequest.html":{}}}],["picktype(createpostrequest",{"_index":2104,"title":{},"body":{"classes/UpdatePostTopicsRequest.html":{}}}],["picktype(createuserrequest",{"_index":2110,"title":{},"body":{"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserRolesRequest.html":{}}}],["pino",{"_index":403,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["pino.destination",{"_index":1465,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["pinohttp",{"_index":1459,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["pinologger",{"_index":401,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pipe",{"_index":1387,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["pipes",{"_index":1394,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["pipes/local",{"_index":1840,"title":{},"body":{"controllers/StoragesController.html":{}}}],["pipes/post",{"_index":1653,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["pipes/topic",{"_index":2005,"title":{},"body":{"controllers/TopicsController.html":{},"modules/TopicsModule.html":{}}}],["pipes/user",{"_index":2264,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["pipes](https://docs.nestjs.com/pipes",{"_index":1405,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["pipetransform",{"_index":1400,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["pipetransform.transform",{"_index":1399,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["please",{"_index":2598,"title":{},"body":{"index.html":{}}}],["port",{"_index":321,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["portions",{"_index":2648,"title":{},"body":{"license.html":{}}}],["possible",{"_index":2445,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["post",{"_index":95,"title":{"entities/Post.html":{}},"body":{"classes/AddPostTable1678073082722.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"controllers/AuthController.html":{},"classes/CreatePostRequest.html":{},"injectables/IsPostExistValidator.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"modules/ServicesModule.html":{},"entities/Topic.html":{},"controllers/TopicsController.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["post's",{"_index":1636,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@apisuccessesresponse(['undefined'])@apierrorsresponse(['undefined",{"_index":1619,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('sign",{"_index":507,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@useaccesscontrol(postactions.create",{"_index":1612,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@useaccesscontrol(topicactions.create",{"_index":1985,"title":{},"body":{"controllers/TopicsController.html":{}}}],["post()@useaccesscontrol(useractions.create",{"_index":2228,"title":{},"body":{"controllers/UsersController.html":{}}}],["post(request",{"_index":874,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/UpdatePostRequest.html":{}}}],["post.topics",{"_index":1535,"title":{},"body":{"entities/Post.html":{},"entities/Topic.html":{}}}],["post\\`(\\`id",{"_index":139,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{}}}],["postactions",{"_index":1651,"title":{},"body":{"controllers/PostsController.html":{},"miscellaneous/typealiases.html":{}}}],["postadditionalactions",{"_index":2438,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["postbyidhook",{"_index":1545,"title":{"injectables/PostByIdHook.html":{}},"body":{"injectables/PostByIdHook.html":{},"controllers/PostsController.html":{}}}],["postbyidhook)@apibearerauth()@apiuuidparam({name",{"_index":1618,"title":{},"body":{"controllers/PostsController.html":{}}}],["postbyidhook.prototype.run.name",{"_index":1561,"title":{},"body":{"injectables/PostByIdHook.html":{}}}],["postbyidpipe",{"_index":1563,"title":{"injectables/PostByIdPipe.html":{}},"body":{"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"overview.html":{}}}],["postbyidpipe.prototype.transform.name",{"_index":1568,"title":{},"body":{"injectables/PostByIdPipe.html":{}}}],["postdata",{"_index":1598,"title":{},"body":{"classes/PostSeeder.html":{}}}],["postdata.topics.map(async",{"_index":1599,"title":{},"body":{"classes/PostSeeder.html":{}}}],["postentity",{"_index":1616,"title":{},"body":{"controllers/PostsController.html":{}}}],["postentity)@apibearerauth()@apisuccessesresponse(['undefined'])@apierrorsresponse(['undefined",{"_index":1613,"title":{},"body":{"controllers/PostsController.html":{}}}],["postid",{"_index":134,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{}}}],["postidparam",{"_index":1570,"title":{"classes/PostIdParam.html":{}},"body":{"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/UpdatePostRequest.html":{}}}],["postpermissions",{"_index":1694,"title":{},"body":{"modules/PostsModule.html":{}}}],["postresponse",{"_index":1576,"title":{"classes/PostResponse.html":{}},"body":{"classes/PostResponse.html":{},"controllers/PostsController.html":{}}}],["posts",{"_index":1278,"title":{},"body":{"injectables/IsPostExistValidator.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Topic.html":{}}}],["posts.controller",{"_index":1695,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1280,"title":{},"body":{"injectables/IsPostExistValidator.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/entities/post.entity",{"_index":1953,"title":{},"body":{"entities/Topic.html":{}}}],["posts/posts.module",{"_index":1817,"title":{},"body":{"modules/ServicesModule.html":{}}}],["posts_topics",{"_index":133,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{},"entities/Post.html":{}}}],["postscontroller",{"_index":1603,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["postscontroller.prototype.createpost.name",{"_index":1658,"title":{},"body":{"controllers/PostsController.html":{}}}],["postscontroller.prototype.deletepost.name",{"_index":1679,"title":{},"body":{"controllers/PostsController.html":{}}}],["postscontroller.prototype.findallposts.name",{"_index":1664,"title":{},"body":{"controllers/PostsController.html":{}}}],["postscontroller.prototype.findpostbyid.name",{"_index":1669,"title":{},"body":{"controllers/PostsController.html":{}}}],["postscontroller.prototype.updatepost.name",{"_index":1672,"title":{},"body":{"controllers/PostsController.html":{}}}],["postscontroller.prototype.updateposttopics.name",{"_index":1683,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsdata",{"_index":861,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{}}}],["postsdata.map(async",{"_index":1597,"title":{},"body":{"classes/PostSeeder.html":{}}}],["postsdata[0].content",{"_index":871,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/PostResponse.html":{}}}],["postsdata[0].id",{"_index":1575,"title":{},"body":{"classes/PostIdParam.html":{}}}],["postseeder",{"_index":1587,"title":{"classes/PostSeeder.html":{}},"body":{"classes/PostSeeder.html":{}}}],["postsmodule",{"_index":1687,"title":{"modules/PostsModule.html":{}},"body":{"modules/PostsModule.html":{},"modules/ServicesModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":1704,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":1277,"title":{"injectables/PostsService.html":{}},"body":{"injectables/IsPostExistValidator.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"overview.html":{}}}],["postsservice.prototype.create.name",{"_index":1727,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice.prototype.delete.name",{"_index":1739,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice.prototype.findall.name",{"_index":1731,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice.prototype.findbyid.name",{"_index":1734,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice.prototype.update.name",{"_index":1736,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice.prototype.updatetopics.name",{"_index":1741,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsubjects",{"_index":2687,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["posttoupdate",{"_index":1737,"title":{},"body":{"injectables/PostsService.html":{}}}],["practice",{"_index":2683,"title":{},"body":{"properties.html":{}}}],["pretty",{"_index":1462,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["primary",{"_index":70,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"modules/AppModule.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["primarycolumn",{"_index":2177,"title":{},"body":{"entities/UserProfile.html":{}}}],["primarygeneratedcolumn",{"_index":1379,"title":{},"body":{"entities/LocalFile.html":{},"entities/Post.html":{},"entities/Topic.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1369,"title":{},"body":{"entities/LocalFile.html":{},"entities/Post.html":{},"entities/Topic.html":{},"entities/User.html":{}}}],["private",{"_index":68,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TasksService.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["process",{"_index":465,"title":{},"body":{"modules/AppModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["process.env",{"_index":368,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["processed",{"_index":2518,"title":{},"body":{"miscellaneous/functions.html":{}}}],["processes",{"_index":605,"title":{},"body":{"injectables/AuthService.html":{}}}],["production",{"_index":344,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["profile",{"_index":888,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"injectables/PostsService.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"entities/User.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["profile.entity",{"_index":911,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"entities/User.html":{},"classes/UserProfileSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["profile.entity.ts",{"_index":2166,"title":{},"body":{"entities/UserProfile.html":{}}}],["profile.entity.ts:28",{"_index":2178,"title":{},"body":{"entities/UserProfile.html":{}}}],["profile.entity.ts:31",{"_index":2176,"title":{},"body":{"entities/UserProfile.html":{}}}],["profile.entity.ts:34",{"_index":2179,"title":{},"body":{"entities/UserProfile.html":{}}}],["profile.entity.ts:37",{"_index":2174,"title":{},"body":{"entities/UserProfile.html":{}}}],["profile.entity.ts:40",{"_index":2180,"title":{},"body":{"entities/UserProfile.html":{}}}],["profile.entity.ts:43",{"_index":2184,"title":{},"body":{"entities/UserProfile.html":{}}}],["profile.entity.ts:46",{"_index":2175,"title":{},"body":{"entities/UserProfile.html":{}}}],["profile.entity.ts:49",{"_index":2172,"title":{},"body":{"entities/UserProfile.html":{}}}],["profile.entity.ts:59",{"_index":2183,"title":{},"body":{"entities/UserProfile.html":{}}}],["profile.entity.ts:65",{"_index":2171,"title":{},"body":{"entities/UserProfile.html":{}}}],["profile.seeder.ts",{"_index":1021,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"classes/UserProfileSeeder.html":{}}}],["profile.seeder.ts:10",{"_index":2198,"title":{},"body":{"classes/UserProfileSeeder.html":{}}}],["profile.user",{"_index":2140,"title":{},"body":{"entities/User.html":{}}}],["profiles.data",{"_index":909,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{}}}],["profiles/create",{"_index":887,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{}}}],["profiles/update",{"_index":2112,"title":{},"body":{"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"controllers/UsersController.html":{}}}],["profiles/user",{"_index":2189,"title":{},"body":{"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{}}}],["progressive",{"_index":2564,"title":{},"body":{"index.html":{}}}],["project",{"_index":2590,"title":{},"body":{"index.html":{}}}],["promise",{"_index":31,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/InitialMigration1668674726738.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileSeeder.html":{},"injectables/LocalStrategy.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":1596,"title":{},"body":{"classes/PostSeeder.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"classes/JwtEnvironmentVariables.html":{},"entities/LocalFile.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"entities/Post.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"classes/SuccessResponse.html":{},"injectables/TasksService.html":{},"classes/TimestampResponse.html":{},"interfaces/TokenPayload.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserRequest.html":{},"entities/User.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{},"interfaces/ValidationErrors.html":{},"properties.html":{}}}],["property",{"_index":284,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"classes/UnprocessableEntityException.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/functions.html":{}}}],["propertydecorator",{"_index":290,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{}}}],["propertyname",{"_index":1231,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["protected",{"_index":1088,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["provide",{"_index":489,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostByIdHook.html":{},"injectables/TopicByIdHook.html":{},"injectables/UserByIdHook.html":{}}}],["provided",{"_index":553,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"license.html":{}}}],["providers",{"_index":468,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/StoragesModule.html":{},"modules/TasksModule.html":{},"modules/TopicsModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":466,"title":{},"body":{"modules/AppModule.html":{}}}],["provision",{"_index":345,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"miscellaneous/enumerations.html":{}}}],["public",{"_index":14,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"miscellaneous/enumerations.html":{}}}],["publish",{"_index":2633,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":2657,"title":{},"body":{"license.html":{}}}],["put",{"_index":1637,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["put(':id",{"_index":1670,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["put(':id')@useaccesscontrol(postactions.update",{"_index":1630,"title":{},"body":{"controllers/PostsController.html":{}}}],["put(':id')@useaccesscontrol(topicactions.update",{"_index":2000,"title":{},"body":{"controllers/TopicsController.html":{}}}],["put(':id')@useaccesscontrol(useractions.update",{"_index":2242,"title":{},"body":{"controllers/UsersController.html":{}}}],["put(':id/password",{"_index":2298,"title":{},"body":{"controllers/UsersController.html":{}}}],["put(':id/password')@useaccesscontrol(useractions.updatepassword",{"_index":2245,"title":{},"body":{"controllers/UsersController.html":{}}}],["put(':id/profile",{"_index":2309,"title":{},"body":{"controllers/UsersController.html":{}}}],["put(':id/profile')@useaccesscontrol(useractions.updateprofile",{"_index":2248,"title":{},"body":{"controllers/UsersController.html":{}}}],["put(':id/profile/avatar/upload",{"_index":2316,"title":{},"body":{"controllers/UsersController.html":{}}}],["put(':id/profile/avatar/upload')@useaccesscontrol(useractions.updateprofileavatar",{"_index":2251,"title":{},"body":{"controllers/UsersController.html":{}}}],["put(':id/roles",{"_index":2304,"title":{},"body":{"controllers/UsersController.html":{}}}],["put(':id/roles')@useaccesscontrol(useractions.updateroles",{"_index":2260,"title":{},"body":{"controllers/UsersController.html":{}}}],["put(':id/topics",{"_index":1681,"title":{},"body":{"controllers/PostsController.html":{}}}],["put(':id/topics')@useaccesscontrol(postactions.updatetopics",{"_index":1634,"title":{},"body":{"controllers/PostsController.html":{}}}],["query",{"_index":398,"title":{},"body":{"controllers/AppController.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/PostSeeder.html":{}}}],["query('version",{"_index":427,"title":{},"body":{"controllers/AppController.html":{}}}],["queryrunner",{"_index":26,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["queryrunner.query",{"_index":38,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["queryrunner.query(`alter",{"_index":47,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["queryrunner.query(`create",{"_index":174,"title":{},"body":{"classes/AlterPhoneAttributeUniqueness1676900183425.html":{}}}],["queryrunner.query(`drop",{"_index":88,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["rate",{"_index":666,"title":{},"body":{"modules/ConfigModule.html":{},"classes/RateLimitingEnvironmentVariables.html":{}}}],["ratelimitingconfig",{"_index":701,"title":{},"body":{"modules/ConfigModule.html":{},"classes/RateLimitingEnvironmentVariables.html":{}}}],["ratelimitingenvironmentvariables",{"_index":1744,"title":{"classes/RateLimitingEnvironmentVariables.html":{}},"body":{"classes/RateLimitingEnvironmentVariables.html":{}}}],["read",{"_index":2449,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["readall",{"_index":2448,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["readbyid",{"_index":2450,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["readonly",{"_index":419,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":2508,"title":{},"body":{"miscellaneous/functions.html":{}}}],["records",{"_index":1082,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["redirect",{"_index":392,"title":{},"body":{"controllers/AppController.html":{}}}],["redirect('https://docs.nestjs.com",{"_index":425,"title":{},"body":{"controllers/AppController.html":{}}}],["redis",{"_index":684,"title":{},"body":{"modules/ConfigModule.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"dependencies.html":{}}}],["redis_store_host",{"_index":1757,"title":{},"body":{"classes/RedisStoreEnvironmentVariables.html":{}}}],["redis_store_port",{"_index":1758,"title":{},"body":{"classes/RedisStoreEnvironmentVariables.html":{}}}],["redisclientoptions",{"_index":686,"title":{},"body":{"modules/ConfigModule.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["redisstore",{"_index":682,"title":{},"body":{"modules/ConfigModule.html":{}}}],["redisstoreconfig",{"_index":679,"title":{},"body":{"modules/ConfigModule.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["redisstoreenvironmentvariables",{"_index":1754,"title":{"classes/RedisStoreEnvironmentVariables.html":{}},"body":{"classes/RedisStoreEnvironmentVariables.html":{}}}],["references",{"_index":81,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["reflect",{"_index":2421,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1301,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["registeras",{"_index":323,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["registeras('app",{"_index":367,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{}}}],["registeras('cache",{"_index":635,"title":{},"body":{"classes/CacheEnvironmentVariables.html":{}}}],["registeras('jwt",{"_index":1325,"title":{},"body":{"classes/JwtEnvironmentVariables.html":{}}}],["registeras('logger",{"_index":1458,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["registerdecorator",{"_index":1205,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["registered",{"_index":361,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["rejectunauthorized",{"_index":1000,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["rel_3f24071759ec6354b0259f9c4d",{"_index":77,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{}}}],["rel_f44d0cd18cfd80b0fed7806c3b",{"_index":153,"title":{},"body":{"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{}}}],["related",{"_index":350,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/ConflictErrorResponse.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/NotFoundErrorResponse.html":{},"injectables/PostByIdPipe.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RequestTimeoutErrorResponse.html":{},"modules/ServicesModule.html":{},"classes/TooManyRequestsErrorResponse.html":{},"injectables/TopicByIdPipe.html":{},"injectables/TopicsService.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"injectables/UserByIdPipe.html":{},"injectables/UsersService.html":{}}}],["relation(post",{"_index":1600,"title":{},"body":{"classes/PostSeeder.html":{}}}],["relationid",{"_index":1543,"title":{},"body":{"entities/Post.html":{}}}],["relationid(post",{"_index":1534,"title":{},"body":{"entities/Post.html":{}}}],["relations",{"_index":1733,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["relations](https://github.com/typeorm/typeorm/blob/master/docs/relational",{"_index":1594,"title":{},"body":{"classes/PostSeeder.html":{}}}],["removeposttitleattribute.ts",{"_index":1766,"title":{},"body":{"classes/RemovePostTitleAttribute1678285751957.html":{}}}],["removeposttitleattribute.ts:24",{"_index":1768,"title":{},"body":{"classes/RemovePostTitleAttribute1678285751957.html":{}}}],["removeposttitleattribute.ts:6",{"_index":1767,"title":{},"body":{"classes/RemovePostTitleAttribute1678285751957.html":{}}}],["removeposttitleattribute.ts:8",{"_index":1769,"title":{},"body":{"classes/RemovePostTitleAttribute1678285751957.html":{}}}],["removeposttitleattribute1678285751957",{"_index":1764,"title":{"classes/RemovePostTitleAttribute1678285751957.html":{}},"body":{"classes/RemovePostTitleAttribute1678285751957.html":{}}}],["removeroletable.ts",{"_index":1773,"title":{},"body":{"classes/RemoveRoleTable1679272991389.html":{}}}],["removeroletable.ts:14",{"_index":1775,"title":{},"body":{"classes/RemoveRoleTable1679272991389.html":{}}}],["removeroletable.ts:4",{"_index":1774,"title":{},"body":{"classes/RemoveRoleTable1679272991389.html":{}}}],["removeroletable.ts:6",{"_index":1776,"title":{},"body":{"classes/RemoveRoleTable1679272991389.html":{}}}],["removeroletable1679272991389",{"_index":1771,"title":{"classes/RemoveRoleTable1679272991389.html":{}},"body":{"classes/RemoveRoleTable1679272991389.html":{}}}],["repository",{"_index":1705,"title":{},"body":{"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["representing",{"_index":732,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/PostResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TopicResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["req",{"_index":385,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["req.protocol}://${req.get('host')}/docs",{"_index":431,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":260,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"controllers/AppController.html":{},"classes/ConflictErrorResponse.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/LocalFileIdParam.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"injectables/PostByIdHook.html":{},"classes/PostIdParam.html":{},"controllers/PostsController.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"classes/SuccessResponse.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TooManyRequestsErrorResponse.html":{},"injectables/TopicByIdHook.html":{},"classes/TopicIdParam.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"injectables/UserByIdHook.html":{},"classes/UserIdParam.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["request.dto",{"_index":539,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserRequest.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"controllers/UsersController.html":{}}}],["request.dto.ts",{"_index":812,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/SignInRequest.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{}}}],["request.dto.ts:104",{"_index":935,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["request.dto.ts:17",{"_index":2116,"title":{},"body":{"classes/UpdateUserProfileAvatarRequest.html":{}}}],["request.dto.ts:19",{"_index":1823,"title":{},"body":{"classes/SignInRequest.html":{}}}],["request.dto.ts:22",{"_index":878,"title":{},"body":{"classes/CreateTopicRequest.html":{}}}],["request.dto.ts:23",{"_index":819,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRolesRequest.html":{}}}],["request.dto.ts:27",{"_index":1822,"title":{},"body":{"classes/SignInRequest.html":{}}}],["request.dto.ts:31",{"_index":822,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{}}}],["request.dto.ts:32",{"_index":850,"title":{},"body":{"classes/CreatePostRequest.html":{}}}],["request.dto.ts:35",{"_index":2126,"title":{},"body":{"classes/UpdateUserRequest.html":{}}}],["request.dto.ts:39",{"_index":897,"title":{},"body":{"classes/CreateUserProfileRequest.html":{}}}],["request.dto.ts:40",{"_index":825,"title":{},"body":{"classes/CreateLocalFileRequest.html":{}}}],["request.dto.ts:44",{"_index":855,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/CreateUserRequest.html":{}}}],["request.dto.ts:45",{"_index":2122,"title":{},"body":{"classes/UpdateUserRequest.html":{}}}],["request.dto.ts:48",{"_index":892,"title":{},"body":{"classes/CreateUserProfileRequest.html":{}}}],["request.dto.ts:53",{"_index":857,"title":{},"body":{"classes/CreatePostRequest.html":{}}}],["request.dto.ts:54",{"_index":924,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["request.dto.ts:55",{"_index":2124,"title":{},"body":{"classes/UpdateUserRequest.html":{}}}],["request.dto.ts:56",{"_index":899,"title":{},"body":{"classes/CreateUserProfileRequest.html":{}}}],["request.dto.ts:64",{"_index":900,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/UpdateUserRequest.html":{}}}],["request.dto.ts:72",{"_index":895,"title":{},"body":{"classes/CreateUserProfileRequest.html":{}}}],["request.dto.ts:73",{"_index":926,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["request.dto.ts:81",{"_index":901,"title":{},"body":{"classes/CreateUserProfileRequest.html":{}}}],["request.dto.ts:86",{"_index":933,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["request.dto.ts:95",{"_index":929,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["request.generalaccess",{"_index":842,"title":{},"body":{"classes/CreateLocalFileRequest.html":{}}}],["request.uploaderid",{"_index":843,"title":{},"body":{"classes/CreateLocalFileRequest.html":{}}}],["request.url",{"_index":1805,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["requested",{"_index":597,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConflictErrorResponse.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{}}}],["requests",{"_index":264,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"miscellaneous/enumerations.html":{}}}],["requests.exception.ts",{"_index":1944,"title":{},"body":{"classes/TooManyRequestsException.html":{}}}],["requests.exception.ts:15",{"_index":1945,"title":{},"body":{"classes/TooManyRequestsException.html":{}}}],["requesttimeouterrorresponse",{"_index":1777,"title":{"classes/RequestTimeoutErrorResponse.html":{}},"body":{"classes/RequestTimeoutErrorResponse.html":{}}}],["requesttimeoutexception",{"_index":1781,"title":{"classes/RequestTimeoutException.html":{}},"body":{"classes/RequestTimeoutException.html":{},"injectables/TimeoutInterceptor.html":{}}}],["requesttimeoutexception()`the",{"_index":1785,"title":{},"body":{"classes/RequestTimeoutException.html":{}}}],["requestwithauthuser",{"_index":497,"title":{"interfaces/RequestWithAuthUser.html":{}},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"interfaces/RequestWithAuthUser.html":{},"controllers/UsersController.html":{}}}],["res",{"_index":1500,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"controllers/StoragesController.html":{},"miscellaneous/functions.html":{}}}],["reset",{"_index":453,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonServicesModule.html":{},"modules/PostsModule.html":{},"modules/ServicesModule.html":{},"modules/StoragesModule.html":{},"modules/TasksModule.html":{},"modules/TopicsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1228,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"miscellaneous/functions.html":{}}}],["respective",{"_index":2521,"title":{},"body":{"miscellaneous/functions.html":{}}}],["response",{"_index":221,"title":{"interfaces/Response.html":{}},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"controllers/PostsController.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"controllers/StoragesController.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"controllers/TopicsController.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"controllers/UsersController.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["response.decorator",{"_index":251,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["response.decorator.ts",{"_index":218,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"miscellaneous/typealiases.html":{}}}],["response.dto",{"_index":523,"title":{},"body":{"controllers/AuthController.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"classes/PostResponse.html":{},"controllers/PostsController.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"classes/TopicResponse.html":{},"controllers/TopicsController.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{},"controllers/UsersController.html":{}}}],["response.dto.ts",{"_index":729,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/PostResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SignInResponse.html":{},"classes/SuccessResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TopicResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{}}}],["response.dto.ts:16",{"_index":1933,"title":{},"body":{"classes/TimestampResponse.html":{}}}],["response.dto.ts:17",{"_index":1827,"title":{},"body":{"classes/SignInResponse.html":{}}}],["response.dto.ts:21",{"_index":1890,"title":{},"body":{"classes/SuccessResponse.html":{}}}],["response.dto.ts:22",{"_index":1934,"title":{},"body":{"classes/TimestampResponse.html":{}}}],["response.dto.ts:23",{"_index":1830,"title":{},"body":{"classes/SignInResponse.html":{},"classes/TopicResponse.html":{}}}],["response.dto.ts:25",{"_index":1045,"title":{},"body":{"classes/ErrorResponse.html":{}}}],["response.dto.ts:27",{"_index":1892,"title":{},"body":{"classes/SuccessResponse.html":{}}}],["response.dto.ts:30",{"_index":2209,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:31",{"_index":1047,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/PostResponse.html":{}}}],["response.dto.ts:33",{"_index":1889,"title":{},"body":{"classes/SuccessResponse.html":{}}}],["response.dto.ts:34",{"_index":2193,"title":{},"body":{"classes/UserProfileResponse.html":{}}}],["response.dto.ts:36",{"_index":2204,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:37",{"_index":1044,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/PostResponse.html":{}}}],["response.dto.ts:39",{"_index":1891,"title":{},"body":{"classes/SuccessResponse.html":{}}}],["response.dto.ts:40",{"_index":2194,"title":{},"body":{"classes/UserProfileResponse.html":{}}}],["response.dto.ts:42",{"_index":2206,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:43",{"_index":1046,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/PostResponse.html":{}}}],["response.dto.ts:45",{"_index":1888,"title":{},"body":{"classes/SuccessResponse.html":{}}}],["response.dto.ts:46",{"_index":2191,"title":{},"body":{"classes/UserProfileResponse.html":{}}}],["response.dto.ts:48",{"_index":1887,"title":{},"body":{"classes/SuccessResponse.html":{}}}],["response.dto.ts:49",{"_index":1043,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/PostResponse.html":{}}}],["response.dto.ts:50",{"_index":2208,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:52",{"_index":2195,"title":{},"body":{"classes/UserProfileResponse.html":{}}}],["response.dto.ts:55",{"_index":1042,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/PostResponse.html":{}}}],["response.dto.ts:56",{"_index":2205,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:58",{"_index":2196,"title":{},"body":{"classes/UserProfileResponse.html":{}}}],["response.dto.ts:61",{"_index":1034,"title":{},"body":{"classes/ErrorResponse.html":{}}}],["response.dto.ts:62",{"_index":2207,"title":{},"body":{"classes/UserResponse.html":{}}}],["response.dto.ts:64",{"_index":2192,"title":{},"body":{"classes/UserProfileResponse.html":{}}}],["response.dto.ts:70",{"_index":2190,"title":{},"body":{"classes/UserProfileResponse.html":{}}}],["response.error",{"_index":799,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["response.interface",{"_index":609,"title":{},"body":{"injectables/AuthService.html":{}}}],["response.interface.ts",{"_index":578,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["response.set",{"_index":1849,"title":{},"body":{"controllers/StoragesController.html":{}}}],["response.statuscode",{"_index":1802,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["responsebody",{"_index":1808,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["responsebody?.message",{"_index":1809,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["responsible",{"_index":458,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/CommonServicesModule.html":{},"injectables/PostsService.html":{},"modules/ServicesModule.html":{},"injectables/StoragesService.html":{},"injectables/TasksService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["restriction",{"_index":2627,"title":{},"body":{"license.html":{}}}],["resulted",{"_index":1138,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["results",{"_index":50,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"modules/ServicesModule.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TimestampResponse.html":{},"interfaces/TokenPayload.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrors.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retrieval",{"_index":1700,"title":{},"body":{"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["retrieved",{"_index":1624,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["return",{"_index":291,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/DatabaseEnvironmentVariables.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"interfaces/Response.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":1041,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/SuccessResponse.html":{}}}],["returns",{"_index":30,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileSeeder.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":2630,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":2423,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":108,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemoveRoleTable1679272991389.html":{},"miscellaneous/enumerations.html":{}}}],["role.enum",{"_index":943,"title":{},"body":{"classes/CreateUserRequest.html":{},"entities/User.html":{},"classes/UserResponse.html":{}}}],["role.enum.ts",{"_index":2443,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["role\\`(\\`id",{"_index":118,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["roleid",{"_index":111,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["roles",{"_index":114,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/CreateUserRequest.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["route",{"_index":279,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/functions.html":{}}}],["route's",{"_index":1303,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["run",{"_index":1419,"title":{},"body":{"classes/LocalFileSeeder.html":{},"injectables/PostByIdHook.html":{},"classes/PostSeeder.html":{},"injectables/TopicByIdHook.html":{},"classes/TopicSeeder.html":{},"injectables/UserByIdHook.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{},"index.html":{}}}],["run(datasource",{"_index":1420,"title":{},"body":{"classes/LocalFileSeeder.html":{},"classes/PostSeeder.html":{},"classes/TopicSeeder.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{}}}],["run(undefined",{"_index":1555,"title":{},"body":{"injectables/PostByIdHook.html":{},"injectables/TopicByIdHook.html":{},"injectables/UserByIdHook.html":{}}}],["rxjs",{"_index":1487,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["s+/g",{"_index":1014,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["same",{"_index":2148,"title":{},"body":{"entities/User.html":{},"entities/UserProfile.html":{}}}],["scalable",{"_index":2569,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":658,"title":{},"body":{"modules/ConfigModule.html":{}}}],["schedulemodule.forroot",{"_index":718,"title":{},"body":{"modules/ConfigModule.html":{}}}],["scheduling",{"_index":648,"title":{},"body":{"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"injectables/TasksService.html":{}}}],["schema",{"_index":2512,"title":{},"body":{"miscellaneous/functions.html":{}}}],["scope",{"_index":276,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"miscellaneous/functions.html":{}}}],["scoped",{"_index":2550,"title":{},"body":{"miscellaneous/functions.html":{}}}],["secret",{"_index":624,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtEnvironmentVariables.html":{}}}],["secretorkey",{"_index":1352,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":352,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"classes/InternalServerErrorException.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NotFoundException.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostSeeder.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"classes/SuccessResponse.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TooManyRequestsException.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{}}}],["seeder",{"_index":1418,"title":{},"body":{"classes/LocalFileSeeder.html":{},"classes/PostSeeder.html":{},"classes/TopicSeeder.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{}}}],["seederoptions",{"_index":989,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["seeds",{"_index":1016,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["sell",{"_index":2637,"title":{},"body":{"license.html":{}}}],["serve",{"_index":2502,"title":{},"body":{"miscellaneous/functions.html":{}}}],["server",{"_index":256,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"controllers/AuthController.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["service",{"_index":460,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/CommonServicesModule.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TasksService.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["services",{"_index":646,"title":{},"body":{"modules/CommonServicesModule.html":{},"modules/ServicesModule.html":{}}}],["services.module",{"_index":484,"title":{},"body":{"modules/AppModule.html":{}}}],["services.module.ts",{"_index":644,"title":{},"body":{"modules/CommonServicesModule.html":{}}}],["services/posts/entities/post.entity",{"_index":1589,"title":{},"body":{"classes/PostSeeder.html":{}}}],["services/services.module",{"_index":486,"title":{},"body":{"modules/AppModule.html":{}}}],["services/storages/entities/local",{"_index":1423,"title":{},"body":{"classes/LocalFileSeeder.html":{}}}],["services/topics/entities/topic.entity",{"_index":1973,"title":{},"body":{"classes/TopicSeeder.html":{}}}],["services/users/entities/user",{"_index":2199,"title":{},"body":{"classes/UserProfileSeeder.html":{}}}],["services/users/entities/user.entity",{"_index":2212,"title":{},"body":{"classes/UserSeeder.html":{}}}],["servicesmodule",{"_index":451,"title":{"modules/ServicesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ServicesModule.html":{},"modules.html":{},"overview.html":{}}}],["set",{"_index":187,"title":{},"body":{"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"entities/UserProfile.html":{},"miscellaneous/functions.html":{}}}],["settimeout",{"_index":1115,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["settimeout(async",{"_index":1123,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["shall",{"_index":2645,"title":{},"body":{"license.html":{}}}],["shape",{"_index":963,"title":{},"body":{"classes/CreatedSuccessResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/OkSuccessResponse.html":{},"interfaces/Response.html":{},"classes/SuccessResponse.html":{},"injectables/TransformInterceptor.html":{},"interfaces/ValidationErrors.html":{}}}],["side",{"_index":2570,"title":{},"body":{"index.html":{}}}],["sign",{"_index":1820,"title":{},"body":{"classes/SignInRequest.html":{}}}],["signed",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInResponse.html":{},"entities/User.html":{},"classes/UserResponse.html":{}}}],["signin",{"_index":495,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(undefined",{"_index":506,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(user",{"_index":595,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinrequest",{"_index":537,"title":{"classes/SignInRequest.html":{}},"body":{"controllers/AuthController.html":{},"classes/SignInRequest.html":{}}}],["signinrequest})@apisuccessesresponse(['undefined'])@apierrorsresponse(['undefined",{"_index":509,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinresponse",{"_index":540,"title":{"classes/SignInResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/SignInResponse.html":{}}}],["signoptions",{"_index":1327,"title":{},"body":{"classes/JwtEnvironmentVariables.html":{}}}],["signs",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["singleline",{"_index":1463,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["socket",{"_index":1761,"title":{},"body":{"classes/RedisStoreEnvironmentVariables.html":{}}}],["software",{"_index":2622,"title":{},"body":{"license.html":{}}}],["something",{"_index":1139,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"modules/ServicesModule.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TimestampResponse.html":{},"interfaces/TokenPayload.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrors.html":{},"index.html":{}}}],["specific",{"_index":1341,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["specified",{"_index":389,"title":{},"body":{"controllers/AppController.html":{},"injectables/LoggingInterceptor.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["specify",{"_index":1027,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["sponsors",{"_index":2593,"title":{},"body":{"index.html":{}}}],["src/.../access",{"_index":2431,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../api",{"_index":2686,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../app.config.ts",{"_index":2433,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../csurf.middleware.ts",{"_index":2475,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../error",{"_index":2434,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../file",{"_index":2436,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../is",{"_index":2476,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../local",{"_index":2483,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../logger.middleware.ts",{"_index":2486,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2473,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../not",{"_index":2487,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post.permissions.ts",{"_index":2439,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../to",{"_index":2479,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../topic.permissions.ts",{"_index":2688,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../use",{"_index":2492,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user",{"_index":2442,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.permissions.ts",{"_index":2441,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":375,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:41",{"_index":394,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:60",{"_index":382,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":455,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/decorators/interceptors/not",{"_index":2544,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/common/decorators/open",{"_index":215,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/dto/responses/error",{"_index":1031,"title":{},"body":{"classes/ErrorResponse.html":{}}}],["src/common/dto/responses/errors/conflict",{"_index":728,"title":{},"body":{"classes/ConflictErrorResponse.html":{}}}],["src/common/dto/responses/errors/forbidden",{"_index":1053,"title":{},"body":{"classes/ForbiddenErrorResponse.html":{}}}],["src/common/dto/responses/errors/internal",{"_index":1179,"title":{},"body":{"classes/InternalServerErrorErrorResponse.html":{}}}],["src/common/dto/responses/errors/not",{"_index":1505,"title":{},"body":{"classes/NotFoundErrorResponse.html":{}}}],["src/common/dto/responses/errors/request",{"_index":1778,"title":{},"body":{"classes/RequestTimeoutErrorResponse.html":{}}}],["src/common/dto/responses/errors/too",{"_index":1938,"title":{},"body":{"classes/TooManyRequestsErrorResponse.html":{}}}],["src/common/dto/responses/errors/unauthorized",{"_index":2067,"title":{},"body":{"classes/UnauthorizedErrorResponse.html":{}}}],["src/common/dto/responses/errors/unprocessable",{"_index":2076,"title":{},"body":{"classes/UnprocessableEntityErrorResponse.html":{}}}],["src/common/dto/responses/success",{"_index":1886,"title":{},"body":{"classes/SuccessResponse.html":{}}}],["src/common/dto/responses/successes/created",{"_index":962,"title":{},"body":{"classes/CreatedSuccessResponse.html":{}}}],["src/common/dto/responses/successes/no",{"_index":1502,"title":{},"body":{"classes/NoContentSuccessResponse.html":{}}}],["src/common/dto/responses/successes/ok",{"_index":1515,"title":{},"body":{"classes/OkSuccessResponse.html":{}}}],["src/common/dto/responses/timestamp",{"_index":1932,"title":{},"body":{"classes/TimestampResponse.html":{}}}],["src/common/entities/generic.entity.ts",{"_index":1063,"title":{},"body":{"classes/GenericEntity.html":{}}}],["src/common/entities/generic.entity.ts:13",{"_index":1071,"title":{},"body":{"classes/GenericEntity.html":{}}}],["src/common/entities/generic.entity.ts:16",{"_index":1069,"title":{},"body":{"classes/GenericEntity.html":{}}}],["src/common/enums/http/error",{"_index":2451,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/exceptions/conflict.exception.ts",{"_index":768,"title":{},"body":{"classes/ConflictException.html":{}}}],["src/common/exceptions/conflict.exception.ts:11",{"_index":775,"title":{},"body":{"classes/ConflictException.html":{}}}],["src/common/exceptions/content",{"_index":801,"title":{},"body":{"classes/ContentTooLargeException.html":{}}}],["src/common/exceptions/forbidden.exception.ts",{"_index":1057,"title":{},"body":{"classes/ForbiddenException.html":{}}}],["src/common/exceptions/forbidden.exception.ts:12",{"_index":1058,"title":{},"body":{"classes/ForbiddenException.html":{}}}],["src/common/exceptions/internal",{"_index":1180,"title":{},"body":{"classes/InternalServerErrorException.html":{}}}],["src/common/exceptions/not",{"_index":1508,"title":{},"body":{"classes/NotFoundException.html":{}}}],["src/common/exceptions/request",{"_index":1782,"title":{},"body":{"classes/RequestTimeoutException.html":{}}}],["src/common/exceptions/too",{"_index":1943,"title":{},"body":{"classes/TooManyRequestsException.html":{}}}],["src/common/exceptions/unauthorized.exception.ts",{"_index":2070,"title":{},"body":{"classes/UnauthorizedException.html":{}}}],["src/common/exceptions/unauthorized.exception.ts:14",{"_index":2071,"title":{},"body":{"classes/UnauthorizedException.html":{}}}],["src/common/exceptions/unprocessable",{"_index":2079,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["src/common/filters/http",{"_index":1148,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/common/interceptors/http",{"_index":1073,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["src/common/interceptors/logging.interceptor.ts",{"_index":1474,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/common/interceptors/logging.interceptor.ts:17",{"_index":1480,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/common/interceptors/logging.interceptor.ts:31",{"_index":1483,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/common/interceptors/timeout.interceptor.ts",{"_index":1912,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/common/interceptors/timeout.interceptor.ts:26",{"_index":1919,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/common/interceptors/timeout.interceptor.ts:37",{"_index":1920,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/common/interceptors/transform.interceptor.ts",{"_index":1790,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["src/common/interceptors/transform.interceptor.ts:34",{"_index":2064,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/common/interceptors/transform.interceptor.ts:45",{"_index":2065,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/common/interfaces/http/validation",{"_index":2385,"title":{},"body":{"interfaces/ValidationErrors.html":{}}}],["src/common/middlewares/csurf.middleware.ts",{"_index":2496,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/common/middlewares/logger.middleware.ts",{"_index":2541,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/common/pipes/parse",{"_index":1519,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["src/common/services/common",{"_index":643,"title":{},"body":{"modules/CommonServicesModule.html":{}}}],["src/common/services/tasks/tasks.module.ts",{"_index":1898,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/common/services/tasks/tasks.service.ts",{"_index":1901,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/common/services/tasks/tasks.service.ts:15",{"_index":1904,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/common/services/tasks/tasks.service.ts:9",{"_index":1907,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/common/utils/transformers/to",{"_index":2515,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/common/utils/validators/is",{"_index":2506,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/config/app/app.config.ts",{"_index":315,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"miscellaneous/enumerations.html":{}}}],["src/config/app/app.config.ts:43",{"_index":440,"title":{},"body":{"classes/AppEnvironmentVariables.html":{}}}],["src/config/app/app.config.ts:47",{"_index":438,"title":{},"body":{"classes/AppEnvironmentVariables.html":{}}}],["src/config/app/app.config.ts:52",{"_index":442,"title":{},"body":{"classes/AppEnvironmentVariables.html":{}}}],["src/config/app/app.config.ts:57",{"_index":436,"title":{},"body":{"classes/AppEnvironmentVariables.html":{}}}],["src/config/auth/jwt.config.ts",{"_index":1320,"title":{},"body":{"classes/JwtEnvironmentVariables.html":{}}}],["src/config/auth/jwt.config.ts:14",{"_index":1324,"title":{},"body":{"classes/JwtEnvironmentVariables.html":{}}}],["src/config/auth/jwt.config.ts:18",{"_index":1323,"title":{},"body":{"classes/JwtEnvironmentVariables.html":{}}}],["src/config/cache/cache.config.ts",{"_index":628,"title":{},"body":{"classes/CacheEnvironmentVariables.html":{}}}],["src/config/cache/cache.config.ts:17",{"_index":632,"title":{},"body":{"classes/CacheEnvironmentVariables.html":{}}}],["src/config/cache/cache.config.ts:22",{"_index":631,"title":{},"body":{"classes/CacheEnvironmentVariables.html":{}}}],["src/config/cache/redis",{"_index":1755,"title":{},"body":{"classes/RedisStoreEnvironmentVariables.html":{}}}],["src/config/config.module.ts",{"_index":650,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/config/database/database.config.ts",{"_index":973,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["src/config/database/database.config.ts:26",{"_index":980,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["src/config/database/database.config.ts:31",{"_index":984,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["src/config/database/database.config.ts:35",{"_index":986,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["src/config/database/database.config.ts:39",{"_index":983,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["src/config/database/database.config.ts:43",{"_index":981,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["src/config/database/database.config.ts:48",{"_index":985,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["src/config/file",{"_index":1432,"title":{},"body":{"classes/LocalFileUploadEnvironmentVariables.html":{}}}],["src/config/logger/logger.config.ts",{"_index":1450,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["src/config/logger/logger.config.ts:21",{"_index":1455,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["src/config/logger/logger.config.ts:26",{"_index":1454,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["src/config/logger/logger.config.ts:31",{"_index":1456,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["src/config/rate",{"_index":1745,"title":{},"body":{"classes/RateLimitingEnvironmentVariables.html":{}}}],["src/database/factories/**/*{.ts,.js",{"_index":1030,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["src/database/migrations/1668674726738",{"_index":1173,"title":{},"body":{"classes/InitialMigration1668674726738.html":{}}}],["src/database/migrations/1669010304048",{"_index":6,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{}}}],["src/database/migrations/1669618726311",{"_index":143,"title":{},"body":{"classes/AddUserProfileTable1669618726311.html":{}}}],["src/database/migrations/1675692342862",{"_index":53,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{}}}],["src/database/migrations/1675697129483",{"_index":103,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{}}}],["src/database/migrations/1675699186800",{"_index":176,"title":{},"body":{"classes/AlterRoleNameAttribute1675699186800.html":{}}}],["src/database/migrations/1676872212399",{"_index":196,"title":{},"body":{"classes/AlterTablesIdentifierToUuid1676872212399.html":{}}}],["src/database/migrations/1676900183425",{"_index":167,"title":{},"body":{"classes/AlterPhoneAttributeUniqueness1676900183425.html":{}}}],["src/database/migrations/1678073082722",{"_index":90,"title":{},"body":{"classes/AddPostTable1678073082722.html":{}}}],["src/database/migrations/1678096726170",{"_index":182,"title":{},"body":{"classes/AlterTablesCascade1678096726170.html":{}}}],["src/database/migrations/1678183368786",{"_index":189,"title":{},"body":{"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{}}}],["src/database/migrations/1678189980290",{"_index":160,"title":{},"body":{"classes/AlterLastSignedInAtAttribute1678189980290.html":{}}}],["src/database/migrations/1678285751957",{"_index":1765,"title":{},"body":{"classes/RemovePostTitleAttribute1678285751957.html":{}}}],["src/database/migrations/1678958507781",{"_index":122,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{}}}],["src/database/migrations/1679272991389",{"_index":1772,"title":{},"body":{"classes/RemoveRoleTable1679272991389.html":{}}}],["src/database/migrations/1679276151891",{"_index":207,"title":{},"body":{"classes/AlterUserRolesAttribute1679276151891.html":{}}}],["src/database/seeds/**/*{.ts,.js",{"_index":1024,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["src/database/seeds/local",{"_index":1018,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"classes/LocalFileSeeder.html":{}}}],["src/database/seeds/post.seeder.ts",{"_index":1023,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"classes/PostSeeder.html":{}}}],["src/database/seeds/post.seeder.ts:10",{"_index":1588,"title":{},"body":{"classes/PostSeeder.html":{}}}],["src/database/seeds/topic.seeder.ts",{"_index":1022,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"classes/TopicSeeder.html":{}}}],["src/database/seeds/topic.seeder.ts:10",{"_index":1972,"title":{},"body":{"classes/TopicSeeder.html":{}}}],["src/database/seeds/user",{"_index":1020,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"classes/UserProfileSeeder.html":{}}}],["src/database/seeds/user.seeder.ts",{"_index":1017,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"classes/UserSeeder.html":{}}}],["src/database/seeds/user.seeder.ts:10",{"_index":2211,"title":{},"body":{"classes/UserSeeder.html":{}}}],["src/main.ts",{"_index":2494,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/services/auth/auth.controller.ts",{"_index":492,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/services/auth/auth.controller.ts:103",{"_index":510,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/services/auth/auth.controller.ts:64",{"_index":499,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/services/auth/auth.module.ts",{"_index":567,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/services/auth/auth.service.ts",{"_index":584,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth/auth.service.ts:18",{"_index":592,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth/auth.service.ts:48",{"_index":600,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth/auth.service.ts:67",{"_index":596,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth/decorators/use",{"_index":2552,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/services/auth/dto/requests/sign",{"_index":1819,"title":{},"body":{"classes/SignInRequest.html":{}}}],["src/services/auth/dto/responses/sign",{"_index":1824,"title":{},"body":{"classes/SignInResponse.html":{}}}],["src/services/auth/enums/access",{"_index":2444,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/services/auth/guards/jwt",{"_index":1294,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/services/auth/guards/local",{"_index":1360,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["src/services/auth/interface/auth",{"_index":577,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["src/services/auth/interface/request",{"_index":1788,"title":{},"body":{"interfaces/RequestWithAuthUser.html":{}}}],["src/services/auth/interface/token",{"_index":1935,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["src/services/auth/strategies/jwt.strategy.ts",{"_index":1329,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/services/auth/strategies/jwt.strategy.ts:22",{"_index":1335,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/services/auth/strategies/jwt.strategy.ts:57",{"_index":1338,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/services/auth/strategies/local.strategy.ts",{"_index":1442,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/services/auth/strategies/local.strategy.ts:18",{"_index":1443,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/services/auth/strategies/local.strategy.ts:45",{"_index":1445,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/services/posts/dto/params/post",{"_index":1571,"title":{},"body":{"classes/PostIdParam.html":{}}}],["src/services/posts/dto/requests/create",{"_index":845,"title":{},"body":{"classes/CreatePostRequest.html":{}}}],["src/services/posts/dto/requests/update",{"_index":2097,"title":{},"body":{"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{}}}],["src/services/posts/dto/responses/post",{"_index":1577,"title":{},"body":{"classes/PostResponse.html":{}}}],["src/services/posts/entities/post.entity.ts",{"_index":1528,"title":{},"body":{"entities/Post.html":{}}}],["src/services/posts/entities/post.entity.ts:32",{"_index":1533,"title":{},"body":{"entities/Post.html":{}}}],["src/services/posts/entities/post.entity.ts:35",{"_index":1532,"title":{},"body":{"entities/Post.html":{}}}],["src/services/posts/entities/post.entity.ts:38",{"_index":1531,"title":{},"body":{"entities/Post.html":{}}}],["src/services/posts/entities/post.entity.ts:44",{"_index":1530,"title":{},"body":{"entities/Post.html":{}}}],["src/services/posts/entities/post.entity.ts:47",{"_index":1536,"title":{},"body":{"entities/Post.html":{}}}],["src/services/posts/entities/post.entity.ts:55",{"_index":1540,"title":{},"body":{"entities/Post.html":{}}}],["src/services/posts/permissions/hooks/post",{"_index":1546,"title":{},"body":{"injectables/PostByIdHook.html":{}}}],["src/services/posts/permissions/post.permissions.ts",{"_index":2465,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/posts/pipes/post",{"_index":1564,"title":{},"body":{"injectables/PostByIdPipe.html":{}}}],["src/services/posts/posts.controller.ts",{"_index":1604,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/services/posts/posts.controller.ts:137",{"_index":1623,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/services/posts/posts.controller.ts:180",{"_index":1627,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/services/posts/posts.controller.ts:220",{"_index":1631,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/services/posts/posts.controller.ts:272",{"_index":1620,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/services/posts/posts.controller.ts:319",{"_index":1635,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/services/posts/posts.controller.ts:89",{"_index":1614,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/services/posts/posts.module.ts",{"_index":1692,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/services/posts/posts.service.ts",{"_index":1698,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/services/posts/posts.service.ts:102",{"_index":1711,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/services/posts/posts.service.ts:119",{"_index":1723,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/services/posts/posts.service.ts:13",{"_index":1706,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/services/posts/posts.service.ts:35",{"_index":1708,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/services/posts/posts.service.ts:50",{"_index":1715,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/services/posts/posts.service.ts:65",{"_index":1718,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/services/posts/posts.service.ts:83",{"_index":1720,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/services/posts/validators/is",{"_index":1274,"title":{},"body":{"injectables/IsPostExistValidator.html":{},"miscellaneous/functions.html":{}}}],["src/services/services.module.ts",{"_index":1814,"title":{},"body":{"modules/ServicesModule.html":{}}}],["src/services/storages/dto/params/local",{"_index":1411,"title":{},"body":{"classes/LocalFileIdParam.html":{}}}],["src/services/storages/dto/requests/create",{"_index":811,"title":{},"body":{"classes/CreateLocalFileRequest.html":{}}}],["src/services/storages/entities/local",{"_index":1362,"title":{},"body":{"entities/LocalFile.html":{}}}],["src/services/storages/enums/file",{"_index":2464,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/services/storages/interceptors/local",{"_index":2531,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/services/storages/pipes/local",{"_index":1384,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{}}}],["src/services/storages/storages.controller.ts",{"_index":1832,"title":{},"body":{"controllers/StoragesController.html":{}}}],["src/services/storages/storages.controller.ts:61",{"_index":1837,"title":{},"body":{"controllers/StoragesController.html":{}}}],["src/services/storages/storages.module.ts",{"_index":1857,"title":{},"body":{"modules/StoragesModule.html":{}}}],["src/services/storages/storages.service.ts",{"_index":1860,"title":{},"body":{"injectables/StoragesService.html":{}}}],["src/services/storages/storages.service.ts:12",{"_index":1865,"title":{},"body":{"injectables/StoragesService.html":{}}}],["src/services/storages/storages.service.ts:34",{"_index":1867,"title":{},"body":{"injectables/StoragesService.html":{}}}],["src/services/storages/storages.service.ts:53",{"_index":1871,"title":{},"body":{"injectables/StoragesService.html":{}}}],["src/services/storages/storages.service.ts:70",{"_index":1873,"title":{},"body":{"injectables/StoragesService.html":{}}}],["src/services/storages/storages.service.ts:88",{"_index":1869,"title":{},"body":{"injectables/StoragesService.html":{}}}],["src/services/storages/validators/is",{"_index":1235,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{},"miscellaneous/functions.html":{}}}],["src/services/topics/dto/params/topic",{"_index":1965,"title":{},"body":{"classes/TopicIdParam.html":{}}}],["src/services/topics/dto/requests/create",{"_index":876,"title":{},"body":{"classes/CreateTopicRequest.html":{}}}],["src/services/topics/dto/requests/update",{"_index":2105,"title":{},"body":{"classes/UpdateTopicRequest.html":{}}}],["src/services/topics/dto/responses/topic",{"_index":1968,"title":{},"body":{"classes/TopicResponse.html":{}}}],["src/services/topics/entities/topic.entity.ts",{"_index":1948,"title":{},"body":{"entities/Topic.html":{}}}],["src/services/topics/entities/topic.entity.ts:19",{"_index":1949,"title":{},"body":{"entities/Topic.html":{}}}],["src/services/topics/entities/topic.entity.ts:22",{"_index":1951,"title":{},"body":{"entities/Topic.html":{}}}],["src/services/topics/entities/topic.entity.ts:28",{"_index":1952,"title":{},"body":{"entities/Topic.html":{}}}],["src/services/topics/permissions/hooks/topic",{"_index":1955,"title":{},"body":{"injectables/TopicByIdHook.html":{}}}],["src/services/topics/permissions/topic.permissions.ts",{"_index":2693,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/services/topics/pipes/topic",{"_index":1960,"title":{},"body":{"injectables/TopicByIdPipe.html":{}}}],["src/services/topics/topics.controller.ts",{"_index":1978,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/services/topics/topics.controller.ts:124",{"_index":1994,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/services/topics/topics.controller.ts:167",{"_index":1997,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/services/topics/topics.controller.ts:207",{"_index":2001,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/services/topics/topics.controller.ts:259",{"_index":1992,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/services/topics/topics.controller.ts:81",{"_index":1987,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/services/topics/topics.module.ts",{"_index":2028,"title":{},"body":{"modules/TopicsModule.html":{}}}],["src/services/topics/topics.service.ts",{"_index":2032,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/services/topics/topics.service.ts:109",{"_index":2046,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/services/topics/topics.service.ts:12",{"_index":2036,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/services/topics/topics.service.ts:125",{"_index":2039,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/services/topics/topics.service.ts:34",{"_index":2038,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/services/topics/topics.service.ts:49",{"_index":2040,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/services/topics/topics.service.ts:62",{"_index":2043,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/services/topics/topics.service.ts:77",{"_index":2041,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/services/topics/topics.service.ts:92",{"_index":2045,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/services/topics/validators/is",{"_index":1255,"title":{},"body":{"injectables/IsNameUniqueValidator.html":{},"injectables/IsTopicExistValidator.html":{},"miscellaneous/functions.html":{}}}],["src/services/users/dto/params/users/user",{"_index":2164,"title":{},"body":{"classes/UserIdParam.html":{}}}],["src/services/users/dto/requests/user",{"_index":886,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{}}}],["src/services/users/dto/requests/users/create",{"_index":922,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["src/services/users/dto/requests/users/update",{"_index":2107,"title":{},"body":{"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{}}}],["src/services/users/dto/responses/user",{"_index":2188,"title":{},"body":{"classes/UserProfileResponse.html":{}}}],["src/services/users/dto/responses/users/user",{"_index":2203,"title":{},"body":{"classes/UserResponse.html":{}}}],["src/services/users/entities/user",{"_index":2165,"title":{},"body":{"entities/UserProfile.html":{}}}],["src/services/users/entities/user.entity.ts",{"_index":2130,"title":{},"body":{"entities/User.html":{}}}],["src/services/users/entities/user.entity.ts:26",{"_index":2132,"title":{},"body":{"entities/User.html":{}}}],["src/services/users/entities/user.entity.ts:29",{"_index":2144,"title":{},"body":{"entities/User.html":{}}}],["src/services/users/entities/user.entity.ts:32",{"_index":2131,"title":{},"body":{"entities/User.html":{}}}],["src/services/users/entities/user.entity.ts:35",{"_index":2138,"title":{},"body":{"entities/User.html":{}}}],["src/services/users/entities/user.entity.ts:39",{"_index":2137,"title":{},"body":{"entities/User.html":{}}}],["src/services/users/entities/user.entity.ts:42",{"_index":2143,"title":{},"body":{"entities/User.html":{}}}],["src/services/users/entities/user.entity.ts:47",{"_index":2135,"title":{},"body":{"entities/User.html":{}}}],["src/services/users/entities/user.entity.ts:56",{"_index":2141,"title":{},"body":{"entities/User.html":{}}}],["src/services/users/enums/user",{"_index":2469,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/services/users/permissions/hooks/users/user",{"_index":2155,"title":{},"body":{"injectables/UserByIdHook.html":{}}}],["src/services/users/permissions/user.permissions.ts",{"_index":2466,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/users/pipes/user",{"_index":2160,"title":{},"body":{"injectables/UserByIdPipe.html":{}}}],["src/services/users/users.controller.ts",{"_index":2217,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/services/users/users.controller.ts:140",{"_index":2237,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/services/users/users.controller.ts:183",{"_index":2240,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/services/users/users.controller.ts:223",{"_index":2243,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/services/users/users.controller.ts:275",{"_index":2235,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/services/users/users.controller.ts:322",{"_index":2246,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/services/users/users.controller.ts:377",{"_index":2261,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/services/users/users.controller.ts:432",{"_index":2249,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/services/users/users.controller.ts:500",{"_index":2258,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/services/users/users.controller.ts:97",{"_index":2230,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/services/users/users.module.ts",{"_index":2334,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/services/users/users.service.ts",{"_index":2338,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/services/users/users.service.ts:102",{"_index":2351,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/services/users/users.service.ts:118",{"_index":2354,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/services/users/users.service.ts:136",{"_index":2357,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/services/users/users.service.ts:14",{"_index":2345,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/services/users/users.service.ts:155",{"_index":2348,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/services/users/users.service.ts:172",{"_index":2359,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/services/users/users.service.ts:193",{"_index":2361,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/services/users/users.service.ts:35",{"_index":2347,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/services/users/users.service.ts:53",{"_index":2349,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/services/users/users.service.ts:68",{"_index":2352,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/services/users/users.service.ts:84",{"_index":2356,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/services/users/validators/is",{"_index":1187,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"miscellaneous/functions.html":{}}}],["ssl",{"_index":999,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["staging",{"_index":343,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"miscellaneous/enumerations.html":{}}}],["start",{"_index":2576,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2579,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":2580,"title":{},"body":{"index.html":{}}}],["started",{"_index":2563,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":2572,"title":{},"body":{"index.html":{}}}],["static",{"_index":815,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{}}}],["status",{"_index":745,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/JwtAuthGuard.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"classes/SuccessResponse.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{}}}],["statuscode",{"_index":736,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"interfaces/Response.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{}}}],["stay",{"_index":2601,"title":{},"body":{"index.html":{}}}],["storage",{"_index":1699,"title":{},"body":{"injectables/PostsService.html":{},"modules/ServicesModule.html":{},"injectables/StoragesService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["storages",{"_index":1241,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{},"injectables/LocalFileByIdPipe.html":{},"controllers/StoragesController.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"controllers/UsersController.html":{}}}],["storages.controller",{"_index":1858,"title":{},"body":{"modules/StoragesModule.html":{}}}],["storages.service",{"_index":1245,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{},"injectables/LocalFileByIdPipe.html":{},"modules/StoragesModule.html":{}}}],["storages/dto/requests/create",{"_index":2268,"title":{},"body":{"controllers/UsersController.html":{}}}],["storages/entities/local",{"_index":2185,"title":{},"body":{"entities/UserProfile.html":{}}}],["storages/enums/file",{"_index":2269,"title":{},"body":{"controllers/UsersController.html":{}}}],["storages/storages.module",{"_index":1818,"title":{},"body":{"modules/ServicesModule.html":{},"modules/UsersModule.html":{}}}],["storages/storages.service",{"_index":2267,"title":{},"body":{"controllers/UsersController.html":{}}}],["storagescontroller",{"_index":1831,"title":{"controllers/StoragesController.html":{}},"body":{"controllers/StoragesController.html":{},"modules/StoragesModule.html":{}}}],["storagescontroller.prototype.findlocalfilebyid.name",{"_index":1846,"title":{},"body":{"controllers/StoragesController.html":{}}}],["storagesmodule",{"_index":1813,"title":{"modules/StoragesModule.html":{}},"body":{"modules/ServicesModule.html":{},"modules/StoragesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["storagesservice",{"_index":1239,"title":{"injectables/StoragesService.html":{}},"body":{"injectables/IsLocalFileExistValidator.html":{},"injectables/LocalFileByIdPipe.html":{},"modules/StoragesModule.html":{},"injectables/StoragesService.html":{},"controllers/UsersController.html":{},"overview.html":{}}}],["storagesservice.prototype.createlocalfile.name",{"_index":1876,"title":{},"body":{"injectables/StoragesService.html":{}}}],["storagesservice.prototype.deletelocalfile.name",{"_index":1884,"title":{},"body":{"injectables/StoragesService.html":{}}}],["storagesservice.prototype.findlocalfilebyid.name",{"_index":1880,"title":{},"body":{"injectables/StoragesService.html":{}}}],["storagesservice.prototype.updatelocalfile.name",{"_index":1882,"title":{},"body":{"injectables/StoragesService.html":{}}}],["store",{"_index":685,"title":{},"body":{"modules/ConfigModule.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"dependencies.html":{}}}],["store.config",{"_index":681,"title":{},"body":{"modules/ConfigModule.html":{}}}],["store.config.ts",{"_index":1756,"title":{},"body":{"classes/RedisStoreEnvironmentVariables.html":{}}}],["store.config.ts:16",{"_index":1759,"title":{},"body":{"classes/RedisStoreEnvironmentVariables.html":{}}}],["store.config.ts:21",{"_index":1760,"title":{},"body":{"classes/RedisStoreEnvironmentVariables.html":{}}}],["strategies",{"_index":1346,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strategies/jwt.strategy",{"_index":574,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":575,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1297,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["strategy](https://docs.nestjs.com/security/authentication#implementing",{"_index":1345,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":1464,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{},"controllers/StoragesController.html":{}}}],["streamable",{"_index":1838,"title":{},"body":{"controllers/StoragesController.html":{}}}],["streamablefile",{"_index":1839,"title":{},"body":{"controllers/StoragesController.html":{}}}],["streamablefile(stream",{"_index":1853,"title":{},"body":{"controllers/StoragesController.html":{}}}],["strict",{"_index":918,"title":{},"body":{"classes/CreateUserProfileRequest.html":{}}}],["string",{"_index":20,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"classes/JwtEnvironmentVariables.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"injectables/PostsService.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"interfaces/TokenPayload.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"injectables/TopicsService.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserRequest.html":{},"entities/User.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/functions.html":{}}}],["sub",{"_index":619,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/TokenPayload.html":{}}}],["subject",{"_index":1548,"title":{},"body":{"injectables/PostByIdHook.html":{},"injectables/TopicByIdHook.html":{},"injectables/UserByIdHook.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["subjectbeforefilterhook",{"_index":1557,"title":{},"body":{"injectables/PostByIdHook.html":{},"injectables/TopicByIdHook.html":{},"injectables/UserByIdHook.html":{}}}],["subjecthook",{"_index":2555,"title":{},"body":{"miscellaneous/functions.html":{}}}],["subjects",{"_index":2691,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["sublicense",{"_index":2635,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2647,"title":{},"body":{"license.html":{}}}],["success",{"_index":293,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConflictErrorResponse.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RequestTimeoutErrorResponse.html":{},"interfaces/Response.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["successes",{"_index":411,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["successes/api",{"_index":303,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{}}}],["successful",{"_index":308,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"miscellaneous/typealiases.html":{}}}],["successresponse",{"_index":521,"title":{"classes/SuccessResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatedSuccessResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/OkSuccessResponse.html":{},"controllers/PostsController.html":{},"interfaces/Response.html":{},"classes/SuccessResponse.html":{},"controllers/TopicsController.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{}}}],["successresponse:19",{"_index":1516,"title":{},"body":{"classes/OkSuccessResponse.html":{}}}],["successresponse:21",{"_index":965,"title":{},"body":{"classes/CreatedSuccessResponse.html":{},"classes/NoContentSuccessResponse.html":{}}}],["successresponse:27",{"_index":970,"title":{},"body":{"classes/CreatedSuccessResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/OkSuccessResponse.html":{}}}],["successresponse:33",{"_index":968,"title":{},"body":{"classes/CreatedSuccessResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/OkSuccessResponse.html":{}}}],["successresponse:39",{"_index":969,"title":{},"body":{"classes/CreatedSuccessResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/OkSuccessResponse.html":{}}}],["successresponse:45",{"_index":967,"title":{},"body":{"classes/CreatedSuccessResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/OkSuccessResponse.html":{}}}],["successresponse:48",{"_index":966,"title":{},"body":{"classes/CreatedSuccessResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/OkSuccessResponse.html":{}}}],["summary",{"_index":1120,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["super",{"_index":119,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/NotFoundException.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"miscellaneous/enumerations.html":{}}}],["superadmin",{"_index":2470,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["supplied",{"_index":2539,"title":{},"body":{"miscellaneous/functions.html":{}}}],["supplying",{"_index":785,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["support",{"_index":2594,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2671,"title":{},"body":{"modules.html":{}}}],["sync",{"_index":1470,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["t",{"_index":1066,"title":{},"body":{"classes/GenericEntity.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":40,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"entities/User.html":{}}}],["take",{"_index":1039,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/SuccessResponse.html":{}}}],["takes",{"_index":1475,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["tap",{"_index":1486,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["tap((res",{"_index":1497,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["target",{"_index":1232,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"classes/LoggerEnvironmentVariables.html":{}}}],["task",{"_index":647,"title":{},"body":{"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{}}}],["tasks",{"_index":1899,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["tasks.service",{"_index":1900,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":649,"title":{},"body":{"modules/CommonServicesModule.html":{}}}],["tasksmodule",{"_index":642,"title":{"modules/TasksModule.html":{}},"body":{"modules/CommonServicesModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":1897,"title":{"injectables/TasksService.html":{}},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["tdata",{"_index":964,"title":{},"body":{"classes/CreatedSuccessResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/SuccessResponse.html":{}}}],["term",{"_index":2682,"title":{},"body":{"properties.html":{}}}],["test",{"_index":346,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["test:covsupport",{"_index":2586,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2584,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2582,"title":{},"body":{"index.html":{}}}],["text",{"_index":158,"title":{},"body":{"classes/AddUserProfileTable1669618726311.html":{},"classes/InitialMigration1668674726738.html":{}}}],["thanks",{"_index":2592,"title":{},"body":{"index.html":{}}}],["then((file",{"_index":1250,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{}}}],["therefore",{"_index":1099,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.authservice.signin(user",{"_index":555,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":1448,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.cachedroutes.get(key",{"_index":1145,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.cachedroutes.get(key).includes(httpadapter.getrequesturl(request",{"_index":1143,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.cachedroutes.has(key",{"_index":1142,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.cachedroutes.set(key",{"_index":1144,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.cachedroutes.values",{"_index":1125,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.cachemanager.del(value",{"_index":1131,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.configservice.get('jwt",{"_index":613,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findbyid(id",{"_index":1743,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["this.httpadapterhost",{"_index":1107,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.jwtmoduleoptions",{"_index":612,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtmoduleoptions.secret",{"_index":625,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtmoduleoptions.signoptions?.expiresin",{"_index":626,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":623,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.localfilesrepository.create(file",{"_index":1878,"title":{},"body":{"injectables/StoragesService.html":{}}}],["this.localfilesrepository.delete(id",{"_index":1885,"title":{},"body":{"injectables/StoragesService.html":{}}}],["this.localfilesrepository.findone",{"_index":1881,"title":{},"body":{"injectables/StoragesService.html":{}}}],["this.localfilesrepository.save(createdfile",{"_index":1879,"title":{},"body":{"injectables/StoragesService.html":{}}}],["this.localfilesrepository.update(id",{"_index":1883,"title":{},"body":{"injectables/StoragesService.html":{}}}],["this.logger.debug('called",{"_index":1909,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.logger.error(`error",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{}}}],["this.logger.info",{"_index":546,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalFileByIdPipe.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["this.logger.info(`try",{"_index":421,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"injectables/PostsService.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"injectables/TopicsService.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"injectables/UsersService.html":{}}}],["this.logger.log(`after",{"_index":1498,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.logger.log(`start",{"_index":1492,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.logger.setcontext(appcontroller.name",{"_index":420,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.setcontext(authcontroller.name",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.logger.setcontext(authservice.name",{"_index":611,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.setcontext(jwtstrategy.name",{"_index":1354,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.logger.setcontext(localstrategy.name",{"_index":1446,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.logger.setcontext(postbyidhook.name",{"_index":1560,"title":{},"body":{"injectables/PostByIdHook.html":{}}}],["this.logger.setcontext(postbyidpipe.name",{"_index":1567,"title":{},"body":{"injectables/PostByIdPipe.html":{}}}],["this.logger.setcontext(postscontroller.name",{"_index":1656,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.logger.setcontext(postsservice.name",{"_index":1726,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.logger.setcontext(storagescontroller.name",{"_index":1842,"title":{},"body":{"controllers/StoragesController.html":{}}}],["this.logger.setcontext(storagesservice.name",{"_index":1875,"title":{},"body":{"injectables/StoragesService.html":{}}}],["this.logger.setcontext(topicbyidhook.name",{"_index":1956,"title":{},"body":{"injectables/TopicByIdHook.html":{}}}],["this.logger.setcontext(topicbyidpipe.name",{"_index":1961,"title":{},"body":{"injectables/TopicByIdPipe.html":{}}}],["this.logger.setcontext(topicscontroller.name",{"_index":2007,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.logger.setcontext(topicsservice.name",{"_index":2048,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.logger.setcontext(userbyidhook.name",{"_index":2156,"title":{},"body":{"injectables/UserByIdHook.html":{}}}],["this.logger.setcontext(userbyidpipe.name",{"_index":2161,"title":{},"body":{"injectables/UserByIdPipe.html":{}}}],["this.logger.setcontext(userscontroller.name",{"_index":2280,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.logger.setcontext(usersservice.name",{"_index":2363,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsrepository.create(post",{"_index":1729,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":1740,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":1732,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone",{"_index":1735,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save",{"_index":1742,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(createdpost",{"_index":1730,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.update(id",{"_index":1738,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create",{"_index":1659,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":1680,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall",{"_index":1665,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findbyid(params.id",{"_index":1562,"title":{},"body":{"injectables/PostByIdHook.html":{}}}],["this.postsservice.findbyid(value",{"_index":1569,"title":{},"body":{"injectables/PostByIdPipe.html":{}}}],["this.postsservice.findbyid(value).then((post",{"_index":1281,"title":{},"body":{"injectables/IsPostExistValidator.html":{}}}],["this.postsservice.update",{"_index":1675,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatetopics",{"_index":1685,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.reflector.get",{"_index":1104,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["this.storagesservice",{"_index":1248,"title":{},"body":{"injectables/IsLocalFileExistValidator.html":{}}}],["this.storagesservice.createlocalfile",{"_index":2326,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.storagesservice.findlocalfilebyid(value",{"_index":1409,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{}}}],["this.topicsrepository.create(topic",{"_index":2051,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicsrepository.delete(id",{"_index":2063,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicsrepository.find",{"_index":2054,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicsrepository.findone",{"_index":2058,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicsrepository.save(createdtopic",{"_index":2052,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicsrepository.update(id",{"_index":2061,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicsservice.create",{"_index":2010,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.topicsservice.delete(id",{"_index":2024,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.topicsservice.findall",{"_index":2014,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.topicsservice.findbyid(params.id",{"_index":1958,"title":{},"body":{"injectables/TopicByIdHook.html":{}}}],["this.topicsservice.findbyid(value",{"_index":1963,"title":{},"body":{"injectables/TopicByIdPipe.html":{}}}],["this.topicsservice.findbyid(value).then((topic",{"_index":1284,"title":{},"body":{"injectables/IsTopicExistValidator.html":{}}}],["this.topicsservice.findbyids",{"_index":1661,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.topicsservice.findbyids(updateposttopicsrequest.topicids",{"_index":1686,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.topicsservice.findbyname(value).then((topic",{"_index":1264,"title":{},"body":{"injectables/IsNameUniqueValidator.html":{}}}],["this.topicsservice.update",{"_index":2020,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.usersrepository.create",{"_index":2366,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.delete(id",{"_index":2380,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":2370,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":2372,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save",{"_index":2384,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(createduser",{"_index":2368,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update(id",{"_index":2378,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create",{"_index":2283,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.delete(id",{"_index":2297,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":2287,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyemail(value).then((user",{"_index":1212,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{}}}],["this.usersservice.findbyid",{"_index":1357,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersservice.findbyid(params.id",{"_index":2158,"title":{},"body":{"injectables/UserByIdHook.html":{}}}],["this.usersservice.findbyid(value",{"_index":2163,"title":{},"body":{"injectables/UserByIdPipe.html":{}}}],["this.usersservice.findbyid(value).then((user",{"_index":1288,"title":{},"body":{"injectables/IsUserExistValidator.html":{}}}],["this.usersservice.findbyphone(value).then((user",{"_index":1271,"title":{},"body":{"injectables/IsPhoneNumberUniqueValidator.html":{}}}],["this.usersservice.findbyusername(username",{"_index":615,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyusername(value).then((user",{"_index":1291,"title":{},"body":{"injectables/IsUsernameUniqueValidator.html":{}}}],["this.usersservice.update",{"_index":2293,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(user.id",{"_index":621,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updatepassword",{"_index":2302,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateprofile",{"_index":2313,"title":{},"body":{"controllers/UsersController.html":{}}}],["three",{"_index":782,"title":{},"body":{"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{}}}],["throttle",{"_index":1116,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["throttler",{"_index":474,"title":{},"body":{"modules/AppModule.html":{}}}],["throttler_limit",{"_index":1747,"title":{},"body":{"classes/RateLimitingEnvironmentVariables.html":{}}}],["throttler_ttl",{"_index":1748,"title":{},"body":{"classes/RateLimitingEnvironmentVariables.html":{}}}],["throttlerguard",{"_index":473,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":665,"title":{},"body":{"modules/ConfigModule.html":{}}}],["throttlermodule.forrootasync",{"_index":725,"title":{},"body":{"modules/ConfigModule.html":{}}}],["throttlermoduleoptions",{"_index":704,"title":{},"body":{"modules/ConfigModule.html":{},"classes/RateLimitingEnvironmentVariables.html":{}}}],["through",{"_index":1079,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["throw",{"_index":559,"title":{},"body":{"controllers/AuthController.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"classes/NotFoundException.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"controllers/PostsController.html":{},"classes/RequestTimeoutException.html":{},"controllers/StoragesController.html":{},"classes/TooManyRequestsException.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{}}}],["throwerror",{"_index":1923,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["time",{"_index":756,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/GenericEntity.html":{},"classes/InternalServerErrorErrorResponse.html":{},"entities/LocalFile.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"entities/Post.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SuccessResponse.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"entities/Topic.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"entities/User.html":{},"entities/UserProfile.html":{},"classes/UserResponse.html":{},"miscellaneous/functions.html":{}}}],["timeout",{"_index":261,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["timeout(app_max_timeout",{"_index":1929,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeout.exception",{"_index":1926,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeout.exception.ts",{"_index":1783,"title":{},"body":{"classes/RequestTimeoutException.html":{}}}],["timeout.exception.ts:14",{"_index":1784,"title":{},"body":{"classes/RequestTimeoutException.html":{}}}],["timeouted",{"_index":1927,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeouted.decorator.ts",{"_index":2489,"title":{},"body":{"miscellaneous/functions.html":{}}}],["timeouterror",{"_index":1922,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":1911,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timestamp",{"_index":194,"title":{},"body":{"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/ConflictErrorResponse.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"interfaces/Response.html":{},"classes/SuccessResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{}}}],["timestampresponse",{"_index":1579,"title":{"classes/TimestampResponse.html":{}},"body":{"classes/PostResponse.html":{},"classes/TimestampResponse.html":{},"classes/TopicResponse.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{}}}],["title",{"_index":97,"title":{},"body":{"classes/AddPostTable1678073082722.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{}}}],["tmodel",{"_index":310,"title":{},"body":{"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{}}}],["toboolean",{"_index":333,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["toboolean(value",{"_index":360,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["toentity",{"_index":816,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{}}}],["toentity(file",{"_index":823,"title":{},"body":{"classes/CreateLocalFileRequest.html":{}}}],["toentity(request",{"_index":856,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{}}}],["token",{"_index":503,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignInResponse.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/functions.html":{}}}],["tokenpayload",{"_index":1337,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/TokenPayload.html":{}}}],["tolowercase",{"_index":1015,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["tonumber",{"_index":336,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["tonumber(value",{"_index":359,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["toomanyrequestserrorresponse",{"_index":1937,"title":{"classes/TooManyRequestsErrorResponse.html":{}},"body":{"classes/TooManyRequestsErrorResponse.html":{}}}],["toomanyrequestsexception",{"_index":1942,"title":{"classes/TooManyRequestsException.html":{}},"body":{"classes/TooManyRequestsException.html":{}}}],["toomanyrequestsexception()`the",{"_index":1946,"title":{},"body":{"classes/TooManyRequestsException.html":{}}}],["toomanyrequestsresponse",{"_index":1939,"title":{},"body":{"classes/TooManyRequestsErrorResponse.html":{}}}],["topic",{"_index":127,"title":{"entities/Topic.html":{}},"body":{"classes/AddTopicTable1678958507781.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsTopicExistValidator.html":{},"entities/Post.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"injectables/PostsService.html":{},"modules/ServicesModule.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"classes/UpdateTopicRequest.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["topic'})@apisuccessesresponse(['undefined'])@apierrorsresponse(['undefined",{"_index":1991,"title":{},"body":{"controllers/TopicsController.html":{}}}],["topic(request",{"_index":884,"title":{},"body":{"classes/CreateTopicRequest.html":{},"classes/UpdateTopicRequest.html":{}}}],["topic)@apibearerauth()@apisuccessesresponse(['undefined'])@apierrorsresponse(['undefined",{"_index":1986,"title":{},"body":{"controllers/TopicsController.html":{}}}],["topic)@apibearerauth()@apiuuidparam({name",{"_index":1990,"title":{},"body":{"controllers/TopicsController.html":{}}}],["topic.posts",{"_index":1538,"title":{},"body":{"entities/Post.html":{}}}],["topic[identifierkey",{"_index":1265,"title":{},"body":{"injectables/IsNameUniqueValidator.html":{}}}],["topic\\`(\\`id",{"_index":141,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{}}}],["topicactions",{"_index":2003,"title":{},"body":{"controllers/TopicsController.html":{},"miscellaneous/typealiases.html":{}}}],["topicbyidhook",{"_index":1954,"title":{"injectables/TopicByIdHook.html":{}},"body":{"injectables/TopicByIdHook.html":{}}}],["topicbyidhook.prototype.run.name",{"_index":1957,"title":{},"body":{"injectables/TopicByIdHook.html":{}}}],["topicbyidpipe",{"_index":1959,"title":{"injectables/TopicByIdPipe.html":{}},"body":{"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"overview.html":{}}}],["topicbyidpipe.prototype.transform.name",{"_index":1962,"title":{},"body":{"injectables/TopicByIdPipe.html":{}}}],["topicid",{"_index":135,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{}}}],["topicidparam",{"_index":1964,"title":{"classes/TopicIdParam.html":{}},"body":{"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{}}}],["topicids",{"_index":846,"title":{},"body":{"classes/CreatePostRequest.html":{},"entities/Post.html":{},"classes/PostResponse.html":{},"injectables/PostsService.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{}}}],["topicpermissions",{"_index":2029,"title":{},"body":{"modules/TopicsModule.html":{}}}],["topicresponse",{"_index":1580,"title":{"classes/TopicResponse.html":{}},"body":{"classes/PostResponse.html":{},"classes/TopicResponse.html":{},"controllers/TopicsController.html":{}}}],["topics",{"_index":1260,"title":{},"body":{"injectables/IsNameUniqueValidator.html":{},"injectables/IsTopicExistValidator.html":{},"entities/Post.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"classes/UpdatePostTopicsRequest.html":{},"miscellaneous/enumerations.html":{}}}],["topics.controller",{"_index":2030,"title":{},"body":{"modules/TopicsModule.html":{}}}],["topics.service",{"_index":1263,"title":{},"body":{"injectables/IsNameUniqueValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{}}}],["topics/dto/params/topic",{"_index":2103,"title":{},"body":{"classes/UpdatePostTopicsRequest.html":{}}}],["topics/dto/responses/topic",{"_index":1583,"title":{},"body":{"classes/PostResponse.html":{}}}],["topics/entities/topic.entity",{"_index":1544,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{}}}],["topics/topics.module",{"_index":1693,"title":{},"body":{"modules/PostsModule.html":{},"modules/ServicesModule.html":{}}}],["topics/topics.service",{"_index":1645,"title":{},"body":{"controllers/PostsController.html":{}}}],["topics/validators/is",{"_index":866,"title":{},"body":{"classes/CreatePostRequest.html":{}}}],["topicscontroller",{"_index":1977,"title":{"controllers/TopicsController.html":{}},"body":{"controllers/TopicsController.html":{},"modules/TopicsModule.html":{}}}],["topicscontroller.prototype.createtopic.name",{"_index":2009,"title":{},"body":{"controllers/TopicsController.html":{}}}],["topicscontroller.prototype.deletetopic.name",{"_index":2023,"title":{},"body":{"controllers/TopicsController.html":{}}}],["topicscontroller.prototype.findalltopics.name",{"_index":2013,"title":{},"body":{"controllers/TopicsController.html":{}}}],["topicscontroller.prototype.findtopicbyid.name",{"_index":2016,"title":{},"body":{"controllers/TopicsController.html":{}}}],["topicscontroller.prototype.updatetopic.name",{"_index":2018,"title":{},"body":{"controllers/TopicsController.html":{}}}],["topicsdata",{"_index":863,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/PostResponse.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{}}}],["topicsdata[0].id",{"_index":872,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/PostResponse.html":{},"classes/TopicIdParam.html":{}}}],["topicsdata[0].name",{"_index":883,"title":{},"body":{"classes/CreateTopicRequest.html":{},"classes/TopicResponse.html":{}}}],["topicsdata[1].id",{"_index":873,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/PostResponse.html":{}}}],["topicseeder",{"_index":1971,"title":{"classes/TopicSeeder.html":{}},"body":{"classes/TopicSeeder.html":{}}}],["topicsmodule",{"_index":1691,"title":{"modules/TopicsModule.html":{}},"body":{"modules/PostsModule.html":{},"modules/ServicesModule.html":{},"modules/TopicsModule.html":{},"modules.html":{},"overview.html":{}}}],["topicsrepository",{"_index":2035,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topicsservice",{"_index":1258,"title":{"injectables/TopicsService.html":{}},"body":{"injectables/IsNameUniqueValidator.html":{},"injectables/IsTopicExistValidator.html":{},"controllers/PostsController.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"controllers/TopicsController.html":{},"modules/TopicsModule.html":{},"injectables/TopicsService.html":{},"overview.html":{}}}],["topicsservice.prototype.create.name",{"_index":2049,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topicsservice.prototype.delete.name",{"_index":2062,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topicsservice.prototype.findall.name",{"_index":2053,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topicsservice.prototype.findbyid.name",{"_index":2057,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topicsservice.prototype.findbyids.name",{"_index":2055,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topicsservice.prototype.findbyname.name",{"_index":2059,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topicsservice.prototype.update.name",{"_index":2060,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topicsubjects",{"_index":2689,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tort",{"_index":2666,"title":{},"body":{"license.html":{}}}],["touch",{"_index":2602,"title":{},"body":{"index.html":{}}}],["trackby",{"_index":1086,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trackby(context",{"_index":1090,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["tracking",{"_index":1085,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["transform",{"_index":325,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/DatabaseEnvironmentVariables.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"interfaces/Response.html":{},"injectables/TopicByIdPipe.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"injectables/UserByIdPipe.html":{},"miscellaneous/functions.html":{}}}],["transform(value",{"_index":1396,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["transformation",{"_index":959,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["transformed",{"_index":1798,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/functions.html":{}}}],["transformed.decorator",{"_index":408,"title":{},"body":{"controllers/AppController.html":{},"controllers/StoragesController.html":{}}}],["transformed.decorator.ts",{"_index":2490,"title":{},"body":{"miscellaneous/functions.html":{}}}],["transformer",{"_index":326,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/CreateUserRequest.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"entities/User.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["transforminterceptor",{"_index":1797,"title":{"injectables/TransformInterceptor.html":{}},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["transport",{"_index":1461,"title":{},"body":{"classes/LoggerEnvironmentVariables.html":{}}}],["true",{"_index":706,"title":{},"body":{"modules/ConfigModule.html":{},"classes/CreatePostRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/NoContentSuccessResponse.html":{},"classes/OkSuccessResponse.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"entities/Topic.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"entities/UserProfile.html":{},"classes/UserResponse.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["true})@apiproperty({description",{"_index":854,"title":{},"body":{"classes/CreatePostRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{}}}],["true})@istopicexist({each",{"_index":853,"title":{},"body":{"classes/CreatePostRequest.html":{}}}],["try",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalFileByIdPipe.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ts",{"_index":1035,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/SuccessResponse.html":{}}}],["ttl",{"_index":636,"title":{},"body":{"classes/CacheEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{}}}],["tuser",{"_index":1306,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["twitter",{"_index":2606,"title":{},"body":{"index.html":{}}}],["two",{"_index":1040,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/SuccessResponse.html":{}}}],["type",{"_index":18,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{},"interfaces/AppConfigOptions.html":{},"controllers/AppController.html":{},"classes/AppEnvironmentVariables.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileSeeder.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/LoggingInterceptor.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"classes/PostSeeder.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/RequestWithAuthUser.html":{},"interfaces/Response.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"controllers/StoragesController.html":{},"injectables/StoragesService.html":{},"classes/SuccessResponse.html":{},"injectables/TimeoutInterceptor.html":{},"classes/TimestampResponse.html":{},"interfaces/TokenPayload.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"classes/TopicSeeder.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":2684,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":271,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadata.html":{},"interfaces/ApiSuccessResponseMetadataOptions.html":{}}}],["typeorm",{"_index":35,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"modules/ConfigModule.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/GenericEntity.html":{},"classes/InitialMigration1668674726738.html":{},"entities/LocalFile.html":{},"classes/LocalFileSeeder.html":{},"entities/Post.html":{},"classes/PostSeeder.html":{},"injectables/PostsService.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"injectables/StoragesService.html":{},"entities/Topic.html":{},"classes/TopicSeeder.html":{},"injectables/TopicsService.html":{},"entities/User.html":{},"entities/UserProfile.html":{},"classes/UserProfileSeeder.html":{},"classes/UserSeeder.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":655,"title":{},"body":{"modules/ConfigModule.html":{},"modules/PostsModule.html":{},"modules/StoragesModule.html":{},"modules/TopicsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([localfile",{"_index":1859,"title":{},"body":{"modules/StoragesModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":1696,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([topic",{"_index":2031,"title":{},"body":{"modules/TopicsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":2337,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":712,"title":{},"body":{"modules/ConfigModule.html":{}}}],["types",{"_index":2393,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1315,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/PostsService.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["unable",{"_index":1527,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["unauthorized",{"_index":266,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["unauthorizederrorresponse",{"_index":2066,"title":{"classes/UnauthorizedErrorResponse.html":{}},"body":{"classes/UnauthorizedErrorResponse.html":{}}}],["unauthorizedexception",{"_index":1310,"title":{"classes/UnauthorizedException.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/UnauthorizedException.html":{}}}],["unauthorizedexception()`the",{"_index":2072,"title":{},"body":{"classes/UnauthorizedException.html":{}}}],["undefined",{"_index":581,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/ConflictErrorResponse.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/LocalFileIdParam.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"injectables/PostByIdHook.html":{},"classes/PostIdParam.html":{},"classes/PostResponse.html":{},"controllers/PostsController.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SignInResponse.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"injectables/TopicByIdHook.html":{},"classes/TopicIdParam.html":{},"classes/TopicResponse.html":{},"controllers/TopicsController.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{},"controllers/UsersController.html":{}}}],["undefined})@apisuccessesresponse(['undefined'])@apierrorsresponse(['undefined",{"_index":2257,"title":{},"body":{"controllers/UsersController.html":{}}}],["under",{"_index":362,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["unique",{"_index":75,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/CreateUserRequest.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"classes/RemoveRoleTable1679272991389.html":{},"entities/Topic.html":{},"classes/UpdateUserRequest.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{}}}],["unique.validator",{"_index":882,"title":{},"body":{"classes/CreateTopicRequest.html":{},"classes/CreateUserRequest.html":{},"modules/TopicsModule.html":{},"classes/UpdateUserRequest.html":{},"modules/UsersModule.html":{}}}],["unique.validator.ts",{"_index":1256,"title":{},"body":{"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"miscellaneous/functions.html":{}}}],["unique.validator.ts:17",{"_index":1259,"title":{},"body":{"injectables/IsNameUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["unique.validator.ts:19",{"_index":1268,"title":{},"body":{"injectables/IsPhoneNumberUniqueValidator.html":{}}}],["unique.validator.ts:33",{"_index":1262,"title":{},"body":{"injectables/IsNameUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["unique.validator.ts:35",{"_index":1270,"title":{},"body":{"injectables/IsPhoneNumberUniqueValidator.html":{}}}],["unique.validator.ts:61",{"_index":1261,"title":{},"body":{"injectables/IsNameUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["unique.validator.ts:63",{"_index":1269,"title":{},"body":{"injectables/IsPhoneNumberUniqueValidator.html":{}}}],["uniqueness",{"_index":1199,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"miscellaneous/functions.html":{}}}],["unit",{"_index":2581,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":717,"title":{},"body":{"modules/ConfigModule.html":{}}}],["unprocessable",{"_index":268,"title":{},"body":{"interfaces/ApiErrorResponseMetadata.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["unprocessableentityerrorresponse",{"_index":2075,"title":{"classes/UnprocessableEntityErrorResponse.html":{}},"body":{"classes/UnprocessableEntityErrorResponse.html":{}}}],["unprocessableentityexception",{"_index":1390,"title":{"classes/UnprocessableEntityException.html":{}},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"classes/UnprocessableEntityException.html":{},"injectables/UserByIdPipe.html":{}}}],["unprocessableentityexception()`the",{"_index":2083,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["unused",{"_index":1317,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/PostsService.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":17,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["up(queryrunner",{"_index":32,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["update",{"_index":85,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"injectables/StoragesService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["update(id",{"_index":1719,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":1230,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"controllers/PostsController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["updatedat",{"_index":131,"title":{},"body":{"classes/AddTopicTable1678958507781.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/GenericEntity.html":{},"entities/LocalFile.html":{},"entities/Post.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/TimestampResponse.html":{},"entities/Topic.html":{},"entities/User.html":{},"entities/UserProfile.html":{}}}],["updatedate",{"_index":2150,"title":{},"body":{"entities/User.html":{}}}],["updatedatecolumn",{"_index":1072,"title":{},"body":{"classes/GenericEntity.html":{}}}],["updatelocalfile",{"_index":1863,"title":{},"body":{"injectables/StoragesService.html":{}}}],["updatelocalfile(id",{"_index":1872,"title":{},"body":{"injectables/StoragesService.html":{}}}],["updatepassword",{"_index":2342,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["updatepassword(id",{"_index":2358,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatepost",{"_index":1609,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(undefined",{"_index":1628,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepostrequest",{"_index":1629,"title":{"classes/UpdatePostRequest.html":{}},"body":{"controllers/PostsController.html":{},"classes/UpdatePostRequest.html":{}}}],["updatepostrequest.id",{"_index":1673,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepostrequest.toentity(updatepostrequest",{"_index":1676,"title":{},"body":{"controllers/PostsController.html":{}}}],["updateposttopics",{"_index":1610,"title":{},"body":{"controllers/PostsController.html":{}}}],["updateposttopics(undefined",{"_index":1632,"title":{},"body":{"controllers/PostsController.html":{}}}],["updateposttopicsrequest",{"_index":1633,"title":{"classes/UpdatePostTopicsRequest.html":{}},"body":{"controllers/PostsController.html":{},"classes/UpdatePostTopicsRequest.html":{}}}],["updateposttopicsrequest.id",{"_index":1684,"title":{},"body":{"controllers/PostsController.html":{}}}],["updateprofile",{"_index":2343,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["updateprofile(id",{"_index":2360,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateprofileavatar",{"_index":2468,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["updateroles",{"_index":2467,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["updates",{"_index":1721,"title":{},"body":{"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{}}}],["updatetopic",{"_index":1983,"title":{},"body":{"controllers/TopicsController.html":{}}}],["updatetopic(undefined",{"_index":1998,"title":{},"body":{"controllers/TopicsController.html":{}}}],["updatetopicrequest",{"_index":1999,"title":{"classes/UpdateTopicRequest.html":{}},"body":{"controllers/TopicsController.html":{},"classes/UpdateTopicRequest.html":{}}}],["updatetopicrequest.id",{"_index":2019,"title":{},"body":{"controllers/TopicsController.html":{}}}],["updatetopicrequest.toentity(updatetopicrequest",{"_index":2021,"title":{},"body":{"controllers/TopicsController.html":{}}}],["updatetopics",{"_index":1703,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/enumerations.html":{}}}],["updatetopics(id",{"_index":1722,"title":{},"body":{"injectables/PostsService.html":{}}}],["updateuser",{"_index":2222,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(undefined",{"_index":2241,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserpassword",{"_index":2223,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserpassword(undefined",{"_index":2244,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserpasswordrequest",{"_index":2106,"title":{"classes/UpdateUserPasswordRequest.html":{}},"body":{"classes/UpdateUserPasswordRequest.html":{},"controllers/UsersController.html":{}}}],["updateuserpasswordrequest.id",{"_index":2301,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserpasswordrequest.password",{"_index":2303,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserprofile",{"_index":2224,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserprofile(undefined",{"_index":2247,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserprofileavatar",{"_index":2225,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserprofileavatar(undefined",{"_index":2250,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserprofileavatarrequest",{"_index":2111,"title":{"classes/UpdateUserProfileAvatarRequest.html":{}},"body":{"classes/UpdateUserProfileAvatarRequest.html":{},"controllers/UsersController.html":{}}}],["updateuserprofileavatarrequest.id",{"_index":2325,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserprofilerequest",{"_index":2119,"title":{"classes/UpdateUserProfileRequest.html":{}},"body":{"classes/UpdateUserProfileRequest.html":{},"controllers/UsersController.html":{}}}],["updateuserprofilerequest.id",{"_index":2312,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserprofilerequest.toentity(updateuserprofilerequest",{"_index":2314,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserrequest",{"_index":2120,"title":{"classes/UpdateUserRequest.html":{}},"body":{"classes/UpdateUserRequest.html":{},"controllers/UsersController.html":{}}}],["updateuserrequest.id",{"_index":2292,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserrequest.toentity(updateuserrequest",{"_index":2294,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserroles",{"_index":2226,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserroles(undefined",{"_index":2259,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserrolesrequest",{"_index":2129,"title":{"classes/UpdateUserRolesRequest.html":{}},"body":{"classes/UpdateUserRolesRequest.html":{},"controllers/UsersController.html":{}}}],["updateuserrolesrequest.id",{"_index":2307,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserrolesrequest.toentity(updateuserrolesrequest",{"_index":2308,"title":{},"body":{"controllers/UsersController.html":{}}}],["updation",{"_index":1068,"title":{},"body":{"classes/GenericEntity.html":{},"entities/LocalFile.html":{},"entities/Post.html":{},"classes/TimestampResponse.html":{},"entities/Topic.html":{},"entities/User.html":{},"entities/UserProfile.html":{}}}],["upload",{"_index":660,"title":{},"body":{"modules/ConfigModule.html":{},"classes/CreateLocalFileRequest.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"controllers/UsersController.html":{}}}],["upload.config",{"_index":690,"title":{},"body":{"modules/ConfigModule.html":{}}}],["upload.config.ts",{"_index":1433,"title":{},"body":{"classes/LocalFileUploadEnvironmentVariables.html":{}}}],["upload.config.ts:15",{"_index":1435,"title":{},"body":{"classes/LocalFileUploadEnvironmentVariables.html":{}}}],["upload/local",{"_index":689,"title":{},"body":{"modules/ConfigModule.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{}}}],["uploadedfile",{"_index":2262,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploader",{"_index":821,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"entities/LocalFile.html":{}}}],["uploaderid",{"_index":814,"title":{},"body":{"classes/CreateLocalFileRequest.html":{},"entities/LocalFile.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"controllers/UsersController.html":{}}}],["url",{"_index":428,"title":{},"body":{"controllers/AppController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["url/path",{"_index":751,"title":{},"body":{"classes/ConflictErrorResponse.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/OkSuccessResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{}}}],["usagenotes",{"_index":488,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonServicesModule.html":{},"modules/ConfigModule.html":{},"classes/ConflictErrorResponse.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/CreatedSuccessResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/GenericEntity.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/InternalServerErrorException.html":{},"injectables/JwtStrategy.html":{},"entities/LocalFile.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/LocalStrategy.html":{},"classes/NoContentSuccessResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/NotFoundException.html":{},"classes/OkSuccessResponse.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"injectables/PostByIdHook.html":{},"injectables/PostByIdPipe.html":{},"classes/PostResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/RequestTimeoutException.html":{},"interfaces/Response.html":{},"modules/ServicesModule.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"classes/SuccessResponse.html":{},"classes/TimestampResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/TooManyRequestsException.html":{},"entities/Topic.html":{},"injectables/TopicByIdHook.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicResponse.html":{},"injectables/TransformInterceptor.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdatePostRequest.html":{},"classes/UpdatePostTopicsRequest.html":{},"classes/UpdateTopicRequest.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{}}}],["use",{"_index":958,"title":{},"body":{"classes/CreateUserRequest.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["useability",{"_index":2561,"title":{},"body":{"miscellaneous/functions.html":{}}}],["useaccesscontrol",{"_index":1553,"title":{},"body":{"injectables/PostByIdHook.html":{},"controllers/PostsController.html":{},"injectables/TopicByIdHook.html":{},"controllers/TopicsController.html":{},"injectables/UserByIdHook.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["useaccesscontrol(action",{"_index":2553,"title":{},"body":{"miscellaneous/functions.html":{}}}],["useaccesscontrol(postactions.create",{"_index":1657,"title":{},"body":{"controllers/PostsController.html":{}}}],["useaccesscontrol(postactions.delete",{"_index":1678,"title":{},"body":{"controllers/PostsController.html":{}}}],["useaccesscontrol(postactions.readall",{"_index":1663,"title":{},"body":{"controllers/PostsController.html":{}}}],["useaccesscontrol(postactions.readbyid",{"_index":1667,"title":{},"body":{"controllers/PostsController.html":{}}}],["useaccesscontrol(postactions.update",{"_index":1671,"title":{},"body":{"controllers/PostsController.html":{}}}],["useaccesscontrol(postactions.updatetopics",{"_index":1682,"title":{},"body":{"controllers/PostsController.html":{}}}],["useaccesscontrol(topicactions.create",{"_index":2008,"title":{},"body":{"controllers/TopicsController.html":{}}}],["useaccesscontrol(topicactions.delete",{"_index":2022,"title":{},"body":{"controllers/TopicsController.html":{}}}],["useaccesscontrol(topicactions.readall",{"_index":2012,"title":{},"body":{"controllers/TopicsController.html":{}}}],["useaccesscontrol(topicactions.readbyid",{"_index":2015,"title":{},"body":{"controllers/TopicsController.html":{}}}],["useaccesscontrol(topicactions.update",{"_index":2017,"title":{},"body":{"controllers/TopicsController.html":{}}}],["useaccesscontrol(useractions.create",{"_index":2281,"title":{},"body":{"controllers/UsersController.html":{}}}],["useaccesscontrol(useractions.delete",{"_index":2295,"title":{},"body":{"controllers/UsersController.html":{}}}],["useaccesscontrol(useractions.readall",{"_index":2285,"title":{},"body":{"controllers/UsersController.html":{}}}],["useaccesscontrol(useractions.readbyid",{"_index":2288,"title":{},"body":{"controllers/UsersController.html":{}}}],["useaccesscontrol(useractions.update",{"_index":2290,"title":{},"body":{"controllers/UsersController.html":{}}}],["useaccesscontrol(useractions.updatepassword",{"_index":2299,"title":{},"body":{"controllers/UsersController.html":{}}}],["useaccesscontrol(useractions.updateprofile",{"_index":2310,"title":{},"body":{"controllers/UsersController.html":{}}}],["useaccesscontrol(useractions.updateprofileavatar",{"_index":2317,"title":{},"body":{"controllers/UsersController.html":{}}}],["useaccesscontrol(useractions.updateroles",{"_index":2305,"title":{},"body":{"controllers/UsersController.html":{}}}],["useclass",{"_index":490,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":462,"title":{},"body":{"modules/AppModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/SignInResponse.html":{},"miscellaneous/functions.html":{}}}],["usefactory",{"_index":710,"title":{},"body":{"modules/ConfigModule.html":{}}}],["usejwtauth",{"_index":531,"title":{},"body":{"controllers/AuthController.html":{}}}],["uselocalauth",{"_index":535,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":41,"title":{"entities/User.html":{}},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/ErrorResponse.html":{},"classes/InitialMigration1668674726738.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/LocalFile.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/RemoveRoleTable1679272991389.html":{},"interfaces/RequestWithAuthUser.html":{},"modules/ServicesModule.html":{},"classes/SignInRequest.html":{},"classes/SignInResponse.html":{},"classes/SuccessResponse.html":{},"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"entities/User.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["user's",{"_index":602,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["user'})@apifile('avatar",{"_index":2252,"title":{},"body":{"controllers/UsersController.html":{}}}],["user'})@apisuccessesresponse(['undefined'])@apierrorsresponse(['undefined",{"_index":2234,"title":{},"body":{"controllers/UsersController.html":{}}}],["user(request",{"_index":2128,"title":{},"body":{"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{}}}],["user)@apibearerauth()@apisuccessesresponse(['undefined'])@apierrorsresponse(['undefined",{"_index":2229,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.entity",{"_index":2186,"title":{},"body":{"entities/UserProfile.html":{}}}],["user.id",{"_index":620,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["user.interface",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["user.interface.ts",{"_index":1789,"title":{},"body":{"interfaces/RequestWithAuthUser.html":{}}}],["user.profile",{"_index":2181,"title":{},"body":{"entities/UserProfile.html":{},"controllers/UsersController.html":{}}}],["user.username",{"_index":618,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[identifierkey",{"_index":1215,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["user\\`(\\`id",{"_index":87,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["user_profile",{"_index":73,"title":{},"body":{"classes/AddLocalFileTable1675692342862.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{}}}],["useractions",{"_index":2271,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/typealiases.html":{}}}],["useradditionalactions",{"_index":2440,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["userbyidhook",{"_index":2154,"title":{"injectables/UserByIdHook.html":{}},"body":{"injectables/UserByIdHook.html":{},"controllers/UsersController.html":{}}}],["userbyidhook)@apibearerauth()@apiuuidparam({name",{"_index":2233,"title":{},"body":{"controllers/UsersController.html":{}}}],["userbyidhook.prototype.run.name",{"_index":2157,"title":{},"body":{"injectables/UserByIdHook.html":{}}}],["userbyidpipe",{"_index":2159,"title":{"injectables/UserByIdPipe.html":{}},"body":{"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["userbyidpipe.prototype.transform.name",{"_index":2162,"title":{},"body":{"injectables/UserByIdPipe.html":{}}}],["userid",{"_index":110,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["useridparam",{"_index":2108,"title":{"classes/UserIdParam.html":{}},"body":{"classes/UpdateUserPasswordRequest.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UpdateUserRolesRequest.html":{},"classes/UserIdParam.html":{},"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{}}}],["useridparam:18",{"_index":2118,"title":{},"body":{"classes/UpdateUserProfileAvatarRequest.html":{}}}],["username",{"_index":203,"title":{},"body":{"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserRequest.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/InitialMigration1668674726738.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/LocalStrategy.html":{},"classes/SignInRequest.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserRequest.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["userpermissions",{"_index":2335,"title":{},"body":{"modules/UsersModule.html":{}}}],["userprofile",{"_index":902,"title":{"entities/UserProfile.html":{}},"body":{"classes/CreateUserProfileRequest.html":{},"classes/UpdateUserProfileRequest.html":{},"entities/User.html":{},"entities/UserProfile.html":{},"classes/UserProfileSeeder.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["userprofile(request",{"_index":920,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/UpdateUserProfileRequest.html":{}}}],["userprofileresponse",{"_index":2187,"title":{"classes/UserProfileResponse.html":{}},"body":{"classes/UserProfileResponse.html":{},"classes/UserResponse.html":{}}}],["userprofilesdata",{"_index":907,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/UserProfileResponse.html":{},"classes/UserProfileSeeder.html":{}}}],["userprofilesdata[0].bio",{"_index":915,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/UserProfileResponse.html":{}}}],["userprofilesdata[0].birthdate",{"_index":919,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/UserProfileResponse.html":{}}}],["userprofilesdata[0].firstname",{"_index":912,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/UserProfileResponse.html":{}}}],["userprofilesdata[0].lastname",{"_index":913,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/UserProfileResponse.html":{}}}],["userprofilesdata[0].location",{"_index":916,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/UserProfileResponse.html":{}}}],["userprofilesdata[0].website",{"_index":917,"title":{},"body":{"classes/CreateUserProfileRequest.html":{},"classes/UserProfileResponse.html":{}}}],["userprofileseeder",{"_index":2197,"title":{"classes/UserProfileSeeder.html":{}},"body":{"classes/UserProfileSeeder.html":{}}}],["userresponse",{"_index":527,"title":{"classes/UserResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/PostResponse.html":{},"classes/UserResponse.html":{},"controllers/UsersController.html":{}}}],["userrole",{"_index":930,"title":{},"body":{"classes/CreateUserRequest.html":{},"entities/User.html":{},"classes/UserResponse.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.superadmin",{"_index":954,"title":{},"body":{"classes/CreateUserRequest.html":{},"classes/UserResponse.html":{}}}],["users",{"_index":593,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtStrategy.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["users.controller",{"_index":2336,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1209,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/responses/users/user",{"_index":528,"title":{},"body":{"controllers/AuthController.html":{},"classes/PostResponse.html":{}}}],["users/entities/user.entity",{"_index":606,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/LocalFile.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"interfaces/RequestWithAuthUser.html":{}}}],["users/profiles/avatars",{"_index":2253,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/users.module",{"_index":572,"title":{},"body":{"modules/AuthModule.html":{},"modules/ServicesModule.html":{}}}],["users/users.service",{"_index":607,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["users_roles",{"_index":109,"title":{},"body":{"classes/AddRoleTable1675697129483.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["userscontroller",{"_index":2216,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["userscontroller.prototype.createuser.name",{"_index":2282,"title":{},"body":{"controllers/UsersController.html":{}}}],["userscontroller.prototype.deleteuser.name",{"_index":2296,"title":{},"body":{"controllers/UsersController.html":{}}}],["userscontroller.prototype.findallusers.name",{"_index":2286,"title":{},"body":{"controllers/UsersController.html":{}}}],["userscontroller.prototype.finduserbyid.name",{"_index":2289,"title":{},"body":{"controllers/UsersController.html":{}}}],["userscontroller.prototype.updateuser.name",{"_index":2291,"title":{},"body":{"controllers/UsersController.html":{}}}],["userscontroller.prototype.updateuserpassword.name",{"_index":2300,"title":{},"body":{"controllers/UsersController.html":{}}}],["userscontroller.prototype.updateuserprofile.name",{"_index":2311,"title":{},"body":{"controllers/UsersController.html":{}}}],["userscontroller.prototype.updateuserprofileavatar.name",{"_index":2324,"title":{},"body":{"controllers/UsersController.html":{}}}],["userscontroller.prototype.updateuserroles.name",{"_index":2306,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersdata",{"_index":939,"title":{},"body":{"classes/CreateUserRequest.html":{},"classes/PostResponse.html":{},"classes/UpdateUserRequest.html":{},"classes/UserIdParam.html":{},"classes/UserResponse.html":{},"classes/UserSeeder.html":{}}}],["usersdata[0].email",{"_index":949,"title":{},"body":{"classes/CreateUserRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UserResponse.html":{}}}],["usersdata[0].id",{"_index":1586,"title":{},"body":{"classes/PostResponse.html":{},"classes/UserIdParam.html":{}}}],["usersdata[0].phone",{"_index":951,"title":{},"body":{"classes/CreateUserRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UserResponse.html":{}}}],["usersdata[0].username",{"_index":948,"title":{},"body":{"classes/CreateUserRequest.html":{},"classes/UpdateUserRequest.html":{},"classes/UserResponse.html":{}}}],["userseeder",{"_index":2210,"title":{"classes/UserSeeder.html":{}},"body":{"classes/UserSeeder.html":{}}}],["usersmodule",{"_index":564,"title":{"modules/UsersModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/ServicesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":2344,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":589,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtStrategy.html":{},"injectables/UserByIdHook.html":{},"injectables/UserByIdPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["usersservice.prototype.create.name",{"_index":2364,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.prototype.delete.name",{"_index":2379,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.prototype.findall.name",{"_index":2369,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.prototype.findbyemail.name",{"_index":2374,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.prototype.findbyid.name",{"_index":2371,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.prototype.findbyphone.name",{"_index":2375,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.prototype.findbyusername.name",{"_index":2373,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.prototype.update.name",{"_index":2376,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.prototype.updatepassword.name",{"_index":2381,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.prototype.updateprofile.name",{"_index":2383,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersubjects",{"_index":2690,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["usertoupdate",{"_index":2377,"title":{},"body":{"injectables/UsersService.html":{}}}],["uses",{"_index":1075,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["using",{"_index":991,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["uuid",{"_index":1389,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"controllers/TopicsController.html":{},"classes/UpdateUserProfileAvatarRequest.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["val",{"_index":1523,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["valid",{"_index":1408,"title":{},"body":{"injectables/LocalFileByIdPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{}}}],["valid.validator.util",{"_index":341,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{}}}],["valid.validator.util.ts",{"_index":2477,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validate",{"_index":353,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"injectables/LocalStrategy.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/PostByIdPipe.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/functions.html":{}}}],["validate(payload",{"_index":1336,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":1444,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(value",{"_index":1196,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["validatenested",{"_index":938,"title":{},"body":{"classes/CreateUserRequest.html":{}}}],["validates",{"_index":1198,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["validateuser",{"_index":587,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":599,"title":{},"body":{"injectables/AuthService.html":{}}}],["validating",{"_index":1119,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["validation",{"_index":355,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ErrorResponse.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/UnprocessableEntityException.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["validationarguments",{"_index":1193,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["validationarguments?.property",{"_index":1216,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["validationarguments?.value",{"_index":1217,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["validationerror",{"_index":2081,"title":{},"body":{"classes/UnprocessableEntityException.html":{}}}],["validationerrors",{"_index":749,"title":{"interfaces/ValidationErrors.html":{}},"body":{"classes/ConflictErrorResponse.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenErrorResponse.html":{},"classes/InternalServerErrorErrorResponse.html":{},"classes/NotFoundErrorResponse.html":{},"classes/RequestTimeoutErrorResponse.html":{},"classes/TooManyRequestsErrorResponse.html":{},"classes/UnauthorizedErrorResponse.html":{},"classes/UnprocessableEntityErrorResponse.html":{},"classes/UnprocessableEntityException.html":{},"interfaces/ValidationErrors.html":{}}}],["validationoptions",{"_index":1206,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":332,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/CreateLocalFileRequest.html":{},"classes/CreatePostRequest.html":{},"classes/CreateTopicRequest.html":{},"classes/CreateUserProfileRequest.html":{},"classes/CreateUserRequest.html":{},"classes/DatabaseEnvironmentVariables.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"classes/JwtEnvironmentVariables.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LocalFileIdParam.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"injectables/PostByIdPipe.html":{},"classes/PostIdParam.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/SignInRequest.html":{},"injectables/TopicByIdPipe.html":{},"classes/TopicIdParam.html":{},"classes/UnprocessableEntityException.html":{},"classes/UpdateUserRequest.html":{},"injectables/UserByIdPipe.html":{},"classes/UserIdParam.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["validator.ts",{"_index":1188,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"miscellaneous/functions.html":{}}}],["validator.ts:17",{"_index":1191,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{}}}],["validator.ts:33",{"_index":1197,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{}}}],["validator.ts:61",{"_index":1194,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{}}}],["validatorconstraint",{"_index":1207,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["validatorconstraintinterface",{"_index":1208,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["validatorconstraintinterface.defaultmessage",{"_index":1195,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{}}}],["validators/file",{"_index":2276,"title":{},"body":{"controllers/UsersController.html":{}}}],["validators/is",{"_index":881,"title":{},"body":{"classes/CreateTopicRequest.html":{},"classes/CreateUserRequest.html":{},"classes/LocalFileIdParam.html":{},"classes/PostIdParam.html":{},"modules/PostsModule.html":{},"modules/StoragesModule.html":{},"classes/TopicIdParam.html":{},"modules/TopicsModule.html":{},"classes/UpdateUserRequest.html":{},"classes/UserIdParam.html":{},"modules/UsersModule.html":{}}}],["value",{"_index":22,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterLastSignedInAtAttribute1678189980290.html":{},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesCascade1678096726170.html":{},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/AlterUserRolesAttribute1679276151891.html":{},"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/ForbiddenException.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/InitialMigration1668674726738.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/LocalFileByIdPipe.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/NotFoundException.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{},"classes/RequestTimeoutException.html":{},"injectables/TasksService.html":{},"classes/TooManyRequestsException.html":{},"injectables/TopicByIdPipe.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"injectables/UserByIdPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["values",{"_index":1124,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["values([...localfilesdata",{"_index":1428,"title":{},"body":{"classes/LocalFileSeeder.html":{}}}],["values([...postsdata",{"_index":1592,"title":{},"body":{"classes/PostSeeder.html":{}}}],["values([...topicsdata",{"_index":1976,"title":{},"body":{"classes/TopicSeeder.html":{}}}],["values([...userprofilesdata",{"_index":2202,"title":{},"body":{"classes/UserProfileSeeder.html":{}}}],["values([...usersdata",{"_index":2215,"title":{},"body":{"classes/UserSeeder.html":{}}}],["varchar(255",{"_index":44,"title":{},"body":{"classes/AddFirstAndLastNameAttribute1669010304048.html":{},"classes/AddLocalFileTable1675692342862.html":{},"classes/AddPostTable1678073082722.html":{},"classes/AddRoleTable1675697129483.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AddUserProfileTable1669618726311.html":{},"classes/AlterRoleNameAttribute1675699186800.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/InitialMigration1668674726738.html":{},"classes/RemovePostTitleAttribute1678285751957.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["varchar(36",{"_index":96,"title":{},"body":{"classes/AddPostTable1678073082722.html":{},"classes/AddTopicTable1678958507781.html":{},"classes/AlterTablesIdentifierToUuid1676872212399.html":{},"classes/RemoveRoleTable1679272991389.html":{}}}],["variables",{"_index":351,"title":{},"body":{"interfaces/AppConfigOptions.html":{},"classes/AppEnvironmentVariables.html":{},"classes/CacheEnvironmentVariables.html":{},"classes/DatabaseEnvironmentVariables.html":{},"classes/JwtEnvironmentVariables.html":{},"classes/LocalFileUploadEnvironmentVariables.html":{},"classes/LoggerEnvironmentVariables.html":{},"classes/RateLimitingEnvironmentVariables.html":{},"classes/RedisStoreEnvironmentVariables.html":{},"miscellaneous/functions.html":{}}}],["vars",{"_index":1318,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalFileByIdPipe.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostByIdPipe.html":{},"injectables/PostsService.html":{},"injectables/TopicByIdPipe.html":{},"injectables/UserByIdPipe.html":{},"injectables/UsersService.html":{}}}],["verified",{"_index":604,"title":{},"body":{"injectables/AuthService.html":{}}}],["verify",{"_index":601,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["version",{"_index":378,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/StoragesController.html":{},"controllers/TopicsController.html":{},"controllers/UsersController.html":{},"properties.html":{}}}],["void",{"_index":396,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/TasksService.html":{}}}],["wait",{"_index":1118,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["warn",{"_index":1006,"title":{},"body":{"classes/DatabaseEnvironmentVariables.html":{}}}],["warranties",{"_index":2653,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2649,"title":{},"body":{"license.html":{}}}],["watch",{"_index":2577,"title":{},"body":{"index.html":{}}}],["website",{"_index":150,"title":{},"body":{"classes/AddUserProfileTable1669618726311.html":{},"classes/CreateUserProfileRequest.html":{},"entities/UserProfile.html":{},"classes/UserProfileResponse.html":{},"index.html":{}}}],["websockets",{"_index":1076,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["whether",{"_index":1204,"title":{},"body":{"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/PostsService.html":{},"injectables/StoragesService.html":{},"injectables/TopicsService.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["whole",{"_index":459,"title":{},"body":{"modules/AppModule.html":{}}}],["within",{"_index":463,"title":{},"body":{"modules/AppModule.html":{}}}],["without",{"_index":2626,"title":{},"body":{"license.html":{}}}],["working",{"_index":1593,"title":{},"body":{"classes/PostSeeder.html":{}}}],["works",{"_index":2511,"title":{},"body":{"miscellaneous/functions.html":{}}}],["worry",{"_index":1128,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["wrong",{"_index":551,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{}}}],["xsrf",{"_index":2500,"title":{},"body":{"miscellaneous/functions.html":{}}}],["yes",{"_index":387,"title":{},"body":{"controllers/AppController.html":{},"classes/ConflictException.html":{},"classes/ContentTooLargeException.html":{},"classes/ErrorResponse.html":{},"classes/ForbiddenException.html":{},"classes/InternalServerErrorException.html":{},"injectables/IsEmailUniqueValidator.html":{},"injectables/IsLocalFileExistValidator.html":{},"injectables/IsNameUniqueValidator.html":{},"injectables/IsPhoneNumberUniqueValidator.html":{},"injectables/IsPostExistValidator.html":{},"injectables/IsTopicExistValidator.html":{},"injectables/IsUserExistValidator.html":{},"injectables/IsUsernameUniqueValidator.html":{},"injectables/JwtAuthGuard.html":{},"classes/NotFoundException.html":{},"classes/RequestTimeoutException.html":{},"classes/SuccessResponse.html":{},"classes/TooManyRequestsException.html":{},"classes/UnauthorizedException.html":{},"classes/UnprocessableEntityException.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":2597,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":452,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonServicesModule.html":{},"modules/PostsModule.html":{},"modules/ServicesModule.html":{},"modules/StoragesModule.html":{},"modules/TasksModule.html":{},"modules/TopicsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddFirstAndLastNameAttribute1669010304048.html":{"url":"classes/AddFirstAndLastNameAttribute1669010304048.html","title":"class - AddFirstAndLastNameAttribute1669010304048","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFirstAndLastNameAttribute1669010304048\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1669010304048-AddFirstAndLastNameAttribute.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AddFirstAndLastNameAttribute1669010304048'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1669010304048-AddFirstAndLastNameAttribute.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1669010304048-AddFirstAndLastNameAttribute.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1669010304048-AddFirstAndLastNameAttribute.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AddFirstAndLastNameAttribute1669010304048\n  implements MigrationInterface\n{\n  name = 'AddFirstAndLastNameAttribute1669010304048';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`firstName\\` varchar(255) NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`lastName\\` varchar(255) NOT NULL`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`lastName\\``);\n    await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`firstName\\``);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddLocalFileTable1675692342862.html":{"url":"classes/AddLocalFileTable1675692342862.html","title":"class - AddLocalFileTable1675692342862","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddLocalFileTable1675692342862\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1675692342862-AddLocalFileTable.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AddLocalFileTable1675692342862'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1675692342862-AddLocalFileTable.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1675692342862-AddLocalFileTable.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1675692342862-AddLocalFileTable.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AddLocalFileTable1675692342862 implements MigrationInterface {\n  name = 'AddLocalFileTable1675692342862';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `CREATE TABLE \\`local_file\\` (\\`id\\` int NOT NULL AUTO_INCREMENT, \\`fileName\\` varchar(255) NOT NULL, \\`path\\` varchar(255) NOT NULL, \\`mimeType\\` varchar(255) NOT NULL, \\`generalAccess\\` enum ('private', 'public') NOT NULL, \\`ownerId\\` int NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD \\`avatarFileId\\` int NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD UNIQUE INDEX \\`IDX_3f24071759ec6354b0259f9c4d\\` (\\`avatarFileId\\`)`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \\`REL_3f24071759ec6354b0259f9c4d\\` ON \\`user_profile\\` (\\`avatarFileId\\`)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD CONSTRAINT \\`FK_3f24071759ec6354b0259f9c4d1\\` FOREIGN KEY (\\`avatarFileId\\`) REFERENCES \\`local_file\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` ADD CONSTRAINT \\`FK_1dc62b3a3dd9182d23a01bb0c31\\` FOREIGN KEY (\\`ownerId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` DROP FOREIGN KEY \\`FK_1dc62b3a3dd9182d23a01bb0c31\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` DROP FOREIGN KEY \\`FK_3f24071759ec6354b0259f9c4d1\\``,\n    );\n    await queryRunner.query(\n      `DROP INDEX \\`REL_3f24071759ec6354b0259f9c4d\\` ON \\`user_profile\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` DROP INDEX \\`IDX_3f24071759ec6354b0259f9c4d\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` DROP COLUMN \\`avatarFileId\\``,\n    );\n    await queryRunner.query(`DROP TABLE \\`local_file\\``);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddPostTable1678073082722.html":{"url":"classes/AddPostTable1678073082722.html","title":"class - AddPostTable1678073082722","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddPostTable1678073082722\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1678073082722-AddPostTable.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AddPostTable1678073082722'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1678073082722-AddPostTable.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1678073082722-AddPostTable.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1678073082722-AddPostTable.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AddPostTable1678073082722 implements MigrationInterface {\n  name = 'AddPostTable1678073082722';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `CREATE TABLE \\`post\\` (\\`id\\` varchar(36) NOT NULL, \\`title\\` varchar(255) NOT NULL, \\`content\\` varchar(255) NOT NULL, \\`category\\` varchar(255) NOT NULL, \\`authorId\\` varchar(255) NOT NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_c6fb082a3114f35d0cc27c518e0\\` FOREIGN KEY (\\`authorId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_c6fb082a3114f35d0cc27c518e0\\``,\n    );\n    await queryRunner.query(`DROP TABLE \\`post\\``);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddRoleTable1675697129483.html":{"url":"classes/AddRoleTable1675697129483.html","title":"class - AddRoleTable1675697129483","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddRoleTable1675697129483\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1675697129483-AddRoleTable.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AddRoleTable1675697129483'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1675697129483-AddRoleTable.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1675697129483-AddRoleTable.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1675697129483-AddRoleTable.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AddRoleTable1675697129483 implements MigrationInterface {\n  name = 'AddRoleTable1675697129483';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `DROP INDEX \\`IDX_3f24071759ec6354b0259f9c4d\\` ON \\`user_profile\\``,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \\`role\\` (\\`id\\` int NOT NULL AUTO_INCREMENT, \\`name\\` varchar(255) NOT NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \\`users_roles\\` (\\`userId\\` int NOT NULL, \\`roleId\\` int NOT NULL, INDEX \\`IDX_776b7cf9330802e5ef5a8fb18d\\` (\\`userId\\`), INDEX \\`IDX_4fb14631257670efa14b15a3d8\\` (\\`roleId\\`), PRIMARY KEY (\\`userId\\`, \\`roleId\\`)) ENGINE=InnoDB`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`roles\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD CONSTRAINT \\`FK_776b7cf9330802e5ef5a8fb18dc\\` FOREIGN KEY (\\`userId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE CASCADE`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD CONSTRAINT \\`FK_4fb14631257670efa14b15a3d86\\` FOREIGN KEY (\\`roleId\\`) REFERENCES \\`role\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` DROP FOREIGN KEY \\`FK_4fb14631257670efa14b15a3d86\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` DROP FOREIGN KEY \\`FK_776b7cf9330802e5ef5a8fb18dc\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`roles\\` enum ('super-admin', 'user') NOT NULL`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \\`IDX_4fb14631257670efa14b15a3d8\\` ON \\`users_roles\\``,\n    );\n    await queryRunner.query(\n      `DROP INDEX \\`IDX_776b7cf9330802e5ef5a8fb18d\\` ON \\`users_roles\\``,\n    );\n    await queryRunner.query(`DROP TABLE \\`users_roles\\``);\n    await queryRunner.query(`DROP TABLE \\`role\\``);\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \\`IDX_3f24071759ec6354b0259f9c4d\\` ON \\`user_profile\\` (\\`avatarFileId\\`)`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddTopicTable1678958507781.html":{"url":"classes/AddTopicTable1678958507781.html","title":"class - AddTopicTable1678958507781","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddTopicTable1678958507781\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1678958507781-AddTopicTable.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AddTopicTable1678958507781'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1678958507781-AddTopicTable.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1678958507781-AddTopicTable.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1678958507781-AddTopicTable.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AddTopicTable1678958507781 implements MigrationInterface {\n  name = 'AddTopicTable1678958507781';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `CREATE TABLE \\`topic\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`name\\` varchar(255) NOT NULL, UNIQUE INDEX \\`IDX_15f634a2dbf62a79bb726fc615\\` (\\`name\\`), PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \\`posts_topics\\` (\\`postId\\` varchar(36) NOT NULL, \\`topicId\\` varchar(36) NOT NULL, INDEX \\`IDX_c7456e05d41b3df071726b7084\\` (\\`postId\\`), INDEX \\`IDX_7c5dca0db8653a4c4efa3974a3\\` (\\`topicId\\`), PRIMARY KEY (\\`postId\\`, \\`topicId\\`)) ENGINE=InnoDB`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`category\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`posts_topics\\` ADD CONSTRAINT \\`FK_c7456e05d41b3df071726b7084a\\` FOREIGN KEY (\\`postId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE CASCADE`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`posts_topics\\` ADD CONSTRAINT \\`FK_7c5dca0db8653a4c4efa3974a37\\` FOREIGN KEY (\\`topicId\\`) REFERENCES \\`topic\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \\`posts_topics\\` DROP FOREIGN KEY \\`FK_7c5dca0db8653a4c4efa3974a37\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`posts_topics\\` DROP FOREIGN KEY \\`FK_c7456e05d41b3df071726b7084a\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`post\\` ADD \\`category\\` varchar(255) NOT NULL`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \\`IDX_7c5dca0db8653a4c4efa3974a3\\` ON \\`posts_topics\\``,\n    );\n    await queryRunner.query(\n      `DROP INDEX \\`IDX_c7456e05d41b3df071726b7084\\` ON \\`posts_topics\\``,\n    );\n    await queryRunner.query(`DROP TABLE \\`posts_topics\\``);\n    await queryRunner.query(\n      `DROP INDEX \\`IDX_15f634a2dbf62a79bb726fc615\\` ON \\`topic\\``,\n    );\n    await queryRunner.query(`DROP TABLE \\`topic\\``);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddUserProfileTable1669618726311.html":{"url":"classes/AddUserProfileTable1669618726311.html","title":"class - AddUserProfileTable1669618726311","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddUserProfileTable1669618726311\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1669618726311-AddUserProfileTable.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AddUserProfileTable1669618726311'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1669618726311-AddUserProfileTable.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1669618726311-AddUserProfileTable.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1669618726311-AddUserProfileTable.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AddUserProfileTable1669618726311 implements MigrationInterface {\n  name = 'AddUserProfileTable1669618726311';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `CREATE TABLE \\`user_profile\\` (\\`id\\` int NOT NULL, \\`firstName\\` varchar(255) NOT NULL, \\`lastName\\` varchar(255) NOT NULL, \\`bio\\` varchar(255) NULL, \\`location\\` varchar(255) NULL, \\`website\\` varchar(255) NULL, \\`birthDate\\` datetime NOT NULL, UNIQUE INDEX \\`REL_f44d0cd18cfd80b0fed7806c3b\\` (\\`id\\`), PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`description\\``);\n    await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`firstName\\``);\n    await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`lastName\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`email\\` varchar(255) NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`phone\\` varchar(255) NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD CONSTRAINT \\`FK_f44d0cd18cfd80b0fed7806c3b7\\` FOREIGN KEY (\\`id\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` DROP FOREIGN KEY \\`FK_f44d0cd18cfd80b0fed7806c3b7\\``,\n    );\n    await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`phone\\``);\n    await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`email\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`lastName\\` varchar(255) NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`firstName\\` varchar(255) NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`description\\` text NULL`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \\`REL_f44d0cd18cfd80b0fed7806c3b\\` ON \\`user_profile\\``,\n    );\n    await queryRunner.query(`DROP TABLE \\`user_profile\\``);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AlterLastSignedInAtAttribute1678189980290.html":{"url":"classes/AlterLastSignedInAtAttribute1678189980290.html","title":"class - AlterLastSignedInAtAttribute1678189980290","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AlterLastSignedInAtAttribute1678189980290\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1678189980290-AlterLastSignedInAtAttribute.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AlterLastSignedInAtAttribute1678189980290'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1678189980290-AlterLastSignedInAtAttribute.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1678189980290-AlterLastSignedInAtAttribute.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1678189980290-AlterLastSignedInAtAttribute.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AlterLastSignedInAtAttribute1678189980290\n  implements MigrationInterface\n{\n  name = 'AlterLastSignedInAtAttribute1678189980290';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` DROP COLUMN \\`lastSignedInAt\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`lastSignedInAt\\` datetime(6) NULL`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` DROP COLUMN \\`lastSignedInAt\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` DROP COLUMN \\`lastSignedInAt\\``,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AlterPhoneAttributeUniqueness1676900183425.html":{"url":"classes/AlterPhoneAttributeUniqueness1676900183425.html","title":"class - AlterPhoneAttributeUniqueness1676900183425","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AlterPhoneAttributeUniqueness1676900183425\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1676900183425-AlterPhoneAttributeUniqueness.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AlterPhoneAttributeUniqueness1676900183425'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1676900183425-AlterPhoneAttributeUniqueness.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1676900183425-AlterPhoneAttributeUniqueness.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1676900183425-AlterPhoneAttributeUniqueness.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class AlterPhoneAttributeUniqueness1676900183425 implements MigrationInterface {\n    name = 'AlterPhoneAttributeUniqueness1676900183425'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`DROP INDEX \\`IDX_3f24071759ec6354b0259f9c4d\\` ON \\`user_profile\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_f44d0cd18cfd80b0fed7806c3b\\` ON \\`user_profile\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD UNIQUE INDEX \\`IDX_8e1f623798118e629b46a9e629\\` (\\`phone\\`)`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP INDEX \\`IDX_8e1f623798118e629b46a9e629\\``);\n        await queryRunner.query(`CREATE UNIQUE INDEX \\`IDX_f44d0cd18cfd80b0fed7806c3b\\` ON \\`user_profile\\` (\\`id\\`)`);\n        await queryRunner.query(`CREATE UNIQUE INDEX \\`IDX_3f24071759ec6354b0259f9c4d\\` ON \\`user_profile\\` (\\`avatarFileId\\`)`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AlterRoleNameAttribute1675699186800.html":{"url":"classes/AlterRoleNameAttribute1675699186800.html","title":"class - AlterRoleNameAttribute1675699186800","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AlterRoleNameAttribute1675699186800\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1675699186800-AlterRoleNameAttribute.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AlterRoleNameAttribute1675699186800'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1675699186800-AlterRoleNameAttribute.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1675699186800-AlterRoleNameAttribute.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1675699186800-AlterRoleNameAttribute.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AlterRoleNameAttribute1675699186800 implements MigrationInterface {\n  name = 'AlterRoleNameAttribute1675699186800';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`ALTER TABLE \\`role\\` DROP COLUMN \\`name\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`role\\` ADD \\`name\\` enum ('super-admin', 'user') NOT NULL`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`ALTER TABLE \\`role\\` DROP COLUMN \\`name\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`role\\` ADD \\`name\\` varchar(255) NOT NULL`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AlterTablesCascade1678096726170.html":{"url":"classes/AlterTablesCascade1678096726170.html","title":"class - AlterTablesCascade1678096726170","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AlterTablesCascade1678096726170\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1678096726170-AlterTablesCascade.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AlterTablesCascade1678096726170'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1678096726170-AlterTablesCascade.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1678096726170-AlterTablesCascade.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1678096726170-AlterTablesCascade.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AlterTablesCascade1678096726170 implements MigrationInterface {\n  name = 'AlterTablesCascade1678096726170';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` DROP FOREIGN KEY \\`FK_3f24071759ec6354b0259f9c4d1\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` DROP FOREIGN KEY \\`FK_1dc62b3a3dd9182d23a01bb0c31\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_c6fb082a3114f35d0cc27c518e0\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD CONSTRAINT \\`FK_3f24071759ec6354b0259f9c4d1\\` FOREIGN KEY (\\`avatarFileId\\`) REFERENCES \\`local_file\\`(\\`id\\`) ON DELETE SET NULL ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` ADD CONSTRAINT \\`FK_1dc62b3a3dd9182d23a01bb0c31\\` FOREIGN KEY (\\`ownerId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_c6fb082a3114f35d0cc27c518e0\\` FOREIGN KEY (\\`authorId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_c6fb082a3114f35d0cc27c518e0\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` DROP FOREIGN KEY \\`FK_1dc62b3a3dd9182d23a01bb0c31\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` DROP FOREIGN KEY \\`FK_3f24071759ec6354b0259f9c4d1\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_c6fb082a3114f35d0cc27c518e0\\` FOREIGN KEY (\\`authorId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` ADD CONSTRAINT \\`FK_1dc62b3a3dd9182d23a01bb0c31\\` FOREIGN KEY (\\`ownerId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD CONSTRAINT \\`FK_3f24071759ec6354b0259f9c4d1\\` FOREIGN KEY (\\`avatarFileId\\`) REFERENCES \\`local_file\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html":{"url":"classes/AlterTablesCreatedAndUpdatedAt1678183368786.html","title":"class - AlterTablesCreatedAndUpdatedAt1678183368786","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AlterTablesCreatedAndUpdatedAt1678183368786\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1678183368786-AlterTablesCreatedAndUpdatedAt.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AlterTablesCreatedAndUpdatedAt1678183368786'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1678183368786-AlterTablesCreatedAndUpdatedAt.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1678183368786-AlterTablesCreatedAndUpdatedAt.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1678183368786-AlterTablesCreatedAndUpdatedAt.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AlterTablesCreatedAndUpdatedAt1678183368786\n  implements MigrationInterface\n{\n  name = 'AlterTablesCreatedAndUpdatedAt1678183368786';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \\`role\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`role\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`lastSignedInAt\\` timestamp NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`post\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`post\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`updatedAt\\``);\n    await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`createdAt\\``);\n    await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`updatedAt\\``);\n    await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`createdAt\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` DROP COLUMN \\`lastSignedInAt\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` DROP COLUMN \\`updatedAt\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` DROP COLUMN \\`createdAt\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` DROP COLUMN \\`updatedAt\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` DROP COLUMN \\`createdAt\\``,\n    );\n    await queryRunner.query(`ALTER TABLE \\`role\\` DROP COLUMN \\`updatedAt\\``);\n    await queryRunner.query(`ALTER TABLE \\`role\\` DROP COLUMN \\`createdAt\\``);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AlterTablesIdentifierToUuid1676872212399.html":{"url":"classes/AlterTablesIdentifierToUuid1676872212399.html","title":"class - AlterTablesIdentifierToUuid1676872212399","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AlterTablesIdentifierToUuid1676872212399\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1676872212399-AlterTablesIdentifierToUuid.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AlterTablesIdentifierToUuid1676872212399'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1676872212399-AlterTablesIdentifierToUuid.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1676872212399-AlterTablesIdentifierToUuid.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1676872212399-AlterTablesIdentifierToUuid.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AlterTablesIdentifierToUuid1676872212399\n  implements MigrationInterface\n{\n  name = 'AlterTablesIdentifierToUuid1676872212399';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` DROP FOREIGN KEY \\`FK_3f24071759ec6354b0259f9c4d1\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` DROP FOREIGN KEY \\`FK_1dc62b3a3dd9182d23a01bb0c31\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` CHANGE \\`id\\` \\`id\\` int NOT NULL`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`local_file\\` DROP PRIMARY KEY`);\n    await queryRunner.query(`ALTER TABLE \\`local_file\\` DROP COLUMN \\`id\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` ADD \\`id\\` varchar(36) NOT NULL PRIMARY KEY`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` DROP COLUMN \\`ownerId\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` ADD \\`ownerId\\` varchar(255) NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` DROP FOREIGN KEY \\`FK_f44d0cd18cfd80b0fed7806c3b7\\``,\n    );\n    await queryRunner.query(`ALTER TABLE \\`user_profile\\` DROP PRIMARY KEY`);\n    await queryRunner.query(\n      `DROP INDEX \\`REL_f44d0cd18cfd80b0fed7806c3b\\` ON \\`user_profile\\``,\n    );\n    await queryRunner.query(`ALTER TABLE \\`user_profile\\` DROP COLUMN \\`id\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD \\`id\\` varchar(255) NOT NULL PRIMARY KEY`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD UNIQUE INDEX \\`IDX_f44d0cd18cfd80b0fed7806c3b\\` (\\`id\\`)`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \\`REL_3f24071759ec6354b0259f9c4d\\` ON \\`user_profile\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` DROP COLUMN \\`avatarFileId\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD \\`avatarFileId\\` varchar(255) NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD UNIQUE INDEX \\`IDX_3f24071759ec6354b0259f9c4d\\` (\\`avatarFileId\\`)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` DROP FOREIGN KEY \\`FK_776b7cf9330802e5ef5a8fb18dc\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` CHANGE \\`id\\` \\`id\\` int NOT NULL`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`user\\` DROP PRIMARY KEY`);\n    await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`id\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`id\\` varchar(36) NOT NULL PRIMARY KEY`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD UNIQUE INDEX \\`IDX_78a916df40e02a9deb1c4b75ed\\` (\\`username\\`)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD UNIQUE INDEX \\`IDX_e12875dfb3b1d92d7d7c5377e2\\` (\\`email\\`)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` DROP FOREIGN KEY \\`FK_4fb14631257670efa14b15a3d86\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`role\\` CHANGE \\`id\\` \\`id\\` int NOT NULL`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`role\\` DROP PRIMARY KEY`);\n    await queryRunner.query(`ALTER TABLE \\`role\\` DROP COLUMN \\`id\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`role\\` ADD \\`id\\` varchar(36) NOT NULL PRIMARY KEY`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`role\\` ADD UNIQUE INDEX \\`IDX_ae4578dcaed5adff96595e6166\\` (\\`name\\`)`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`users_roles\\` DROP PRIMARY KEY`);\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD PRIMARY KEY (\\`roleId\\`)`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \\`IDX_776b7cf9330802e5ef5a8fb18d\\` ON \\`users_roles\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` DROP COLUMN \\`userId\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD \\`userId\\` varchar(36) NOT NULL`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`users_roles\\` DROP PRIMARY KEY`);\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD PRIMARY KEY (\\`roleId\\`, \\`userId\\`)`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`users_roles\\` DROP PRIMARY KEY`);\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD PRIMARY KEY (\\`userId\\`)`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \\`IDX_4fb14631257670efa14b15a3d8\\` ON \\`users_roles\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` DROP COLUMN \\`roleId\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD \\`roleId\\` varchar(36) NOT NULL`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`users_roles\\` DROP PRIMARY KEY`);\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD PRIMARY KEY (\\`userId\\`, \\`roleId\\`)`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \\`REL_f44d0cd18cfd80b0fed7806c3b\\` ON \\`user_profile\\` (\\`id\\`)`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \\`REL_3f24071759ec6354b0259f9c4d\\` ON \\`user_profile\\` (\\`avatarFileId\\`)`,\n    );\n    await queryRunner.query(\n      `CREATE INDEX \\`IDX_776b7cf9330802e5ef5a8fb18d\\` ON \\`users_roles\\` (\\`userId\\`)`,\n    );\n    await queryRunner.query(\n      `CREATE INDEX \\`IDX_4fb14631257670efa14b15a3d8\\` ON \\`users_roles\\` (\\`roleId\\`)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` ADD CONSTRAINT \\`FK_1dc62b3a3dd9182d23a01bb0c31\\` FOREIGN KEY (\\`ownerId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD CONSTRAINT \\`FK_f44d0cd18cfd80b0fed7806c3b7\\` FOREIGN KEY (\\`id\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD CONSTRAINT \\`FK_3f24071759ec6354b0259f9c4d1\\` FOREIGN KEY (\\`avatarFileId\\`) REFERENCES \\`local_file\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD CONSTRAINT \\`FK_776b7cf9330802e5ef5a8fb18dc\\` FOREIGN KEY (\\`userId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE CASCADE`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD CONSTRAINT \\`FK_4fb14631257670efa14b15a3d86\\` FOREIGN KEY (\\`roleId\\`) REFERENCES \\`role\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` DROP FOREIGN KEY \\`FK_4fb14631257670efa14b15a3d86\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` DROP FOREIGN KEY \\`FK_776b7cf9330802e5ef5a8fb18dc\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` DROP FOREIGN KEY \\`FK_3f24071759ec6354b0259f9c4d1\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` DROP FOREIGN KEY \\`FK_f44d0cd18cfd80b0fed7806c3b7\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` DROP FOREIGN KEY \\`FK_1dc62b3a3dd9182d23a01bb0c31\\``,\n    );\n    await queryRunner.query(\n      `DROP INDEX \\`IDX_4fb14631257670efa14b15a3d8\\` ON \\`users_roles\\``,\n    );\n    await queryRunner.query(\n      `DROP INDEX \\`IDX_776b7cf9330802e5ef5a8fb18d\\` ON \\`users_roles\\``,\n    );\n    await queryRunner.query(\n      `DROP INDEX \\`REL_3f24071759ec6354b0259f9c4d\\` ON \\`user_profile\\``,\n    );\n    await queryRunner.query(\n      `DROP INDEX \\`REL_f44d0cd18cfd80b0fed7806c3b\\` ON \\`user_profile\\``,\n    );\n    await queryRunner.query(`ALTER TABLE \\`users_roles\\` DROP PRIMARY KEY`);\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD PRIMARY KEY (\\`userId\\`)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` DROP COLUMN \\`roleId\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD \\`roleId\\` int NOT NULL`,\n    );\n    await queryRunner.query(\n      `CREATE INDEX \\`IDX_4fb14631257670efa14b15a3d8\\` ON \\`users_roles\\` (\\`roleId\\`)`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`users_roles\\` DROP PRIMARY KEY`);\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD PRIMARY KEY (\\`roleId\\`, \\`userId\\`)`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`users_roles\\` DROP PRIMARY KEY`);\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD PRIMARY KEY (\\`roleId\\`)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` DROP COLUMN \\`userId\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD \\`userId\\` int NOT NULL`,\n    );\n    await queryRunner.query(\n      `CREATE INDEX \\`IDX_776b7cf9330802e5ef5a8fb18d\\` ON \\`users_roles\\` (\\`userId\\`)`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`users_roles\\` DROP PRIMARY KEY`);\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD PRIMARY KEY (\\`userId\\`, \\`roleId\\`)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`role\\` DROP INDEX \\`IDX_ae4578dcaed5adff96595e6166\\``,\n    );\n    await queryRunner.query(`ALTER TABLE \\`role\\` DROP COLUMN \\`id\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`role\\` ADD \\`id\\` int NOT NULL AUTO_INCREMENT`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`role\\` ADD PRIMARY KEY (\\`id\\`)`);\n    await queryRunner.query(\n      `ALTER TABLE \\`role\\` CHANGE \\`id\\` \\`id\\` int NOT NULL AUTO_INCREMENT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD CONSTRAINT \\`FK_4fb14631257670efa14b15a3d86\\` FOREIGN KEY (\\`roleId\\`) REFERENCES \\`role\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` DROP INDEX \\`IDX_e12875dfb3b1d92d7d7c5377e2\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` DROP INDEX \\`IDX_78a916df40e02a9deb1c4b75ed\\``,\n    );\n    await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`id\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`id\\` int NOT NULL AUTO_INCREMENT`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`user\\` ADD PRIMARY KEY (\\`id\\`)`);\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` CHANGE \\`id\\` \\`id\\` int NOT NULL AUTO_INCREMENT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD CONSTRAINT \\`FK_776b7cf9330802e5ef5a8fb18dc\\` FOREIGN KEY (\\`userId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE CASCADE`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` DROP INDEX \\`IDX_3f24071759ec6354b0259f9c4d\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` DROP COLUMN \\`avatarFileId\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD \\`avatarFileId\\` int NULL`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \\`REL_3f24071759ec6354b0259f9c4d\\` ON \\`user_profile\\` (\\`avatarFileId\\`)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` DROP INDEX \\`IDX_f44d0cd18cfd80b0fed7806c3b\\``,\n    );\n    await queryRunner.query(`ALTER TABLE \\`user_profile\\` DROP COLUMN \\`id\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD \\`id\\` int NOT NULL`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \\`REL_f44d0cd18cfd80b0fed7806c3b\\` ON \\`user_profile\\` (\\`id\\`)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD PRIMARY KEY (\\`id\\`)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD CONSTRAINT \\`FK_f44d0cd18cfd80b0fed7806c3b7\\` FOREIGN KEY (\\`id\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` DROP COLUMN \\`ownerId\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` ADD \\`ownerId\\` int NULL`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`local_file\\` DROP COLUMN \\`id\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` ADD \\`id\\` int NOT NULL AUTO_INCREMENT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` ADD PRIMARY KEY (\\`id\\`)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` CHANGE \\`id\\` \\`id\\` int NOT NULL AUTO_INCREMENT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` ADD CONSTRAINT \\`FK_1dc62b3a3dd9182d23a01bb0c31\\` FOREIGN KEY (\\`ownerId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`user_profile\\` ADD CONSTRAINT \\`FK_3f24071759ec6354b0259f9c4d1\\` FOREIGN KEY (\\`avatarFileId\\`) REFERENCES \\`local_file\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AlterUserRolesAttribute1679276151891.html":{"url":"classes/AlterUserRolesAttribute1679276151891.html","title":"class - AlterUserRolesAttribute1679276151891","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AlterUserRolesAttribute1679276151891\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1679276151891-AlterUserRolesAttribute.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AlterUserRolesAttribute1679276151891'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1679276151891-AlterUserRolesAttribute.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1679276151891-AlterUserRolesAttribute.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1679276151891-AlterUserRolesAttribute.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AlterUserRolesAttribute1679276151891\n  implements MigrationInterface\n{\n  name = 'AlterUserRolesAttribute1679276151891';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`roles\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`roles\\` set ('super-admin', 'user') NOT NULL`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`roles\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`roles\\` enum ('super-admin', 'user') NOT NULL`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ApiErrorResponseMetadata.html":{"url":"interfaces/ApiErrorResponseMetadata.html","title":"interface - ApiErrorResponseMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiErrorResponseMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/decorators/open-api/api-error-response.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the interface for api error response meta data.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            response\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         ApiResponseOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ApiResponseOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        response:         ApiClientErrorResponse | ApiServerErrorResponse | ApiCustomErrorResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ApiClientErrorResponse | ApiServerErrorResponse | ApiCustomErrorResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ApiBadGatewayResponse,\n  ApiBadRequestResponse,\n  ApiConflictResponse,\n  ApiForbiddenResponse,\n  ApiGatewayTimeoutResponse,\n  ApiGoneResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotFoundResponse,\n  ApiNotImplementedResponse,\n  ApiPayloadTooLargeResponse,\n  ApiPreconditionFailedResponse,\n  ApiRequestTimeoutResponse,\n  ApiResponseOptions,\n  ApiServiceUnavailableResponse,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n  ApiUnprocessableEntityResponse,\n  ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport { ApiConflictErrorResponse } from './errors/api-conflict-error-response.decorator';\nimport { ApiForbiddenErrorResponse } from './errors/api-forbidden-error-response.decorator';\nimport { ApiInternalServerErrorErrorResponse } from './errors/api-internal-server-error-response.decorator';\nimport { ApiNotFoundErrorResponse } from './errors/api-not-found-error-response.decorator';\nimport { ApiRequestTimeoutErrorResponse } from './errors/api-request-timeout-error-response.decorator';\nimport { ApiTooManyRequestsErrorResponse } from './errors/api-too-many-requests-error-response.decorator';\nimport { ApiUnauthorizedErrorResponse } from './errors/api-unauthorized-error-response.decorator';\nimport { ApiUnprocessableEntityErrorResponse } from './errors/api-unprocessable-entity-error-response.decorator';\n\n/**\n * Defines the type of api client error response.\n */\nexport type ApiClientErrorResponse =\n  | typeof ApiBadRequestResponse\n  | typeof ApiUnauthorizedResponse\n  | typeof ApiForbiddenResponse\n  | typeof ApiNotFoundResponse\n  | typeof ApiMethodNotAllowedResponse\n  | typeof ApiRequestTimeoutResponse\n  | typeof ApiConflictResponse\n  | typeof ApiGoneResponse\n  | typeof ApiPreconditionFailedResponse\n  | typeof ApiPayloadTooLargeResponse\n  | typeof ApiUnsupportedMediaTypeResponse\n  | typeof ApiUnprocessableEntityResponse\n  | typeof ApiPreconditionFailedResponse\n  | typeof ApiTooManyRequestsResponse;\n\n/**\n * Defines the type of api server error response.\n */\nexport type ApiServerErrorResponse =\n  | typeof ApiInternalServerErrorResponse\n  | typeof ApiNotImplementedResponse\n  | typeof ApiBadGatewayResponse\n  | typeof ApiServiceUnavailableResponse\n  | typeof ApiGatewayTimeoutResponse;\n\n/**\n * Defines the type of custom api error response.\n */\nexport type ApiCustomErrorResponse =\n  | typeof ApiConflictErrorResponse\n  | typeof ApiForbiddenErrorResponse\n  | typeof ApiInternalServerErrorErrorResponse\n  | typeof ApiNotFoundErrorResponse\n  | typeof ApiRequestTimeoutErrorResponse\n  | typeof ApiTooManyRequestsErrorResponse\n  | typeof ApiUnauthorizedErrorResponse\n  | typeof ApiUnprocessableEntityErrorResponse;\n\n/**\n * Defines the interface for api error response meta data.\n */\nexport interface ApiErrorResponseMetadata {\n  response:\n    | ApiClientErrorResponse\n    | ApiServerErrorResponse\n    | ApiCustomErrorResponse;\n  options?: ApiResponseOptions;\n}\n\n/**\n * Decorator that encapsulates any error response of type of {@link ApiClientErrorResponse}, {@link ApiServerErrorResponse} and {@link ApiCustomErrorResponse},\n * to the scope of controller or method or route handler, depending on its context.\n *\n * @param options The api error response meta data\n *\n * @returns The method decorator & class decorator & property decorator.\n */\nexport const ApiErrorResponse = (\n  metadata: ApiErrorResponseMetadata,\n): MethodDecorator & ClassDecorator & PropertyDecorator => {\n  const { response, options } = metadata;\n\n  return response({ ...options });\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ApiSuccessResponseMetadata.html":{"url":"interfaces/ApiSuccessResponseMetadata.html","title":"interface - ApiSuccessResponseMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiSuccessResponseMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/decorators/open-api/api-success-response.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the interface for api success response meta data.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            response\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         ApiResponseOptions | ApiSuccessResponseMetadataOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ApiResponseOptions | ApiSuccessResponseMetadataOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        response:         ApiSuccessfulResponse | ApiCustomSuccessfulResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ApiSuccessfulResponse | ApiCustomSuccessfulResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@nestjs/common';\nimport {\n  ApiOkResponse,\n  ApiCreatedResponse,\n  ApiAcceptedResponse,\n  ApiNoContentResponse,\n  ApiResponseOptions,\n} from '@nestjs/swagger';\nimport { ApiCreatedSuccessResponse } from './successes/api-created-success-response.decorator';\nimport { ApiNoContentSuccessResponse } from './successes/api-no-content-success-response.decorator';\nimport { ApiOkSuccessResponse } from './successes/api-ok-success-response.decorator';\n\n/**\n * Defines the type of api successful response.\n */\nexport type ApiSuccessfulResponse =\n  | typeof ApiOkResponse\n  | typeof ApiCreatedResponse\n  | typeof ApiAcceptedResponse\n  | typeof ApiNoContentResponse;\n\n/**\n * Defines the type of api custom successful response.\n */\nexport type ApiCustomSuccessfulResponse =\n  | typeof ApiOkSuccessResponse\n  | typeof ApiCreatedSuccessResponse\n  | typeof ApiNoContentSuccessResponse;\n\n/**\n * Defines the interface for api success response meta data.\n */\nexport interface ApiSuccessResponseMetadata> {\n  response: ApiSuccessfulResponse | ApiCustomSuccessfulResponse;\n  options?: ApiResponseOptions | ApiSuccessResponseMetadataOptions;\n}\n\n/**\n * Defines the interface for api success response meta data options.\n */\nexport interface ApiSuccessResponseMetadataOptions> {\n  model?: TModel;\n  isArray?: boolean;\n  options?: ApiResponseOptions;\n}\n\n/**\n * Decorator that encapsulates any success response of type of {@link ApiSuccessfulResponse} and {@link ApiCustomSuccessfulResponse}\n * to the scope of controller or method or route handler, depending on its context.\n *\n * @param options The api success response meta data\n *\n * @returns The method decorator & class decorator & property decorator.\n */\nexport const ApiSuccessResponse = >(\n  metadata: ApiSuccessResponseMetadata,\n): MethodDecorator & ClassDecorator & PropertyDecorator => {\n  const { response, options } = metadata;\n\n  return response({ ...options });\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ApiSuccessResponseMetadataOptions.html":{"url":"interfaces/ApiSuccessResponseMetadataOptions.html","title":"interface - ApiSuccessResponseMetadataOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiSuccessResponseMetadataOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/decorators/open-api/api-success-response.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the interface for api success response meta data options.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            isArray\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            model\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            options\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isArray\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isArray:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        model\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        model:     TModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TModel\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         ApiResponseOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ApiResponseOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@nestjs/common';\nimport {\n  ApiOkResponse,\n  ApiCreatedResponse,\n  ApiAcceptedResponse,\n  ApiNoContentResponse,\n  ApiResponseOptions,\n} from '@nestjs/swagger';\nimport { ApiCreatedSuccessResponse } from './successes/api-created-success-response.decorator';\nimport { ApiNoContentSuccessResponse } from './successes/api-no-content-success-response.decorator';\nimport { ApiOkSuccessResponse } from './successes/api-ok-success-response.decorator';\n\n/**\n * Defines the type of api successful response.\n */\nexport type ApiSuccessfulResponse =\n  | typeof ApiOkResponse\n  | typeof ApiCreatedResponse\n  | typeof ApiAcceptedResponse\n  | typeof ApiNoContentResponse;\n\n/**\n * Defines the type of api custom successful response.\n */\nexport type ApiCustomSuccessfulResponse =\n  | typeof ApiOkSuccessResponse\n  | typeof ApiCreatedSuccessResponse\n  | typeof ApiNoContentSuccessResponse;\n\n/**\n * Defines the interface for api success response meta data.\n */\nexport interface ApiSuccessResponseMetadata> {\n  response: ApiSuccessfulResponse | ApiCustomSuccessfulResponse;\n  options?: ApiResponseOptions | ApiSuccessResponseMetadataOptions;\n}\n\n/**\n * Defines the interface for api success response meta data options.\n */\nexport interface ApiSuccessResponseMetadataOptions> {\n  model?: TModel;\n  isArray?: boolean;\n  options?: ApiResponseOptions;\n}\n\n/**\n * Decorator that encapsulates any success response of type of {@link ApiSuccessfulResponse} and {@link ApiCustomSuccessfulResponse}\n * to the scope of controller or method or route handler, depending on its context.\n *\n * @param options The api success response meta data\n *\n * @returns The method decorator & class decorator & property decorator.\n */\nexport const ApiSuccessResponse = >(\n  metadata: ApiSuccessResponseMetadata,\n): MethodDecorator & ClassDecorator & PropertyDecorator => {\n  const { response, options } = metadata;\n\n  return response({ ...options });\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AppConfigOptions.html":{"url":"interfaces/AppConfigOptions.html","title":"interface - AppConfigOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AppConfigOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/app/app.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines interface for application configuration options.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            debug\n                                        \n                                \n                                \n                                        \n                                            environment\n                                        \n                                \n                                \n                                        \n                                            host\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        debug\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        debug:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        environment\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        environment:         Environment\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Environment\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\nimport { Transform } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n} from 'class-validator';\nimport { toBoolean } from '../../common/utils/transformers/to-boolean.transformer.util';\nimport { toNumber } from '../../common/utils/transformers/to-number.transformer.util';\nimport { isEnvValid } from '../../common/utils/validators/is-env-valid.validator.util';\n\n/**\n * Defines enum for application environment.\n */\nexport enum Environment {\n  Development = 'development',\n  Staging = 'staging',\n  Production = 'production',\n  Provision = 'provision',\n  Test = 'test',\n}\n\n/**\n * Defines interface for application configuration options.\n */\nexport interface AppConfigOptions {\n  environment: Environment;\n  host: string;\n  port: number;\n  debug: boolean;\n}\n\n/**\n * Defines class to hold general app-related environment variables.\n *\n * @see [Custom validate function](https://docs.nestjs.com/techniques/configuration#schema-validation)\n */\nexport class AppEnvironmentVariables {\n  @IsNotEmpty()\n  @IsEnum(Environment)\n  NODE_ENV: Environment;\n\n  @IsNotEmpty()\n  @IsString()\n  HOST: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @Transform(({ value }) => toNumber(value))\n  PORT: number;\n\n  @IsNotEmpty()\n  @IsBoolean()\n  @Transform(({ value }) => toBoolean(value))\n  DEBUG: boolean;\n}\n\n/**\n * Defines the app configuration.\n * This configuration is registered under `app` namespace.\n *\n * @see [Configuration Namespace](https://docs.nestjs.com/techniques/configuration#configuration-namespaces)\n */\nexport const appConfig = registerAs('app', (): AppConfigOptions => {\n  const env: AppEnvironmentVariables = isEnvValid(\n    process.env,\n    AppEnvironmentVariables,\n  );\n\n  return {\n    environment: env.NODE_ENV as Environment,\n    host: env.HOST,\n    port: env.PORT,\n    debug: env.DEBUG,\n  };\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Defines the application controller.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDocs\n                            \n                            \n                                index\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getDocs\n                        \n                    \n                \n            \n            \n                \ngetDocs(req: Request, version?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('docs')@NotToBeCached()@NotToBeTransformed()@Redirect('https://docs.nestjs.com', 302)@ApiExcludeEndpoint()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:60\n                \n            \n\n\n            \n                \n                    Application documentation endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The incoming request\n\n                                    \n                                \n                                \n                                    version\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The documentation version\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        The documentation link with specified version if exists, otherwise redirect to the default documentation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        index\n                        \n                    \n                \n            \n            \n                \nindex()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:41\n                \n            \n\n\n            \n                \n                    Index page endpoint.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Request } from 'express';\nimport { Controller, Get, Query, Redirect, Req } from '@nestjs/common';\nimport { ApiExcludeEndpoint, ApiTags } from '@nestjs/swagger';\nimport { PinoLogger } from 'nestjs-pino';\nimport { NotToBeCached } from './common/decorators/interceptors/not-to-be-cached.decorator';\nimport { NotToBeTransformed } from './common/decorators/interceptors/not-to-be-transformed.decorator';\nimport { ApiSuccessesResponse } from './common/decorators/open-api/api-successes-response.decorator';\nimport { ApiOkSuccessResponse } from './common/decorators/open-api/successes/api-ok-success-response.decorator';\nimport { ApiErrorsResponse } from './common/decorators/open-api/api-errors-response.decorator';\n\n/**\n * Defines the application controller.\n */\n@Controller()\n@ApiTags('App')\nexport class AppController {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   */\n  constructor(private readonly logger: PinoLogger) {\n    this.logger.setContext(AppController.name);\n  }\n\n  /**\n   * Index page endpoint.\n   *\n   * @returns\n   */\n  @Get()\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        options: { description: 'Success' },\n      },\n    },\n  ])\n  @ApiErrorsResponse()\n  index() {\n    this.logger.info(`Try to call ${AppController.prototype.index.name}`);\n\n    return;\n  }\n\n  /**\n   * Application documentation endpoint.\n   *\n   * @param req The incoming request\n   * @param version The documentation version\n   *\n   * @returns The documentation link with specified version if exists, otherwise redirect to the default documentation.\n   */\n  @Get('docs')\n  @NotToBeCached()\n  @NotToBeTransformed()\n  @Redirect('https://docs.nestjs.com', 302)\n  @ApiExcludeEndpoint()\n  getDocs(\n    @Req() req: Request,\n    @Query('version') version?: string,\n  ): { url: string } {\n    this.logger.info(`Try to call ${AppController.prototype.getDocs.name}`);\n\n    const docsUrl = `${req.protocol}://${req.get('Host')}/docs`;\n\n    if (!version) {\n      return { url: `${docsUrl}/v1` };\n    }\n\n    return {\n      url: `${docsUrl}/v${version}`,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppEnvironmentVariables.html":{"url":"classes/AppEnvironmentVariables.html","title":"class - AppEnvironmentVariables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppEnvironmentVariables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/app/app.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines class to hold general app-related environment variables.\nSee Custom validate function\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                DEBUG\n                            \n                            \n                                HOST\n                            \n                            \n                                NODE_ENV\n                            \n                            \n                                PORT\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        DEBUG\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsBoolean()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app/app.config.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app/app.config.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NODE_ENV\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Environment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(Environment)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app/app.config.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/app/app.config.ts:52\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\nimport { Transform } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n} from 'class-validator';\nimport { toBoolean } from '../../common/utils/transformers/to-boolean.transformer.util';\nimport { toNumber } from '../../common/utils/transformers/to-number.transformer.util';\nimport { isEnvValid } from '../../common/utils/validators/is-env-valid.validator.util';\n\n/**\n * Defines enum for application environment.\n */\nexport enum Environment {\n  Development = 'development',\n  Staging = 'staging',\n  Production = 'production',\n  Provision = 'provision',\n  Test = 'test',\n}\n\n/**\n * Defines interface for application configuration options.\n */\nexport interface AppConfigOptions {\n  environment: Environment;\n  host: string;\n  port: number;\n  debug: boolean;\n}\n\n/**\n * Defines class to hold general app-related environment variables.\n *\n * @see [Custom validate function](https://docs.nestjs.com/techniques/configuration#schema-validation)\n */\nexport class AppEnvironmentVariables {\n  @IsNotEmpty()\n  @IsEnum(Environment)\n  NODE_ENV: Environment;\n\n  @IsNotEmpty()\n  @IsString()\n  HOST: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @Transform(({ value }) => toNumber(value))\n  PORT: number;\n\n  @IsNotEmpty()\n  @IsBoolean()\n  @Transform(({ value }) => toBoolean(value))\n  DEBUG: boolean;\n}\n\n/**\n * Defines the app configuration.\n * This configuration is registered under `app` namespace.\n *\n * @see [Configuration Namespace](https://docs.nestjs.com/techniques/configuration#configuration-namespaces)\n */\nexport const appConfig = registerAs('app', (): AppConfigOptions => {\n  const env: AppEnvironmentVariables = isEnvValid(\n    process.env,\n    AppEnvironmentVariables,\n  );\n\n  return {\n    environment: env.NODE_ENV as Environment,\n    host: env.HOST,\n    port: env.PORT,\n    debug: env.DEBUG,\n  };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nCommonServicesModule\n\nCommonServicesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommonServicesModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nServicesModule\n\nServicesModule\n\nAppModule -->\n\nServicesModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Defines the application module.\nThis app module contains module as follow:\n\nConfigModule: The module that responsible for whole application configuration\nCommonServicesModule: The module contains service module(s) which used across any other module within the application\nServicesModule: The module contains service module(s) which is the primary application business process\n\nAnd provides a global providers as follow:\n\nHttpCacheInterceptor Global http cache interceptor\nThrottlerGuard Global throttler guard\n\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CommonServicesModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            ServicesModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AppController } from './app.controller';\nimport { HttpCacheInterceptor } from './common/interceptors/http-cache.interceptor';\nimport { CommonServicesModule } from './common/services/common-services.module';\nimport { ConfigModule } from './config/config.module';\nimport { ServicesModule } from './services/services.module';\nimport { ThrottlerGuard } from '@nestjs/throttler';\n\n/**\n * Defines the application module.\n *\n * @usageNotes\n * This app module contains module as follow:\n * - {@link ConfigModule}: The module that responsible for whole application configuration\n * - {@link CommonServicesModule}: The module contains service module(s) which used across any other module within the application\n * - {@link ServicesModule}: The module contains service module(s) which is the primary application business process\n *\n * And provides a global providers as follow:\n * - {@link HttpCacheInterceptor} Global http cache interceptor\n * - {@link ThrottlerGuard} Global throttler guard\n */\n@Module({\n  imports: [ConfigModule, CommonServicesModule, ServicesModule],\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: HttpCacheInterceptor,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: ThrottlerGuard,\n    },\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth/auth.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Defines the auth controller.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(undefined: RequestWithAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@NotToBeCached()@UseJwtAuth()@ApiBearerAuth()@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/auth/auth.controller.ts:64\n                \n            \n\n\n            \n                \n                    Gets an authenticated user with a given token payload endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RequestWithAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        The success response with 'User authenticated' message and a user data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(undefined: RequestWithAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-in')@HttpCode(200)@UseLocalAuth()@ApiBody({type: SignInRequest})@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/auth/auth.controller.ts:103\n                \n            \n\n\n            \n                \n                    Signs in a user with a given username and password endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RequestWithAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        The success response with 'Signed in' message and an AuthResponse data.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Req, Post, HttpCode, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiBody, ApiTags } from '@nestjs/swagger';\nimport { PinoLogger } from 'nestjs-pino';\nimport { APP_VERSION } from '../../common/constants';\nimport { NotToBeCached } from '../../common/decorators/interceptors/not-to-be-cached.decorator';\nimport { ApiErrorsResponse } from '../../common/decorators/open-api/api-errors-response.decorator';\nimport { ApiSuccessesResponse } from '../../common/decorators/open-api/api-successes-response.decorator';\nimport { ApiUnauthorizedErrorResponse } from '../../common/decorators/open-api/errors/api-unauthorized-error-response.decorator';\nimport { ApiUnprocessableEntityErrorResponse } from '../../common/decorators/open-api/errors/api-unprocessable-entity-error-response.decorator';\nimport { ApiOkSuccessResponse } from '../../common/decorators/open-api/successes/api-ok-success-response.decorator';\nimport { SuccessResponse } from '../../common/dto/responses/success-response.dto';\nimport { InternalServerErrorException } from '../../common/exceptions/internal-server-error.exception';\nimport { UserResponse } from '../users/dto/responses/users/user-response.dto';\nimport { AuthService } from './auth.service';\nimport { UseJwtAuth } from './decorators/use-jwt-auth.decorator';\nimport { UseLocalAuth } from './decorators/use-local-auth.decorator';\nimport SignInRequest from './dto/requests/sign-in-request.dto';\nimport SignInResponse from './dto/responses/sign-in-response.dto';\nimport RequestWithAuthUser from './interface/request-with-auth-user.interface';\n\n/**\n * Defines the auth controller.\n */\n@Controller({\n  path: 'auth',\n  version: APP_VERSION,\n})\n@ApiTags('Auth')\nexport class AuthController {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param authService The auth service\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    private readonly authService: AuthService,\n  ) {\n    this.logger.setContext(AuthController.name);\n  }\n\n  /**\n   * Gets an authenticated user with a given token payload endpoint.\n   *\n   * @param user The authenticated user\n   *\n   * @returns The success response with `'User authenticated'` message and a `user` data.\n   */\n  @Get()\n  @NotToBeCached()\n  @UseJwtAuth()\n  @ApiBearerAuth()\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        model: UserResponse,\n        options: { description: 'User authenticated' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([{ response: ApiUnauthorizedErrorResponse }])\n  async authenticate(\n    @Req() { user }: RequestWithAuthUser,\n  ): Promise> {\n    this.logger.info(\n      `Try to call ${AuthController.prototype.authenticate.name}`,\n    );\n\n    return new SuccessResponse({\n      message: 'User authenticated',\n      data: user,\n    });\n  }\n\n  /**\n   * Signs in a user with a given username and password endpoint.\n   *\n   * @param user The authenticated user\n   *\n   * @returns The success response with `'Signed in'` message and an `AuthResponse` data.\n   */\n  @Post('sign-in')\n  @HttpCode(200)\n  @UseLocalAuth()\n  @ApiBody({ type: SignInRequest })\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        model: SignInResponse,\n        options: { description: 'Signed in' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    {\n      response: ApiUnprocessableEntityErrorResponse,\n      options: { description: 'Wrong credential provided' },\n    },\n  ])\n  async signIn(\n    @Req() { user }: RequestWithAuthUser,\n  ): Promise> {\n    this.logger.info(`Try to call ${AuthController.prototype.signIn.name}`);\n\n    try {\n      return new SuccessResponse({\n        message: 'Signed in',\n        data: await this.authService.signIn(user),\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Defines the auth module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from '../users/users.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\n\n/**\n * Defines the auth module.\n */\n@Module({\n  imports: [UsersModule, PassportModule, JwtModule],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  controllers: [AuthController],\n  exports: [],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth/interface/auth-response.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines authenticated response interface.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessToken\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:     string | number | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface AuthResponse {\n  accessToken: string;\n  expiresIn?: string | number | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the auth service that responsible for application authentication.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                jwtModuleOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/services/auth/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The pino logger\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The users service\n\n                                                        \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The JWT service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The config service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/services/auth/auth.service.ts:67\n                \n            \n\n\n            \n                \n                    Signs in the requested user and generates auth response.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The requested user to be signed\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The {@link AuthResponse}.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/auth/auth.service.ts:48\n                \n            \n\n\n            \n                \n                    Verify the user's authorization with the given username and password.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The username to verify\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The password to verify\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The verified user entity.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwtModuleOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JwtModuleOptions\n\n                    \n                \n                    \n                        \n                                Defined in src/services/auth/auth.service.ts:18\n                        \n                    \n\n            \n                \n                    Defines the jwt module options for authentication processes.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtModuleOptions, JwtService } from '@nestjs/jwt';\nimport { PinoLogger } from 'nestjs-pino';\nimport { User } from '../users/entities/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { AuthResponse } from './interface/auth-response.interface';\nimport * as argon2 from 'argon2';\n\n/**\n * Defines the auth service that responsible for application authentication.\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Defines the jwt module options for authentication processes.\n   */\n  private readonly jwtModuleOptions: JwtModuleOptions;\n\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param usersService The users service\n   * @param jwtService The JWT service\n   * @param configService The config service\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {\n    this.logger.setContext(AuthService.name);\n    this.jwtModuleOptions = {\n      ...this.configService.get('jwt'),\n    };\n  }\n\n  /**\n   * Verify the user's authorization with the given username and password.\n   *\n   * @param username The username to verify\n   * @param password The password to verify\n   *\n   * @returns The verified user entity.\n   */\n  async validateUser(username: string, password: string): Promise {\n    this.logger.info(`Try to call ${AuthService.prototype.validateUser.name}`);\n\n    const user = await this.usersService.findByUsername(username);\n\n    if (user && (await argon2.verify(user.password, password))) {\n      return user;\n    }\n\n    return null;\n  }\n\n  /**\n   * Signs in the requested user and generates auth response.\n   *\n   * @param user The requested user to be signed\n   *\n   * @returns The {@link AuthResponse}.\n   */\n  async signIn(user: User): Promise {\n    this.logger.info(`Try to call ${AuthService.prototype.signIn.name}`);\n\n    const payload = { username: user.username, sub: user.id };\n\n    await this.usersService.update(user.id, {\n      ...user,\n      lastSignedInAt: new Date(),\n    });\n\n    return {\n      accessToken: this.jwtService.sign(payload, {\n        secret: this.jwtModuleOptions.secret,\n        expiresIn: this.jwtModuleOptions.signOptions?.expiresIn,\n      }),\n      expiresIn: this.jwtModuleOptions.signOptions?.expiresIn,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CacheEnvironmentVariables.html":{"url":"classes/CacheEnvironmentVariables.html","title":"class - CacheEnvironmentVariables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CacheEnvironmentVariables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/cache/cache.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines class to hold general cache-related environment variables.\nSee Custom validate function\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                CACHE_MAX\n                            \n                            \n                                CACHE_TTL\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        CACHE_MAX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/cache/cache.config.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CACHE_TTL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/cache/cache.config.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CacheManagerOptions } from '@nestjs/common';\nimport { registerAs } from '@nestjs/config';\nimport { Transform } from 'class-transformer';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\nimport { toNumber } from '../../common/utils/transformers/to-number.transformer.util';\nimport { isEnvValid } from '../../common/utils/validators/is-env-valid.validator.util';\n\n/**\n * Defines class to hold general cache-related environment variables.\n *\n * @see [Custom validate function](https://docs.nestjs.com/techniques/configuration#schema-validation)\n */\nexport class CacheEnvironmentVariables {\n  @IsNotEmpty()\n  @IsNumber()\n  @Transform(({ value }) => toNumber(value))\n  CACHE_TTL: number;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @Transform(({ value }) => toNumber(value))\n  CACHE_MAX: number;\n}\n\n/**\n * Defines the cache configuration.\n * This configuration is registered under `cache` namespace.\n *\n * @see [Configuration Namespace](https://docs.nestjs.com/techniques/configuration#configuration-namespaces)\n */\nexport const cacheConfig = registerAs('cache', (): CacheManagerOptions => {\n  const env: CacheEnvironmentVariables = isEnvValid(\n    process.env,\n    CacheEnvironmentVariables,\n  );\n\n  return {\n    ttl: env.CACHE_TTL,\n    max: env.CACHE_MAX,\n  };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonServicesModule.html":{"url":"modules/CommonServicesModule.html","title":"module - CommonServicesModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonServicesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CommonServicesModule\n\n\n\ncluster_CommonServicesModule_imports\n\n\n\n\nTasksModule\n\nTasksModule\n\n\n\nCommonServicesModule\n\nCommonServicesModule\n\nCommonServicesModule -->\n\nTasksModule->CommonServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/services/common-services.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Defines the application common services module.\nThis common service module contains modules as follow:\n\nTasksModule: The module that responsible for task scheduling\n\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            TasksModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksModule } from './tasks/tasks.module';\n\n/**\n * Defines the application common services module.\n *\n * @usageNotes\n * This common service module contains modules as follow:\n * - {@link TasksModule}: The module that responsible for task scheduling\n */\n@Module({\n  imports: [TasksModule],\n})\nexport class CommonServicesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/config.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Defines the application configuration module.\nThis config module contains configuration as follow:\n\nConfigModule: The nestjs ConfigModule, load configuration based on environments\nLoggerModule: The nestjs-pino LoggerModule, load logger configuration\nTypeOrmModule: The nestjs TypeORMModule, load database configuration\nCacheModule: The nestjs CacheModule, load cache configuration\nScheduleModule: The nestjs ScheduleModule, load task scheduling configuration\nMulterModule: The nestjs MulterModule, load local file upload configuration\nJwtModule: The nestjs JwtModule, load JWT configuration\nCaslModule: The nestjs-casl CaslModule, load access control with CASL configuration\nThrottlerModule: The nestjs ThrottlerModule, load rate-limiting configuration\n\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import {\n  CacheManagerOptions,\n  CacheModule,\n  CacheStore,\n  Module,\n} from '@nestjs/common';\nimport { ConfigModule as NestConfigModule } from '@nestjs/config';\nimport { ConfigService } from '@nestjs/config';\nimport { appConfig } from './app/app.config';\nimport { loggerConfig } from './logger/logger.config';\nimport { LoggerModule, Params } from 'nestjs-pino';\nimport { databaseConfig } from './database/database.config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DataSourceOptions } from 'typeorm';\nimport { cacheConfig } from './cache/cache.config';\nimport { redisStoreConfig } from './cache/redis-store.config';\nimport { redisStore } from 'cache-manager-redis-store';\nimport { RedisClientOptions } from 'redis';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { localFileUploadConfig } from './file-upload/local-file-upload.config';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { MulterOptions } from '@nestjs/platform-express/multer/interfaces/multer-options.interface';\nimport { jwtConfig } from './auth/jwt.config';\nimport { JwtModule, JwtModuleOptions } from '@nestjs/jwt';\nimport { caslConfig } from './auth/casl.config';\nimport { CaslModule, OptionsForRoot } from 'nest-casl';\nimport { rateLimitingConfig } from './rate-limiting/rate-limiting.config';\nimport { ThrottlerModule, ThrottlerModuleOptions } from '@nestjs/throttler';\n\n/**\n * Defines the application configuration module.\n *\n * @usageNotes\n * This config module contains configuration as follow:\n * - {@link ConfigModule}: The nestjs ConfigModule, load configuration based on environments\n * - {@link LoggerModule}: The nestjs-pino LoggerModule, load logger configuration\n * - {@link TypeOrmModule}: The nestjs TypeORMModule, load database configuration\n * - {@link CacheModule}: The nestjs CacheModule, load cache configuration\n * - {@link ScheduleModule}: The nestjs ScheduleModule, load task scheduling configuration\n * - {@link MulterModule}: The nestjs MulterModule, load local file upload configuration\n * - {@link JwtModule}: The nestjs JwtModule, load JWT configuration\n * - {@link CaslModule}: The nestjs-casl CaslModule, load access control with CASL configuration\n * - {@link ThrottlerModule}: The nestjs ThrottlerModule, load rate-limiting configuration\n */\n@Module({\n  imports: [\n    NestConfigModule.forRoot({\n      cache: true,\n      isGlobal: true,\n      load: [\n        appConfig,\n        loggerConfig,\n        databaseConfig,\n        cacheConfig,\n        redisStoreConfig,\n        localFileUploadConfig,\n        jwtConfig,\n        caslConfig,\n        rateLimitingConfig,\n      ],\n    }),\n    LoggerModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        ...configService.get('logger'),\n      }),\n    }),\n    TypeOrmModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        ...configService.get('database'),\n      }),\n    }),\n    CacheModule.registerAsync({\n      isGlobal: true,\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        store: (await redisStore({\n          ...configService.get('redis-store'),\n          ...configService.get('cache'),\n        })) as unknown as CacheStore,\n        ...configService.get('cache'),\n      }),\n    }),\n    ScheduleModule.forRoot(),\n    MulterModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        ...configService.get('local-file-upload'),\n      }),\n    }),\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        ...configService.get('jwt'),\n      }),\n    }),\n    CaslModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        ...configService.get('casl'),\n      }),\n    }),\n    ThrottlerModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        ...configService.get('rate-limiting'),\n      }),\n    }),\n  ],\n})\nexport class ConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConflictErrorResponse.html":{"url":"classes/ConflictErrorResponse.html","title":"class - ConflictErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConflictErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/responses/errors/conflict-error-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data representing a conflict error response.\nThe DTO extends ErrorResponse.\nThe ConflictErrorResponse contains error attribute:\n\nstatusCode: The HttpStatus code\nerror: The application error code\n\n\n            \n\n            \n                Extends\n            \n            \n                        ErrorResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                statusCode\n                            \n                            \n                                help\n                            \n                            \n                                message\n                            \n                            \n                                path\n                            \n                            \n                                success\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ErrorCode\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The application error code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The http status code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:21\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        help\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The help message related to error', example: DEFAULT_HELP_MESSAGE})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:61\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string | ValidationErrors[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The response message', example: 'Error'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:49\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The requested url/path', example: '/api/v1/auth/sign-in'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The request status', example: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The time when the request was made', example: '2023-02-11T05:24:50.680Z'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:31\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { ErrorCode } from '../../../enums/http/error-code.enum';\nimport { ErrorResponse } from '../error-response.dto';\n\n/**\n * Defines the DTO that carries data representing a conflict error response.\n *\n * @usageNotes\n * The DTO extends {@link ErrorResponse}.\n *\n * The ConflictErrorResponse contains error attribute:\n * - `statusCode`: The {@link HttpStatus} code\n * - `error`: The application error code\n */\nexport class ConflictErrorResponse extends ErrorResponse {\n  @ApiProperty({\n    description: 'The http status code',\n    example: HttpStatus.CONFLICT,\n  })\n  statusCode: HttpStatus;\n\n  @ApiProperty({\n    description: 'The application error code',\n    example: ErrorCode.ErrorConflict,\n  })\n  error: ErrorCode;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConflictException.html":{"url":"classes/ConflictException.html","title":"class - ConflictException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConflictException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/conflict.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines an HTTP exception for Conflict type errors.\nSee Built-in HTTP exceptions\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errorResponse?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/conflict.exception.ts:11\n                            \n                        \n\n                \n                    \n                            Instantiate an ConflictException Exception.\n`throw new ConflictException()`The HTTP response status code will be 409.\n\nThe errorResponse argument defines the JSON response body.\n\nBy default, the JSON response body contains three properties:\n\nmessage: the string DEFAULT_CONFLICT_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\nerror: the enum ErrorCode.Conflict by default;\noverride this by supplying any value of ErrorCode in the errorResponse parameter.\nhelp: the string DEFAULT_HELP_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        errorResponse\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Object describing the error condition, if any\n\n                                                        \n                                                \n                                        \n                                    \n                                    Example :\n                                        \n                                            throw new ConflictException()\n\n                                        \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\nimport { DEFAULT_CONFLICT_MESSAGE, DEFAULT_HELP_MESSAGE } from '../constants';\nimport { ErrorResponse } from '../dto/responses/error-response.dto';\nimport { ErrorCode } from '../enums/http/error-code.enum';\n\n/**\n * Defines an HTTP exception for *Conflict* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n */\nexport class ConflictException extends HttpException {\n  /**\n   * Instantiate an `ConflictException` Exception.\n   *\n   * @example\n   * `throw new ConflictException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 409.\n   * - The `errorResponse` argument defines the JSON response body.\n   *\n   * By default, the JSON response body contains three properties:\n   * - `message`: the string {@link DEFAULT_CONFLICT_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   * - `error`: the enum {@link ErrorCode.Conflict} by default;\n   * override this by supplying any value of `ErrorCode` in the errorResponse parameter.\n   * - `help`: the string {@link DEFAULT_HELP_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   *\n   * @param errorResponse Object describing the error condition, if any\n   */\n  constructor(errorResponse?: Partial) {\n    const httpStatus = HttpStatus.CONFLICT;\n    const response: ErrorResponse = new ErrorResponse({\n      message: errorResponse?.message ?? DEFAULT_CONFLICT_MESSAGE,\n      error: errorResponse?.error ?? ErrorCode.ErrorConflict,\n      help: errorResponse?.help ?? DEFAULT_HELP_MESSAGE,\n    });\n\n    super(\n      HttpException.createBody(response, response.error, httpStatus),\n      httpStatus,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContentTooLargeException.html":{"url":"classes/ContentTooLargeException.html","title":"class - ContentTooLargeException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContentTooLargeException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/content-too-large.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines an HTTP exception for ContentTooLarge type errors.\nSee Built-in HTTP exceptions\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errorResponse?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/content-too-large.exception.ts:15\n                            \n                        \n\n                \n                    \n                            Instantiate an ContentTooLargeException Exception.\n`throw new ContentTooLargeException()`The HTTP response status code will be 413.\n\nThe errorResponse argument defines the JSON response body.\n\nBy default, the JSON response body contains three properties:\n\nmessage: the string DEFAULT_CONTENT_TOO_LARGE_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\nerror: the enum ErrorCode.ErrorContentTooLarge by default;\noverride this by supplying any value of ErrorCode in the errorResponse parameter.\nhelp: the string DEFAULT_HELP_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        errorResponse\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Object describing the error condition, if any\n\n                                                        \n                                                \n                                        \n                                    \n                                    Example :\n                                        \n                                            throw new ContentTooLargeException()\n\n                                        \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\nimport {\n  DEFAULT_CONTENT_TOO_LARGE_MESSAGE,\n  DEFAULT_HELP_MESSAGE,\n} from '../constants';\nimport { ErrorResponse } from '../dto/responses/error-response.dto';\nimport { ErrorCode } from '../enums/http/error-code.enum';\n\n/**\n * Defines an HTTP exception for *ContentTooLarge* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n */\nexport class ContentTooLargeException extends HttpException {\n  /**\n   * Instantiate an `ContentTooLargeException` Exception.\n   *\n   * @example\n   * `throw new ContentTooLargeException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 413.\n   * - The `errorResponse` argument defines the JSON response body.\n   *\n   * By default, the JSON response body contains three properties:\n   * - `message`: the string {@link DEFAULT_CONTENT_TOO_LARGE_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   * - `error`: the enum {@link ErrorCode.ErrorContentTooLarge} by default;\n   * override this by supplying any value of `ErrorCode` in the errorResponse parameter.\n   * - `help`: the string {@link DEFAULT_HELP_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   *\n   * @param errorResponse Object describing the error condition, if any\n   */\n  constructor(errorResponse?: Partial) {\n    const httpStatus = HttpStatus.PAYLOAD_TOO_LARGE;\n    const response: ErrorResponse = new ErrorResponse({\n      message: errorResponse?.message ?? DEFAULT_CONTENT_TOO_LARGE_MESSAGE,\n      error: errorResponse?.error ?? ErrorCode.ErrorContentTooLarge,\n      help: errorResponse?.help ?? DEFAULT_HELP_MESSAGE,\n    });\n\n    super(\n      HttpException.createBody(response, response.error, httpStatus),\n      httpStatus,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLocalFileRequest.html":{"url":"classes/CreateLocalFileRequest.html","title":"class - CreateLocalFileRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLocalFileRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storages/dto/requests/create-local-file-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data to upload a file.\nThe CreateLocalFileRequest contains file attribute:\n\ngeneralAccess: The general access of local file\nownerId: The owner id of local file\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                generalAccess\n                            \n                            \n                                uploaderId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                toEntity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        generalAccess\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileGeneralAccess\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(FileGeneralAccess)@ApiProperty({description: 'The general access of local file', enum: FileGeneralAccess, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/storages/dto/requests/create-local-file-request.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploaderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsUUID('4')@ApiProperty({description: 'The uploader (user) id of local file', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/storages/dto/requests/create-local-file-request.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        toEntity\n                        \n                    \n                \n            \n            \n                \n                    \n                    toEntity(file: Express.Multer.File, request: CreateLocalFileRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/services/storages/dto/requests/create-local-file-request.dto.ts:40\n                \n            \n\n\n            \n                \n                    Transform the DTO into the related entity.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    request\n                                    \n                                                CreateLocalFileRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request DTO to transform\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LocalFile\n\n                    \n                    \n                        The LocalFile entity\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty, IsUUID } from 'class-validator';\nimport { localFilesData } from '../../../../database/data/local-files.data';\nimport { LocalFile } from '../../entities/local-file.entity';\nimport { FileGeneralAccess } from '../../enums/file-general-access.enum';\n\n/**\n * Defines the DTO that carries data to upload a file.\n *\n * @usageNotes\n * The CreateLocalFileRequest contains file attribute:\n * - `generalAccess`: The general access of local file\n * - `ownerId`: The owner id of local file\n */\nexport class CreateLocalFileRequest {\n  @IsNotEmpty()\n  @IsEnum(FileGeneralAccess)\n  @ApiProperty({\n    description: 'The general access of local file',\n    enum: FileGeneralAccess,\n    example: localFilesData[0].generalAccess,\n  })\n  generalAccess: FileGeneralAccess;\n\n  @IsNotEmpty()\n  @IsUUID('4')\n  @ApiProperty({\n    description: 'The uploader (user) id of local file',\n    example: localFilesData[0].uploaderId,\n  })\n  uploaderId: string;\n\n  /**\n   * Transform the DTO into the related entity.\n   *\n   * @param request The request DTO to transform\n   *\n   * @returns The `LocalFile` entity\n   */\n  static toEntity(\n    file: Express.Multer.File,\n    request: CreateLocalFileRequest,\n  ): LocalFile {\n    return new LocalFile({\n      fileName: file.originalname,\n      path: file.path,\n      mimeType: file.mimetype,\n      generalAccess: request.generalAccess,\n      uploaderId: request.uploaderId,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostRequest.html":{"url":"classes/CreatePostRequest.html","title":"class - CreatePostRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/posts/dto/requests/create-post-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data to create a post.\nThe CreatePostRequest contains post attribute:\n\ncontent: The content of post\ntopicIds: The topic ids of post\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                topicIds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                toEntity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@Length(4, 250)@ApiProperty({description: 'The content of post', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/posts/dto/requests/create-post-request.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topicIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsArray()@ArrayNotEmpty()@ArrayUnique()@IsUUID('4', {each: true})@IsTopicExist({each: true})@ApiProperty({description: 'The topic ids of post', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/posts/dto/requests/create-post-request.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        toEntity\n                        \n                    \n                \n            \n            \n                \n                    \n                    toEntity(request: CreatePostRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/services/posts/dto/requests/create-post-request.dto.ts:53\n                \n            \n\n\n            \n                \n                    Transform the DTO into the related entity.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                CreatePostRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request DTO to transform\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Post\n\n                    \n                    \n                        The Post entity\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  ArrayUnique,\n  IsArray,\n  IsNotEmpty,\n  IsString,\n  IsUUID,\n  Length,\n} from 'class-validator';\nimport { postsData } from '../../../../database/data/posts.data';\nimport { topicsData } from '../../../../database/data/topics.data';\nimport { IsTopicExist } from '../../../topics/validators/is-topic-exist.validator';\nimport { Post } from '../../entities/post.entity';\n\n/**\n * Defines the DTO that carries data to create a post.\n *\n * @usageNotes\n * The CreatePostRequest contains post attribute:\n * - `content`: The content of post\n * - `topicIds`: The topic ids of post\n */\nexport class CreatePostRequest {\n  @IsNotEmpty()\n  @IsString()\n  @Length(4, 250)\n  @ApiProperty({\n    description: 'The content of post',\n    example: postsData[0].content,\n  })\n  content: string;\n\n  @IsNotEmpty()\n  @IsArray()\n  @ArrayNotEmpty()\n  @ArrayUnique()\n  @IsUUID('4', { each: true })\n  @IsTopicExist({ each: true })\n  @ApiProperty({\n    description: 'The topic ids of post',\n    example: [topicsData[0].id, topicsData[1].id],\n  })\n  topicIds: string[];\n\n  /**\n   * Transform the DTO into the related entity.\n   *\n   * @param request The request DTO to transform\n   *\n   * @returns The `Post` entity\n   */\n  static toEntity(request: CreatePostRequest): Post {\n    return new Post(request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTopicRequest.html":{"url":"classes/CreateTopicRequest.html","title":"class - CreateTopicRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTopicRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/topics/dto/requests/create-topic-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data to create a topic.\nThe CreateTopicRequest contains topic attribute:\n\nname: The name of topic\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                toEntity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsNameUnique()@ApiProperty({description: 'The name of topic', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/topics/dto/requests/create-topic-request.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        toEntity\n                        \n                    \n                \n            \n            \n                \n                    \n                    toEntity(request: CreateTopicRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/services/topics/dto/requests/create-topic-request.dto.ts:31\n                \n            \n\n\n            \n                \n                    Transform the DTO into the related entity.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                CreateTopicRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request DTO to transform\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Topic\n\n                    \n                    \n                        The Topic entity\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { topicsData } from '../../../../database/data/topics.data';\nimport { Topic } from '../../entities/topic.entity';\nimport { IsNameUnique } from '../../validators/is-name-unique.validator';\n\n/**\n * Defines the DTO that carries data to create a topic.\n *\n * @usageNotes\n * The CreateTopicRequest contains topic attribute:\n * - `name`: The name of topic\n */\nexport class CreateTopicRequest {\n  @IsNotEmpty()\n  @IsString()\n  @IsNameUnique()\n  @ApiProperty({\n    description: 'The name of topic',\n    example: topicsData[0].name,\n  })\n  name: string;\n\n  /**\n   * Transform the DTO into the related entity.\n   *\n   * @param request The request DTO to transform\n   *\n   * @returns The `Topic` entity\n   */\n  static toEntity(request: CreateTopicRequest): Topic {\n    return new Topic(request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserProfileRequest.html":{"url":"classes/CreateUserProfileRequest.html","title":"class - CreateUserProfileRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserProfileRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/dto/requests/user-profiles/create-user-profile-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data to create a user profile.\nThe CreateUserProfileRequest contains user profile attribute:\n\nfirstName: The first name of user profile\nlastName: The last name of user profile\nbio: The bio of user profile\nlocation: The location of user profile\nwebsite: The website of user profile\nbirthDate: The birthDate of user profile\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bio\n                            \n                            \n                                birthDate\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                toEntity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@MaxLength(160)@ApiPropertyOptional({description: 'The bio of user profile', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/requests/user-profiles/create-user-profile-request.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString({strict: true})@ApiProperty({description: 'The birth date of user profile', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/requests/user-profiles/create-user-profile-request.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({description: 'The first name of user profile', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/requests/user-profiles/create-user-profile-request.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({description: 'The last name of user profile', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/requests/user-profiles/create-user-profile-request.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiPropertyOptional({description: 'The location of user profile', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/requests/user-profiles/create-user-profile-request.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiPropertyOptional({description: 'The website of user profile', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/requests/user-profiles/create-user-profile-request.dto.ts:64\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        toEntity\n                        \n                    \n                \n            \n            \n                \n                    \n                    toEntity(request: CreateUserProfileRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/dto/requests/user-profiles/create-user-profile-request.dto.ts:81\n                \n            \n\n\n            \n                \n                    Transform the DTO into the related entity.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                CreateUserProfileRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request DTO to transform\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserProfile\n\n                    \n                    \n                        The UserProfile entity\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsDateString,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MaxLength,\n} from 'class-validator';\nimport { userProfilesData } from '../../../../../database/data/user-profiles.data';\nimport { UserProfile } from '../../../entities/user-profile.entity';\n\n/**\n * Defines the DTO that carries data to create a user profile.\n *\n * @usageNotes\n * The CreateUserProfileRequest contains user profile attribute:\n * - `firstName`: The first name of user profile\n * - `lastName`: The last name of user profile\n * - `bio`: The bio of user profile\n * - `location`: The location of user profile\n * - `website`: The website of user profile\n * - `birthDate`: The birthDate of user profile\n */\nexport class CreateUserProfileRequest {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    description: 'The first name of user profile',\n    example: userProfilesData[0].firstName,\n  })\n  firstName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    description: 'The last name of user profile',\n    example: userProfilesData[0].lastName,\n  })\n  lastName: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(160)\n  @ApiPropertyOptional({\n    description: 'The bio of user profile',\n    example: userProfilesData[0].bio,\n  })\n  bio?: string | null | undefined;\n\n  @IsOptional()\n  @IsString()\n  @ApiPropertyOptional({\n    description: 'The location of user profile',\n    example: userProfilesData[0].location,\n  })\n  location?: string | null | undefined;\n\n  @IsOptional()\n  @IsString()\n  @ApiPropertyOptional({\n    description: 'The website of user profile',\n    example: userProfilesData[0].website,\n  })\n  website?: string | null | undefined;\n\n  @IsNotEmpty()\n  @IsDateString({ strict: true })\n  @ApiProperty({\n    description: 'The birth date of user profile',\n    example: userProfilesData[0].birthDate,\n  })\n  birthDate: Date;\n\n  /**\n   * Transform the DTO into the related entity.\n   *\n   * @param request The request DTO to transform\n   *\n   * @returns The `UserProfile` entity\n   */\n  static toEntity(request: CreateUserProfileRequest): UserProfile {\n    return new UserProfile(request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserRequest.html":{"url":"classes/CreateUserRequest.html","title":"class - CreateUserRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/dto/requests/users/create-user-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data to create a user.\nThe CreateUserRequest contains user attribute:\n\nusername: The username of user\nemail: The email of user\nphone: The phone of user\npassword: The password of user\nroles: The roles of user\nprofile: The user profile\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                            \n                                profile\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                toEntity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsEmail()@IsEmailUnique()@ApiProperty({description: 'The email of user', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/requests/users/create-user-request.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@Length(6)@ApiProperty({description: 'The password of user', example: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/requests/users/create-user-request.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsPhoneNumber('ID')@IsPhoneNumberUnique()@ApiProperty({description: 'The phone number of user', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/requests/users/create-user-request.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserProfileRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ValidateNested()@Type(undefined)@ApiProperty({description: 'The profile of user', type: CreateUserProfileRequest})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/requests/users/create-user-request.dto.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsArray()@ArrayNotEmpty()@ArrayUnique()@IsEnum(UserRole, {each: true})@ApiProperty({description: 'The roles of user', enum: UserRole, isArray: true, examples: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/requests/users/create-user-request.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@Length(4, 12)@IsUsernameUnique()@ApiProperty({description: 'The username of user', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/requests/users/create-user-request.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        toEntity\n                        \n                    \n                \n            \n            \n                \n                    \n                    toEntity(request: CreateUserRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/dto/requests/users/create-user-request.dto.ts:104\n                \n            \n\n\n            \n                \n                    Transform the DTO into the related entity.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                CreateUserRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request DTO to transform\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        The User entity\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  ArrayNotEmpty,\n  ArrayUnique,\n  IsArray,\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsPhoneNumber,\n  IsString,\n  Length,\n  ValidateNested,\n} from 'class-validator';\nimport { usersData } from '../../../../../database/data/users.data';\nimport { User } from '../../../entities/user.entity';\nimport { UserRole } from '../../../enums/user-role.enum';\nimport { IsEmailUnique } from '../../../validators/is-email-unique-validator';\nimport { IsPhoneNumberUnique } from '../../../validators/is-phone-number-unique.validator';\nimport { IsUsernameUnique } from '../../../validators/is-username-unique.validator';\nimport { CreateUserProfileRequest } from '../user-profiles/create-user-profile-request.dto';\n\n/**\n * Defines the DTO that carries data to create a user.\n *\n * @usageNotes\n * The CreateUserRequest contains user attribute:\n * - `username`: The username of user\n * - `email`: The email of user\n * - `phone`: The phone of user\n * - `password`: The password of user\n * - `roles`: The roles of user\n * - `profile`: The user profile\n */\nexport class CreateUserRequest {\n  @IsNotEmpty()\n  @IsString()\n  @Length(4, 12)\n  @IsUsernameUnique()\n  @ApiProperty({\n    description: 'The username of user',\n    example: usersData[0].username,\n  })\n  username: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  @IsEmailUnique()\n  @ApiProperty({\n    description: 'The email of user',\n    example: usersData[0].email,\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsPhoneNumber('ID')\n  @IsPhoneNumberUnique()\n  @ApiProperty({\n    description: 'The phone number of user',\n    example: usersData[0].phone,\n  })\n  phone: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @Length(6)\n  @ApiProperty({\n    description: 'The password of user',\n    example: 'password',\n  })\n  password: string;\n\n  @IsNotEmpty()\n  @IsArray()\n  @ArrayNotEmpty()\n  @ArrayUnique()\n  @IsEnum(UserRole, { each: true })\n  @ApiProperty({\n    description: 'The roles of user',\n    enum: UserRole,\n    isArray: true,\n    examples: [UserRole.SuperAdmin],\n  })\n  roles: UserRole[];\n\n  @IsNotEmpty()\n  @ValidateNested()\n  @Type(/* istanbul ignore next */ () => CreateUserProfileRequest) // * ValidateNested() for object should use this type of transformation\n  @ApiProperty({\n    description: 'The profile of user',\n    type: CreateUserProfileRequest,\n  })\n  profile: CreateUserProfileRequest;\n\n  /**\n   * Transform the DTO into the related entity.\n   *\n   * @param request The request DTO to transform\n   *\n   * @returns The `User` entity\n   */\n  static toEntity(request: CreateUserRequest): User {\n    const { profile, ...user } = request;\n\n    return new User({\n      ...user,\n      profile: CreateUserProfileRequest.toEntity(profile),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatedSuccessResponse.html":{"url":"classes/CreatedSuccessResponse.html","title":"class - CreatedSuccessResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatedSuccessResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/responses/successes/created-success-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data representing a created success response.\nThe DTO extends SuccessResponse of the shape of TData.\nThe CreatedSuccessResponse of TData shape contains success response attribute:\n\nstatusCode: The HttpStatus code\n\n\n            \n\n            \n                Extends\n            \n            \n                        SuccessResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                statusCode\n                            \n                            \n                                    Optional\n                                data\n                            \n                            \n                                message\n                            \n                            \n                                path\n                            \n                            \n                                success\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The http status code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:21\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TData | null | undefined\n\n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:48\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The response message', example: 'Success'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:45\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The requested url/path', example: '/api/v1/auth/sign-in'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The request status', example: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:39\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The time when the request was made', example: '2023-02-11T05:24:50.680Z'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:27\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { SuccessResponse } from '../success-response.dto';\n\n/**\n * Defines the DTO that carries data representing a created success response.\n *\n * @usageNotes\n * The DTO extends {@link SuccessResponse} of the shape of TData.\n *\n * The CreatedSuccessResponse of TData shape contains success response attribute:\n * - `statusCode`: The {@link HttpStatus} code\n */\nexport class CreatedSuccessResponse extends SuccessResponse {\n  @ApiProperty({\n    description: 'The http status code',\n    example: HttpStatus.CREATED,\n  })\n  statusCode: HttpStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseEnvironmentVariables.html":{"url":"classes/DatabaseEnvironmentVariables.html","title":"class - DatabaseEnvironmentVariables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseEnvironmentVariables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/database/database.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines class to hold database-related environment variables.\nSee Custom validate function\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                DATABASE_HOST\n                            \n                            \n                                DATABASE_NAME\n                            \n                            \n                                DATABASE_PASSWORD\n                            \n                            \n                                DATABASE_PORT\n                            \n                            \n                                DATABASE_SSL\n                            \n                            \n                                DATABASE_USERNAME\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database/database.config.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database/database.config.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database/database.config.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database/database.config.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_SSL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsBoolean()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database/database.config.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATABASE_USERNAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/database/database.config.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\nimport { Transform } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsDefined,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n} from 'class-validator';\nimport { DataSourceOptions } from 'typeorm';\nimport { APP_NAME } from '../../common/constants';\nimport { toBoolean } from '../../common/utils/transformers/to-boolean.transformer.util';\nimport { toNumber } from '../../common/utils/transformers/to-number.transformer.util';\nimport { isEnvValid } from '../../common/utils/validators/is-env-valid.validator.util';\nimport { appConfig, Environment } from '../app/app.config';\nimport { SeederOptions } from 'typeorm-extension';\n\n/**\n * Defines class to hold database-related environment variables.\n *\n * @see [Custom validate function](https://docs.nestjs.com/techniques/configuration#schema-validation)\n */\nexport class DatabaseEnvironmentVariables {\n  @IsNotEmpty()\n  @IsString()\n  DATABASE_HOST: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @Transform(({ value }) => toNumber(value))\n  DATABASE_PORT: number;\n\n  @IsNotEmpty()\n  @IsString()\n  DATABASE_USERNAME: string;\n\n  @IsDefined()\n  @IsString()\n  DATABASE_PASSWORD: string;\n\n  @IsNotEmpty()\n  @IsString()\n  DATABASE_NAME: string;\n\n  @IsNotEmpty()\n  @IsBoolean()\n  @Transform(({ value }) => toBoolean(value))\n  DATABASE_SSL: boolean;\n}\n\n/**\n * Defines the database configuration using TypeORM.\n * This configuration is registered under `database` namespace.\n *\n * @see [Configuration Namespace](https://docs.nestjs.com/techniques/configuration#configuration-namespaces)\n */\nexport const databaseConfig = registerAs(\n  'database',\n  (): DataSourceOptions & SeederOptions => {\n    const env: DatabaseEnvironmentVariables = isEnvValid(\n      process.env,\n      DatabaseEnvironmentVariables,\n    );\n\n    const appConfigOptions = appConfig();\n\n    return {\n      type: 'mysql',\n      host: env.DATABASE_HOST,\n      port: env.DATABASE_PORT,\n      username: env.DATABASE_USERNAME,\n      password: env.DATABASE_PASSWORD,\n      database: env.DATABASE_NAME,\n      ...(env.DATABASE_SSL\n        ? {\n            ssl: {\n              rejectUnauthorized: false,\n            },\n          }\n        : undefined),\n      logging: appConfigOptions.debug\n        ? 'all'\n        : appConfigOptions.environment !== Environment.Production\n        ? ['migration', 'query', 'warn', 'error']\n        : ['warn', 'error'],\n      entities: [__dirname + '/../../**/*.entity{.ts,.js}'],\n      migrations: [__dirname + '/../../database/migrations/*{.ts,.js}'],\n      migrationsTableName: `${APP_NAME.replace(\n        /\\s+/g,\n        '-',\n      ).toLowerCase()}-migrations`,\n      seeds: [\n        'src/database/seeds/user.seeder.ts',\n        'src/database/seeds/local-file.seeder.ts',\n        'src/database/seeds/user-profile.seeder.ts',\n        'src/database/seeds/topic.seeder.ts',\n        'src/database/seeds/post.seeder.ts',\n        // 'src/database/seeds/**/*{.ts,.js}', // * Disabled due to specify the order of seeds\n      ],\n      factories: ['src/database/factories/**/*{.ts,.js}'],\n    };\n  },\n);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorResponse.html":{"url":"classes/ErrorResponse.html","title":"class - ErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/responses/error-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries the error response.\nThe Error Response contains user attribute:\n\nstatusCode: The HttpStatus code\ntimestamp: The time when the request was made\npath: The requested url/path\nsuccess: The request status, which is always true\nmessage: The response message, either an error message or a validation error message\nerror: The application error code\nhelp: The help message related to error\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                help\n                            \n                            \n                                message\n                            \n                            \n                                path\n                            \n                            \n                                statusCode\n                            \n                            \n                                success\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/common/dto/responses/error-response.dto.ts:61\n                            \n                        \n\n                \n                    \n                            Instantiate a ErrorResponse.\n```ts\nnew ErrorResponse({\n   message: 'Error',\n   error: ErrorCode.ErrorInternalServerError\n   help: 'Help is not available'\n})By most cases, the response only take two properties:\n- `message`: The message to be returned\n- `error`: The application error code to be returned\n- `help`: The help message related to error to be returned\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The error response to be returned\n\n                                                        \n                                                \n                                        \n                                    \n                                    Example :\n                                        \n                                            new ErrorResponse({\n   message: 'Error',\n   error: ErrorCode.ErrorInternalServerError\n   help: 'Help is not available'\n})\n\n\n                                        \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ErrorCode\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The application error code', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/responses/error-response.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        help\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The help message related to error', example: DEFAULT_HELP_MESSAGE})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/responses/error-response.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string | ValidationErrors[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The response message', example: 'Error'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/responses/error-response.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The requested url/path', example: '/api/v1/auth/sign-in'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/responses/error-response.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The http status code', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/responses/error-response.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The request status', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/responses/error-response.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The time when the request was made', example: '2023-02-11T05:24:50.680Z'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/responses/error-response.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { DEFAULT_HELP_MESSAGE } from '../../constants';\nimport { ErrorCode } from '../../enums/http/error-code.enum';\nimport { ValidationErrors } from '../../interfaces/http/validation-errors.interface';\n\n/**\n * Defines the DTO that carries the error response.\n *\n * @usageNotes\n * The Error Response contains user attribute:\n * - `statusCode`: The {@link HttpStatus} code\n * - `timestamp`: The time when the request was made\n * - `path`: The requested url/path\n * - `success`: The request status, which is always `true`\n * - `message`: The response message, either an error message or a validation error message\n * - `error`: The application error code\n * - `help`: The help message related to error\n */\nexport class ErrorResponse {\n  @ApiProperty({\n    description: 'The http status code',\n    example: HttpStatus.INTERNAL_SERVER_ERROR,\n  })\n  statusCode: HttpStatus;\n\n  @ApiProperty({\n    description: 'The time when the request was made',\n    example: '2023-02-11T05:24:50.680Z',\n  })\n  timestamp: string;\n\n  @ApiProperty({\n    description: 'The requested url/path',\n    example: '/api/v1/auth/sign-in',\n  })\n  path: string;\n\n  @ApiProperty({\n    description: 'The request status',\n    example: false,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'The response message',\n    example: 'Error',\n  })\n  message: string | ValidationErrors[];\n\n  @ApiProperty({\n    description: 'The application error code',\n    example: ErrorCode.ErrorInternalServerError,\n  })\n  error: ErrorCode;\n\n  @ApiProperty({\n    description: 'The help message related to error',\n    example: DEFAULT_HELP_MESSAGE,\n  })\n  help: string;\n\n  /**\n   * Instantiate a `ErrorResponse`.\n   *\n   * @example\n   * ```ts\n   * new ErrorResponse({\n   *    message: 'Error',\n   *    error: ErrorCode.ErrorInternalServerError\n   *    help: 'Help is not available'\n   * })\n   * ```\n   *\n   * @usageNotes\n   * By most cases, the response only take two properties:\n   * - `message`: The message to be returned\n   * - `error`: The application error code to be returned\n   * - `help`: The help message related to error to be returned\n   *\n   * @param partial The error response to be returned\n   */\n  constructor(partial?: Partial) {\n    Object.assign(this, partial);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForbiddenErrorResponse.html":{"url":"classes/ForbiddenErrorResponse.html","title":"class - ForbiddenErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForbiddenErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/responses/errors/forbidden-error-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data representing a forbidden error response.\nThe DTO extends ErrorResponse.\nThe ForbiddenErrorResponse contains error attribute:\n\nstatusCode: The HttpStatus code\nerror: The application error code\n\n\n            \n\n            \n                Extends\n            \n            \n                        ErrorResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                statusCode\n                            \n                            \n                                help\n                            \n                            \n                                message\n                            \n                            \n                                path\n                            \n                            \n                                success\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ErrorCode\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The application error code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The http status code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:21\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        help\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The help message related to error', example: DEFAULT_HELP_MESSAGE})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:61\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string | ValidationErrors[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The response message', example: 'Error'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:49\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The requested url/path', example: '/api/v1/auth/sign-in'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The request status', example: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The time when the request was made', example: '2023-02-11T05:24:50.680Z'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:31\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { ErrorCode } from '../../../enums/http/error-code.enum';\nimport { ErrorResponse } from '../error-response.dto';\n\n/**\n * Defines the DTO that carries data representing a forbidden error response.\n *\n * @usageNotes\n * The DTO extends {@link ErrorResponse}.\n *\n * The ForbiddenErrorResponse contains error attribute:\n * - `statusCode`: The {@link HttpStatus} code\n * - `error`: The application error code\n */\nexport class ForbiddenErrorResponse extends ErrorResponse {\n  @ApiProperty({\n    description: 'The http status code',\n    example: HttpStatus.FORBIDDEN,\n  })\n  statusCode: HttpStatus;\n\n  @ApiProperty({\n    description: 'The application error code',\n    example: ErrorCode.ErrorForbidden,\n  })\n  error: ErrorCode;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForbiddenException.html":{"url":"classes/ForbiddenException.html","title":"class - ForbiddenException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForbiddenException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/forbidden.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines an HTTP exception for Forbidden type errors.\nSee Built-in HTTP exceptions\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errorResponse?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/forbidden.exception.ts:12\n                            \n                        \n\n                \n                    \n                            Instantiate an ForbiddenException Exception.\n`throw new ForbiddenException()`The HTTP response status code will be 403.\n\nThe errorResponse argument defines the JSON response body.\n\nBy default, the JSON response body contains three properties:\n\nmessage: the string DEFAULT_FORBIDDEN_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\nerror: the enum ErrorCode.ErrorForbidden by default;\noverride this by supplying any value of ErrorCode in the errorResponse parameter.\nhelp: the string DEFAULT_HELP_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        errorResponse\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Object describing the error condition, if any\n\n                                                        \n                                                \n                                        \n                                    \n                                    Example :\n                                        \n                                            throw new ForbiddenException()\n\n                                        \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\nimport { DEFAULT_FORBIDDEN_MESSAGE, DEFAULT_HELP_MESSAGE } from '../constants';\nimport { ErrorResponse } from '../dto/responses/error-response.dto';\nimport { ErrorCode } from '../enums/http/error-code.enum';\n\n/**\n * Defines an HTTP exception for *Forbidden* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n */\nexport class ForbiddenException extends HttpException {\n  /**\n   * Instantiate an `ForbiddenException` Exception.\n   *\n   * @example\n   * `throw new ForbiddenException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 403.\n   * - The `errorResponse` argument defines the JSON response body.\n   *\n   * By default, the JSON response body contains three properties:\n   * - `message`: the string {@link DEFAULT_FORBIDDEN_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   * - `error`: the enum {@link ErrorCode.ErrorForbidden} by default;\n   * override this by supplying any value of `ErrorCode` in the errorResponse parameter.\n   * - `help`: the string {@link DEFAULT_HELP_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   *\n   * @param errorResponse Object describing the error condition, if any\n   */\n  constructor(errorResponse?: Partial) {\n    const httpStatus = HttpStatus.FORBIDDEN;\n    const response: ErrorResponse = new ErrorResponse({\n      message: errorResponse?.message ?? DEFAULT_FORBIDDEN_MESSAGE,\n      error: errorResponse?.error ?? ErrorCode.ErrorForbidden,\n      help: errorResponse?.help ?? DEFAULT_HELP_MESSAGE,\n    });\n\n    super(\n      HttpException.createBody(response, response.error, httpStatus),\n      httpStatus,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenericEntity.html":{"url":"classes/GenericEntity.html","title":"class - GenericEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenericEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entities/generic.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines abstract class for generic entity of T.\nThe generic entity contains attribute:\n\ncreatedAt: The creation time of entity\nupdatedAt: The last updation time of entity\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/common/entities/generic.entity.ts:16\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                    Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The partial object of T\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/generic.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/generic.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateDateColumn, UpdateDateColumn } from 'typeorm';\n\n/**\n * Defines abstract class for generic entity of T.\n *\n * @usageNotes\n * The generic entity contains attribute:\n * - `createdAt`: The creation time of entity\n * - `updatedAt`: The last updation time of entity\n */\nexport abstract class GenericEntity {\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  /**\n   * The constructor.\n   *\n   * @param partial The partial object of T\n   */\n  constructor(partial: Partial) {\n    Object.assign(this, partial);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpCacheInterceptor.html":{"url":"injectables/HttpCacheInterceptor.html","title":"injectable - HttpCacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpCacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/http-cache.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                By default, Nest uses the request URL (in an HTTP app) or cache key (in websockets and microservices apps,\nset through the @CacheKey() decorator) to associate cache records with endpoints.\nThis class is created in order to accomplish custom tracking set by override the trackBy() method.\n\n            \n\n            \n                Extends\n            \n            \n                    CacheInterceptor\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                cachedRoutes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                trackBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        trackBy\n                        \n                    \n                \n            \n            \n                \n                    \n                    trackBy(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/http-cache.interceptor.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        cachedRoutes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/common/interceptors/http-cache.interceptor.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  CacheInterceptor,\n  CACHE_KEY_METADATA,\n  ExecutionContext,\n  Injectable,\n} from '@nestjs/common';\nimport { NOT_TO_BE_CACHED_KEY } from '../constants';\n\n/**\n * By default, Nest uses the request URL (in an HTTP app) or cache key (in websockets and microservices apps,\n * set through the `@CacheKey()` decorator) to associate cache records with endpoints.\n *\n * This class is created in order to accomplish custom tracking set by override the `trackBy()` method.\n */\n@Injectable()\nexport class HttpCacheInterceptor extends CacheInterceptor {\n  protected cachedRoutes = new Map();\n\n  protected trackBy(context: ExecutionContext): string | undefined {\n    const request = context.switchToHttp().getRequest();\n\n    // * if there is no request, the incoming request is graphql, therefore bypass response caching.\n    if (!request) {\n      return undefined;\n    }\n\n    // * Get the not to be cached status meta data by the NOT_TO_BE_CACHED_KEY\n    const notToBeCachedMetaData = this.reflector.get(\n      NOT_TO_BE_CACHED_KEY,\n      context.getHandler(),\n    );\n\n    // * If the route handler not to be cached, then return undefined\n    if (notToBeCachedMetaData) {\n      return undefined;\n    }\n\n    const { httpAdapter } = this.httpAdapterHost;\n    const isHttpApp = httpAdapter && !!httpAdapter.getRequestMethod;\n\n    // * Get the cache key meta data by the CACHE_KEY_METADATA\n    const cacheMetaData = this.reflector.get(\n      CACHE_KEY_METADATA,\n      context.getHandler(),\n    );\n\n    // * If the app is not http (since websockets and microservices apps set through the @CacheKey() decorator)\n    // * or the cache meta data exists then return the cache meta data immediately\n    if (!isHttpApp || cacheMetaData) {\n      return cacheMetaData;\n    }\n\n    const isGetRequest = httpAdapter.getRequestMethod(request) === 'GET';\n\n    // * If the incoming request is other than GET, then perform delete cache\n    if (!isGetRequest) {\n      // * setTimeout is used to not throttle the incoming http request and make it wait for the in-validating process\n      // * (summary: this action would be on the next event cycle)\n      setTimeout(async () => {\n        for (const values of this.cachedRoutes.values()) {\n          for (const value of values) {\n            // * Don't need to worry about the cache manager as this class is extending the origin nestjs interceptor\n            await this.cacheManager.del(value);\n          }\n        }\n      }, 0);\n      return undefined;\n    }\n\n    // * Get base url of the incoming get request.\n    // * Example: `api/users/1`, `api/users?page=1&take=1` will be `api/users`\n    const key = httpAdapter.getRequestUrl(request).split('?')[0];\n\n    // * The resulted cachedRoutes will be something like:\n    // * (e.g: '/api/users' => ['/api/users', '/api/users/1', '/api/users?search=username'])\n    if (\n      this.cachedRoutes.has(key) &&\n      !this.cachedRoutes.get(key).includes(httpAdapter.getRequestUrl(request))\n    ) {\n      this.cachedRoutes.set(key, [\n        ...this.cachedRoutes.get(key),\n        httpAdapter.getRequestUrl(request),\n      ]);\n\n      return httpAdapter.getRequestUrl(request);\n    }\n\n    this.cachedRoutes.set(key, [httpAdapter.getRequestUrl(request)]);\n\n    return httpAdapter.getRequestUrl(request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/http-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Class describing implementation of an exception filter that catch HttpException.\nSee Exception Filters\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/http-exception.filter.ts:22\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The injected pino logger\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/http-exception.filter.ts:36\n                \n            \n\n\n            \n                \n                    {@inheritDoc ExceptionFilter.catch}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { InjectPinoLogger, Logger } from 'nestjs-pino';\nimport {\n  DEFAULT_HELP_MESSAGE,\n  DEFAULT_TOO_MANY_REQUESTS_MESSAGE,\n} from '../constants';\nimport { ErrorResponse } from '../dto/responses/error-response.dto';\nimport { ErrorCode } from '../enums/http/error-code.enum';\n\n/**\n * Class describing implementation of an exception filter that catch {@link HttpException}.\n *\n * @see [Exception Filters](https://docs.nestjs.com/exception-filters)\n */\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  /**\n   * The constructor.\n   *\n   * @param logger The injected pino logger\n   */\n  constructor(\n    @InjectPinoLogger(HttpExceptionFilter.name)\n    private readonly logger: Logger,\n  ) {}\n\n  /**\n   * {@inheritDoc ExceptionFilter.catch}\n   */\n  catch(exception: HttpException, host: ArgumentsHost): void {\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n    const httpStatus = exception.getStatus();\n\n    if (httpStatus >= 400 && httpStatus \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InitialMigration1668674726738.html":{"url":"classes/InitialMigration1668674726738.html","title":"class - InitialMigration1668674726738","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InitialMigration1668674726738\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1668674726738-InitialMigration.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'InitialMigration1668674726738'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1668674726738-InitialMigration.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1668674726738-InitialMigration.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1668674726738-InitialMigration.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class InitialMigration1668674726738 implements MigrationInterface {\n  name = 'InitialMigration1668674726738';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `CREATE TABLE \\`user\\` (\\`id\\` int NOT NULL AUTO_INCREMENT, \\`username\\` varchar(255) NOT NULL, \\`password\\` varchar(255) NOT NULL, \\`roles\\` enum ('super-admin', 'user') NOT NULL, \\`description\\` text NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`DROP TABLE \\`user\\``);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InternalServerErrorErrorResponse.html":{"url":"classes/InternalServerErrorErrorResponse.html","title":"class - InternalServerErrorErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InternalServerErrorErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/responses/errors/internal-server-error-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data representing an internal server error response.\nThe DTO extends ErrorResponse.\nThe InternalServerErrorErrorResponse contains error attribute:\n\nstatusCode: The HttpStatus code\nerror: The application error code\n\n\n            \n\n            \n                Extends\n            \n            \n                        ErrorResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                statusCode\n                            \n                            \n                                help\n                            \n                            \n                                message\n                            \n                            \n                                path\n                            \n                            \n                                success\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ErrorCode\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The application error code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The http status code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:21\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        help\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The help message related to error', example: DEFAULT_HELP_MESSAGE})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:61\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string | ValidationErrors[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The response message', example: 'Error'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:49\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The requested url/path', example: '/api/v1/auth/sign-in'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The request status', example: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The time when the request was made', example: '2023-02-11T05:24:50.680Z'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:31\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { ErrorCode } from '../../../enums/http/error-code.enum';\nimport { ErrorResponse } from '../error-response.dto';\n\n/**\n * Defines the DTO that carries data representing an internal server error response.\n *\n * @usageNotes\n * The DTO extends {@link ErrorResponse}.\n *\n * The InternalServerErrorErrorResponse contains error attribute:\n * - `statusCode`: The {@link HttpStatus} code\n * - `error`: The application error code\n */\nexport class InternalServerErrorErrorResponse extends ErrorResponse {\n  @ApiProperty({\n    description: 'The http status code',\n    example: HttpStatus.INTERNAL_SERVER_ERROR,\n  })\n  statusCode: HttpStatus;\n\n  @ApiProperty({\n    description: 'The application error code',\n    example: ErrorCode.ErrorInternalServerError,\n  })\n  error: ErrorCode;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InternalServerErrorException.html":{"url":"classes/InternalServerErrorException.html","title":"class - InternalServerErrorException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InternalServerErrorException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/internal-server-error.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines an HTTP exception for Internal Server Error type errors.\nSee Built-in HTTP exceptions\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errorResponse?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/internal-server-error.exception.ts:14\n                            \n                        \n\n                \n                    \n                            Instantiate an InternalServerErrorException Exception.\n`throw new InternalServerErrorException()`The HTTP response status code will be 500.\n\nThe errorResponse argument defines the JSON response body.\n\nBy default, the JSON response body contains three properties:\n\nmessage: the string DEFAULT_INTERNAL_SERVER_ERROR_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\nerror: the enum ErrorCode.ErrorInternalServerError by default;\noverride this by supplying any value of ErrorCode in the errorResponse parameter.\nhelp: the string DEFAULT_HELP_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        errorResponse\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Object describing the error condition, if any\n\n                                                        \n                                                \n                                        \n                                    \n                                    Example :\n                                        \n                                            throw new InternalServerErrorException()\n\n                                        \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\nimport {\n  DEFAULT_HELP_MESSAGE,\n  DEFAULT_INTERNAL_SERVER_ERROR_MESSAGE,\n} from '../constants';\nimport { ErrorResponse } from '../dto/responses/error-response.dto';\nimport { ErrorCode } from '../enums/http/error-code.enum';\n\n/**\n * Defines an HTTP exception for *Internal Server Error* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n */\nexport class InternalServerErrorException extends HttpException {\n  /**\n   * Instantiate an `InternalServerErrorException` Exception.\n   *\n   * @example\n   * `throw new InternalServerErrorException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 500.\n   * - The `errorResponse` argument defines the JSON response body.\n   *\n   * By default, the JSON response body contains three properties:\n   * - `message`: the string {@link DEFAULT_INTERNAL_SERVER_ERROR_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   * - `error`: the enum {@link ErrorCode.ErrorInternalServerError} by default;\n   * override this by supplying any value of `ErrorCode` in the errorResponse parameter.\n   * - `help`: the string {@link DEFAULT_HELP_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   *\n   * @param errorResponse Object describing the error condition, if any\n   */\n  constructor(errorResponse?: Partial) {\n    const httpStatus = HttpStatus.INTERNAL_SERVER_ERROR;\n    const response: ErrorResponse = new ErrorResponse({\n      message: errorResponse?.message ?? DEFAULT_INTERNAL_SERVER_ERROR_MESSAGE,\n      error: errorResponse?.error ?? ErrorCode.ErrorInternalServerError,\n      help: errorResponse?.help ?? DEFAULT_HELP_MESSAGE,\n    });\n\n    super(\n      HttpException.createBody(response, response.error, httpStatus),\n      httpStatus,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsEmailUniqueValidator.html":{"url":"injectables/IsEmailUniqueValidator.html","title":"injectable - IsEmailUniqueValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsEmailUniqueValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/validators/is-email-unique-validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines IsEmailUnique validator constraint.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/services/users/validators/is-email-unique-validator.ts:17\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The users service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments?: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/validators/is-email-unique-validator.ts:61\n                \n            \n\n\n            \n                \n                    {@inheritDoc ValidatorConstraintInterface.defaultMessage}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(value: string, validationArguments?: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/validators/is-email-unique-validator.ts:33\n                \n            \n\n\n            \n                \n                    Validates the email uniqueness.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The email to validate\n\n                                    \n                                \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The additional validation arguments\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the given email is unique or not.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { User } from '../entities/user.entity';\nimport { UsersService } from '../users.service';\n\n/**\n * Defines IsEmailUnique validator constraint.\n */\n@ValidatorConstraint({ async: true })\n@Injectable()\nexport class IsEmailUniqueValidator implements ValidatorConstraintInterface {\n  /**\n   * The constructor.\n   *\n   * @param usersService The users service\n   */\n  constructor(private usersService: UsersService) {}\n\n  /**\n   * Validates the email uniqueness.\n   *\n   * @param value The email to validate\n   * @param validationArguments The additional validation arguments\n   *\n   * @returns The flag indicates whether the given email is unique or not.\n   */\n  async validate(\n    value: string,\n    validationArguments?: ValidationArguments,\n  ): Promise {\n    const { constraints, object } = validationArguments || {};\n    const [identifierKey] = constraints || [];\n\n    return await this.usersService.findByEmail(value).then((user) => {\n      if (!user) {\n        return true;\n      }\n\n      if (\n        identifierKey &&\n        object &&\n        object[identifierKey as keyof object] ===\n          user[identifierKey as keyof User]\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  /**\n   * {@inheritDoc ValidatorConstraintInterface.defaultMessage}\n   */\n  defaultMessage(validationArguments?: ValidationArguments): string {\n    return `user with ${validationArguments?.property} ${validationArguments?.value} already exists`;\n  }\n}\n\n/**\n * IsEmailUnique decorator.\n *\n * To validate uniqueness against existing value, use the identifierKey to compare the incoming identifier is equal to the existing identifier,\n * if it equals then it would be bypassed.\n *\n * @example\n * `@IsEmailUnique()`\n * `@IsEmailUnique('id')`\n *\n * @param identifierKey The identifier field, used when the given resources are going to be updated\n * @param validationOptions The additional validation options\n *\n * @returns IsEmailUnique decorator\n */\nexport function IsEmailUnique(\n  identifierKey?: keyof User,\n  validationOptions?: ValidationOptions,\n) {\n  return (object: any, propertyName: string) => {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [identifierKey],\n      validator: IsEmailUniqueValidator,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsLocalFileExistValidator.html":{"url":"injectables/IsLocalFileExistValidator.html","title":"injectable - IsLocalFileExistValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsLocalFileExistValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storages/validators/is-local-file-exist.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the IsLocalFileExist validator constraint.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storagesService: StoragesService)\n                    \n                \n                        \n                            \n                                Defined in src/services/storages/validators/is-local-file-exist.validator.ts:17\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        storagesService\n                                                  \n                                                        \n                                                                        StoragesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The storages service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments?: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/services/storages/validators/is-local-file-exist.validator.ts:48\n                \n            \n\n\n            \n                \n                    {@inheritDoc ValidatorConstraintInterface.defaultMessage}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/storages/validators/is-local-file-exist.validator.ts:32\n                \n            \n\n\n            \n                \n                    Validates the local file existence by its identifier.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The identifier to validate\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the given local file by its related identifier already exists or not.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  isUUID,\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { StoragesService } from '../storages.service';\n\n/**\n * Defines the IsLocalFileExist validator constraint.\n */\n@ValidatorConstraint({ async: true })\n@Injectable()\nexport class IsLocalFileExistValidator implements ValidatorConstraintInterface {\n  /**\n   * The constructor.\n   *\n   * @param storagesService The storages service\n   */\n  constructor(private storagesService: StoragesService) {}\n\n  /**\n   * Validates the local file existence by its identifier.\n   *\n   * @param value The identifier to validate\n   *\n   * @returns The flag indicates whether the given local file by its related identifier already exists or not.\n   */\n  async validate(value: string): Promise {\n    if (isUUID(value, '4')) {\n      return await this.storagesService\n        .findLocalFileById(value)\n        .then((file) => {\n          if (file) return true;\n          return false;\n        });\n    }\n\n    return false;\n  }\n\n  /**\n   * {@inheritDoc ValidatorConstraintInterface.defaultMessage}\n   */\n  defaultMessage(validationArguments?: ValidationArguments): string {\n    return `file with ${validationArguments?.property} ${validationArguments?.value} doesn't exist`;\n  }\n}\n\n/**\n * IsLocalFileExist decorator.\n *\n * @example\n * `@IsLocalFileExist()`\n *\n * @param validationOptions The additional validation options\n *\n * @returns custom IsLocalFileExist validation decorator\n */\nexport function IsLocalFileExist(validationOptions?: ValidationOptions) {\n  return (object: any, propertyName: string) => {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: IsLocalFileExistValidator,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsNameUniqueValidator.html":{"url":"injectables/IsNameUniqueValidator.html","title":"injectable - IsNameUniqueValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsNameUniqueValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/topics/validators/is-name-unique.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines IsNameUnique validator constraint.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(topicsService: TopicsService)\n                    \n                \n                        \n                            \n                                Defined in src/services/topics/validators/is-name-unique.validator.ts:17\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        topicsService\n                                                  \n                                                        \n                                                                        TopicsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The topics service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments?: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/services/topics/validators/is-name-unique.validator.ts:61\n                \n            \n\n\n            \n                \n                    {@inheritDoc ValidatorConstraintInterface.defaultMessage}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(value: string, validationArguments?: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/services/topics/validators/is-name-unique.validator.ts:33\n                \n            \n\n\n            \n                \n                    Validates the name uniqueness.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name to validate\n\n                                    \n                                \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The additional validation arguments\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the given name is unique or not.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { Topic } from '../entities/topic.entity';\nimport { TopicsService } from '../topics.service';\n\n/**\n * Defines IsNameUnique validator constraint.\n */\n@ValidatorConstraint({ async: true })\n@Injectable()\nexport class IsNameUniqueValidator implements ValidatorConstraintInterface {\n  /**\n   * The constructor.\n   *\n   * @param topicsService The topics service\n   */\n  constructor(private topicsService: TopicsService) {}\n\n  /**\n   * Validates the name uniqueness.\n   *\n   * @param value The name to validate\n   * @param validationArguments The additional validation arguments\n   *\n   * @returns The flag indicates whether the given name is unique or not.\n   */\n  async validate(\n    value: string,\n    validationArguments?: ValidationArguments,\n  ): Promise {\n    const { constraints, object } = validationArguments || {};\n    const [identifierKey] = constraints || [];\n\n    return await this.topicsService.findByName(value).then((topic) => {\n      if (!topic) {\n        return true;\n      }\n\n      if (\n        identifierKey &&\n        object &&\n        object[identifierKey as keyof object] ===\n          topic[identifierKey as keyof Topic]\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  /**\n   * {@inheritDoc ValidatorConstraintInterface.defaultMessage}\n   */\n  defaultMessage(validationArguments?: ValidationArguments): string {\n    return `topic with ${validationArguments?.property} ${validationArguments?.value} already exists`;\n  }\n}\n\n/**\n * IsNameUnique decorator.\n *\n * To validate uniqueness against existing value, use the identifierKey to compare the incoming identifier is equal to the existing identifier,\n * if it equals then it would be bypassed.\n *\n * @example\n * `@IsNameUnique()`\n * `@IsNameUnique('id')`\n *\n * @param identifierKey The identifier field, used when the given resources are going to be updated\n * @param validationOptions The additional validation options\n *\n * @returns IsNameUnique decorator\n */\nexport function IsNameUnique(\n  identifierKey?: keyof Topic,\n  validationOptions?: ValidationOptions,\n) {\n  return (object: any, propertyName: string) => {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [identifierKey],\n      validator: IsNameUniqueValidator,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsPhoneNumberUniqueValidator.html":{"url":"injectables/IsPhoneNumberUniqueValidator.html","title":"injectable - IsPhoneNumberUniqueValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsPhoneNumberUniqueValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/validators/is-phone-number-unique.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines IsPhoneNumberUnique validator constraint.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/services/users/validators/is-phone-number-unique.validator.ts:19\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The users service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments?: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/validators/is-phone-number-unique.validator.ts:63\n                \n            \n\n\n            \n                \n                    {@inheritDoc ValidatorConstraintInterface.defaultMessage}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(value: string, validationArguments?: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/validators/is-phone-number-unique.validator.ts:35\n                \n            \n\n\n            \n                \n                    Validates the phone uniqueness.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The phone to validate\n\n                                    \n                                \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The additional validation arguments\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the given phone is unique or not.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { User } from '../entities/user.entity';\nimport { UsersService } from '../users.service';\n\n/**\n * Defines IsPhoneNumberUnique validator constraint.\n */\n@ValidatorConstraint({ async: true })\n@Injectable()\nexport class IsPhoneNumberUniqueValidator\n  implements ValidatorConstraintInterface\n{\n  /**\n   * The constructor.\n   *\n   * @param usersService The users service\n   */\n  constructor(private usersService: UsersService) {}\n\n  /**\n   * Validates the phone uniqueness.\n   *\n   * @param value The phone to validate\n   * @param validationArguments The additional validation arguments\n   *\n   * @returns The flag indicates whether the given phone is unique or not.\n   */\n  async validate(\n    value: string,\n    validationArguments?: ValidationArguments,\n  ): Promise {\n    const { constraints, object } = validationArguments || {};\n    const [identifierKey] = constraints || [];\n\n    return await this.usersService.findByPhone(value).then((user) => {\n      if (!user) {\n        return true;\n      }\n\n      if (\n        identifierKey &&\n        object &&\n        object[identifierKey as keyof object] ===\n          user[identifierKey as keyof User]\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  /**\n   * {@inheritDoc ValidatorConstraintInterface.defaultMessage}\n   */\n  defaultMessage(validationArguments?: ValidationArguments): string {\n    return `user with ${validationArguments?.property} ${validationArguments?.value} already exists`;\n  }\n}\n\n/**\n * IsPhoneNumberUnique decorator.\n *\n * To validate uniqueness against existing value, use the identifierKey to compare the incoming identifier is equal to the existing identifier,\n * if it equals then it would be bypassed.\n *\n * @example\n * `@IsPhoneNumberUnique()`\n * `@IsPhoneNumberUnique('id')`\n *\n * @param identifierKey The identifier field, used when the given resources are going to be updated\n * @param validationOptions The additional validation options\n *\n * @returns IsPhoneNumberUnique decorator\n */\nexport function IsPhoneNumberUnique(\n  identifierKey?: keyof User,\n  validationOptions?: ValidationOptions,\n) {\n  return (object: any, propertyName: string) => {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [identifierKey],\n      validator: IsPhoneNumberUniqueValidator,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsPostExistValidator.html":{"url":"injectables/IsPostExistValidator.html","title":"injectable - IsPostExistValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsPostExistValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/posts/validators/is-post-exist.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the IsPostExist validator constraint.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsService: PostsService)\n                    \n                \n                        \n                            \n                                Defined in src/services/posts/validators/is-post-exist.validator.ts:17\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The posts service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments?: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/services/posts/validators/is-post-exist.validator.ts:46\n                \n            \n\n\n            \n                \n                    {@inheritDoc ValidatorConstraintInterface.defaultMessage}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/posts/validators/is-post-exist.validator.ts:32\n                \n            \n\n\n            \n                \n                    Validates the post existence by its identifier.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The identifier to validate\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the given post by its related identifier already exists or not.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  isUUID,\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { PostsService } from '../posts.service';\n\n/**\n * Defines the IsPostExist validator constraint.\n */\n@ValidatorConstraint({ async: true })\n@Injectable()\nexport class IsPostExistValidator implements ValidatorConstraintInterface {\n  /**\n   * The constructor.\n   *\n   * @param postsService The posts service\n   */\n  constructor(private postsService: PostsService) {}\n\n  /**\n   * Validates the post existence by its identifier.\n   *\n   * @param value The identifier to validate\n   *\n   * @returns The flag indicates whether the given post by its related identifier already exists or not.\n   */\n  async validate(value: string): Promise {\n    if (isUUID(value, '4')) {\n      return await this.postsService.findById(value).then((post) => {\n        if (post) return true;\n        return false;\n      });\n    }\n\n    return false;\n  }\n\n  /**\n   * {@inheritDoc ValidatorConstraintInterface.defaultMessage}\n   */\n  defaultMessage(validationArguments?: ValidationArguments): string {\n    return `post with ${validationArguments?.property} ${validationArguments?.value} doesn't exist`;\n  }\n}\n\n/**\n * IsPostExist decorator.\n *\n * @example\n * `@IsPostExist()`\n *\n * @param validationOptions The additional validation options\n *\n * @returns custom IsPostExist validation decorator\n */\nexport function IsPostExist(validationOptions?: ValidationOptions) {\n  return (object: any, propertyName: string) => {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: IsPostExistValidator,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsTopicExistValidator.html":{"url":"injectables/IsTopicExistValidator.html","title":"injectable - IsTopicExistValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsTopicExistValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/topics/validators/is-topic-exist.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the IsTopicExist validator constraint.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(topicsService: TopicsService)\n                    \n                \n                        \n                            \n                                Defined in src/services/topics/validators/is-topic-exist.validator.ts:17\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        topicsService\n                                                  \n                                                        \n                                                                        TopicsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The topics service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments?: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/services/topics/validators/is-topic-exist.validator.ts:46\n                \n            \n\n\n            \n                \n                    {@inheritDoc ValidatorConstraintInterface.defaultMessage}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/topics/validators/is-topic-exist.validator.ts:32\n                \n            \n\n\n            \n                \n                    Validates the topic existence by its identifier.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The identifier to validate\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the given topic by its related identifier already exists or not.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  isUUID,\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { TopicsService } from '../topics.service';\n\n/**\n * Defines the IsTopicExist validator constraint.\n */\n@ValidatorConstraint({ async: true })\n@Injectable()\nexport class IsTopicExistValidator implements ValidatorConstraintInterface {\n  /**\n   * The constructor.\n   *\n   * @param topicsService The topics service\n   */\n  constructor(private topicsService: TopicsService) {}\n\n  /**\n   * Validates the topic existence by its identifier.\n   *\n   * @param value The identifier to validate\n   *\n   * @returns The flag indicates whether the given topic by its related identifier already exists or not.\n   */\n  async validate(value: string): Promise {\n    if (isUUID(value, '4')) {\n      return await this.topicsService.findById(value).then((topic) => {\n        if (topic) return true;\n        return false;\n      });\n    }\n\n    return false;\n  }\n\n  /**\n   * {@inheritDoc ValidatorConstraintInterface.defaultMessage}\n   */\n  defaultMessage(validationArguments?: ValidationArguments): string {\n    return `topic with ${validationArguments?.property} ${validationArguments?.value} doesn't exist`;\n  }\n}\n\n/**\n * IsTopicExist decorator.\n *\n * @example\n * `@IsTopicExist()`\n *\n * @param validationOptions The additional validation options\n *\n * @returns custom IsTopicExist validation decorator\n */\nexport function IsTopicExist(validationOptions?: ValidationOptions) {\n  return (object: any, propertyName: string) => {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: IsTopicExistValidator,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsUserExistValidator.html":{"url":"injectables/IsUserExistValidator.html","title":"injectable - IsUserExistValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsUserExistValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/validators/is-user-exist.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the IsUserExist validator constraint.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/services/users/validators/is-user-exist.validator.ts:17\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The users service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments?: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/validators/is-user-exist.validator.ts:46\n                \n            \n\n\n            \n                \n                    {@inheritDoc ValidatorConstraintInterface.defaultMessage}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/validators/is-user-exist.validator.ts:32\n                \n            \n\n\n            \n                \n                    Validates the user existence by its identifier.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The identifier to validate\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the given user by its related identifier already exists or not.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  isUUID,\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { UsersService } from '../users.service';\n\n/**\n * Defines the IsUserExist validator constraint.\n */\n@ValidatorConstraint({ async: true })\n@Injectable()\nexport class IsUserExistValidator implements ValidatorConstraintInterface {\n  /**\n   * The constructor.\n   *\n   * @param usersService The users service\n   */\n  constructor(private usersService: UsersService) {}\n\n  /**\n   * Validates the user existence by its identifier.\n   *\n   * @param value The identifier to validate\n   *\n   * @returns The flag indicates whether the given user by its related identifier already exists or not.\n   */\n  async validate(value: string): Promise {\n    if (isUUID(value, '4')) {\n      return await this.usersService.findById(value).then((user) => {\n        if (user) return true;\n        return false;\n      });\n    }\n\n    return false;\n  }\n\n  /**\n   * {@inheritDoc ValidatorConstraintInterface.defaultMessage}\n   */\n  defaultMessage(validationArguments?: ValidationArguments): string {\n    return `user with ${validationArguments?.property} ${validationArguments?.value} doesn't exist`;\n  }\n}\n\n/**\n * IsUserExist decorator.\n *\n * @example\n * `@IsUserExist()`\n *\n * @param validationOptions The additional validation options\n *\n * @returns custom IsUserExist validation decorator\n */\nexport function IsUserExist(validationOptions?: ValidationOptions) {\n  return (object: any, propertyName: string) => {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: IsUserExistValidator,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsUsernameUniqueValidator.html":{"url":"injectables/IsUsernameUniqueValidator.html","title":"injectable - IsUsernameUniqueValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsUsernameUniqueValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/validators/is-username-unique.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines IsUsernameUnique validator constraint.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/services/users/validators/is-username-unique.validator.ts:17\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The users service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments?: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/validators/is-username-unique.validator.ts:61\n                \n            \n\n\n            \n                \n                    {@inheritDoc ValidatorConstraintInterface.defaultMessage}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(value: string, validationArguments?: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/validators/is-username-unique.validator.ts:33\n                \n            \n\n\n            \n                \n                    Validates the username uniqueness.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The username to validate\n\n                                    \n                                \n                                \n                                    validationArguments\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The additional validation arguments\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the given username is unique or not.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { User } from '../entities/user.entity';\nimport { UsersService } from '../users.service';\n\n/**\n * Defines IsUsernameUnique validator constraint.\n */\n@ValidatorConstraint({ async: true })\n@Injectable()\nexport class IsUsernameUniqueValidator implements ValidatorConstraintInterface {\n  /**\n   * The constructor.\n   *\n   * @param usersService The users service\n   */\n  constructor(private usersService: UsersService) {}\n\n  /**\n   * Validates the username uniqueness.\n   *\n   * @param value The username to validate\n   * @param validationArguments The additional validation arguments\n   *\n   * @returns The flag indicates whether the given username is unique or not.\n   */\n  async validate(\n    value: string,\n    validationArguments?: ValidationArguments,\n  ): Promise {\n    const { constraints, object } = validationArguments || {};\n    const [identifierKey] = constraints || [];\n\n    return await this.usersService.findByUsername(value).then((user) => {\n      if (!user) {\n        return true;\n      }\n\n      if (\n        identifierKey &&\n        object &&\n        object[identifierKey as keyof object] ===\n          user[identifierKey as keyof User]\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  /**\n   * {@inheritDoc ValidatorConstraintInterface.defaultMessage}\n   */\n  defaultMessage(validationArguments?: ValidationArguments): string {\n    return `user with ${validationArguments?.property} ${validationArguments?.value} already exists`;\n  }\n}\n\n/**\n * IsUsernameUnique decorator.\n *\n * To validate uniqueness against existing value, use the identifierKey to compare the incoming identifier is equal to the existing identifier,\n * if it equals then it would be bypassed.\n *\n * @example\n * `@IsUsernameUnique()`\n * `@IsUsernameUnique('id')`\n *\n * @param identifierKey The identifier field, used when the given resources are going to be updated\n * @param validationOptions The additional validation options\n *\n * @returns IsUsernameUnique decorator\n */\nexport function IsUsernameUnique(\n  identifierKey?: keyof User,\n  validationOptions?: ValidationOptions,\n) {\n  return (object: any, propertyName: string) => {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [identifierKey],\n      validator: IsUsernameUniqueValidator,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth/guards/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines auth guard that matches the strategy named jwt.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/services/auth/guards/jwt-auth.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The reflector to access the route's custom metadata\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: ExecutionContext, status?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/services/auth/guards/jwt-auth.guard.ts:23\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        TUser\n                    \n                \n            \n\n            \n                \n                    {@inheritDoc NestInterceptor.intercept}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TUser\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UnauthorizedException } from '../../../common/exceptions/unauthorized.exception';\n\n/**\n * Defines auth guard that matches the strategy named `jwt`.\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  /**\n   *\n   * @param reflector The reflector to access the route's custom metadata\n   */\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  /**\n   * {@inheritDoc NestInterceptor.intercept}\n   */\n  handleRequest(\n    err: any,\n    user: any,\n    info: any,\n    context: ExecutionContext,\n    status?: any,\n  ): TUser {\n    if (err || !user) {\n      throw err || new UnauthorizedException({ message: 'Unauthorized' });\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtEnvironmentVariables.html":{"url":"classes/JwtEnvironmentVariables.html","title":"class - JwtEnvironmentVariables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtEnvironmentVariables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/auth/jwt.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines class to hold general JWT-related environment variables.\nSee Custom validate function\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                JWT_EXPIRES_IN\n                            \n                            \n                                JWT_SECRET\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_EXPIRES_IN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/auth/jwt.config.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/auth/jwt.config.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\nimport { JwtModuleOptions } from '@nestjs/jwt';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { isEnvValid } from '../../common/utils/validators/is-env-valid.validator.util';\n\n/**\n * Defines class to hold general JWT-related environment variables.\n *\n * @see [Custom validate function](https://docs.nestjs.com/techniques/configuration#schema-validation)\n */\nexport class JwtEnvironmentVariables {\n  @IsNotEmpty()\n  @IsString()\n  JWT_SECRET: string;\n\n  @IsNotEmpty()\n  @IsString()\n  JWT_EXPIRES_IN: string;\n}\n\n/**\n * Defines the JWT configuration.\n * This configuration is registered under `jwt` namespace.\n *\n * @see [Configuration Namespace](https://docs.nestjs.com/techniques/configuration#configuration-namespaces)\n */\nexport const jwtConfig = registerAs('jwt', (): JwtModuleOptions => {\n  const env: JwtEnvironmentVariables = isEnvValid(\n    process.env,\n    JwtEnvironmentVariables,\n  );\n\n  return {\n    secret: env.JWT_SECRET,\n    signOptions: {\n      expiresIn: env.JWT_EXPIRES_IN,\n    },\n  };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth/strategies/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the strategy for jwt strategy by extending PassportStrategy with Strategy from passport-jwt.\nThis strategy being used by the guards under AuthGuard('jwt').\nSee Implementing Passport Strategy\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/services/auth/strategies/jwt.strategy.ts:22\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The pino logger\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The config service\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The users service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/services/auth/strategies/jwt.strategy.ts:57\n                \n            \n\n\n            \n                \n                    To validate the JwtAuthGuard.\nFor each strategy, Passport will call the verify function (implemented with the validate() method in nestjs/passport) using an appropriate strategy-specific set of parameters.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The payload to validate\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The authenticated user entity.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtModuleOptions } from '@nestjs/jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { PinoLogger } from 'nestjs-pino';\nimport { ExtractJwt } from 'passport-jwt';\nimport { Strategy } from 'passport-jwt';\nimport { UnauthorizedException } from '../../../common/exceptions/unauthorized.exception';\nimport { User } from '../../users/entities/user.entity';\nimport { UsersService } from '../../users/users.service';\nimport { TokenPayload } from '../interface/token-payload.interface';\n\n/**\n * Defines the strategy for jwt strategy by extending PassportStrategy with Strategy from `passport-jwt`.\n *\n * @usageNotes\n * This strategy being used by the guards under `AuthGuard('jwt')`.\n *\n * @see [Implementing Passport Strategy](https://docs.nestjs.com/security/authentication#implementing-passport-strategies)\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param configService The config service\n   * @param usersService The users service\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: configService.get('jwt')?.signOptions\n        ?.expiresIn\n        ? true\n        : false,\n      secretOrKey: configService.get('jwt')?.secret,\n    });\n\n    this.logger.setContext(JwtStrategy.name);\n  }\n\n  /**\n   * To validate the {@link JwtAuthGuard}.\n   *\n   * @usageNotes\n   * For each strategy, Passport will call the verify function (implemented with the validate() method in nestjs/passport) using an appropriate strategy-specific set of parameters.\n   *\n   * @param payload The payload to validate\n   *\n   * @returns The authenticated user entity.\n   */\n  async validate(payload: TokenPayload): Promise {\n    this.logger.info(`Try to call ${JwtStrategy.prototype.validate.name}`);\n\n    const authenticatedUser: User | null = await this.usersService.findById(\n      payload.sub,\n    );\n\n    if (!authenticatedUser) {\n      throw new UnauthorizedException({ message: 'Unauthorized' });\n    }\n\n    return authenticatedUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth/guards/local-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines auth guard that matches the strategy named local.\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * Defines auth guard that matches the strategy named `local`.\n */\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/LocalFile.html":{"url":"entities/LocalFile.html","title":"entity - LocalFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  LocalFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storages/entities/local-file.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the local file entity.\nThe local file entity contains attribute:\n\nid: The id of local file\nfileName: The original file name of local file\npath: The path location of local file\nmimeType: The mime type of local file\ngeneralAccess: The general access of local file\ncreatedAt: The creation time of local file\nupdatedAt: The last updation time of local file\nuploaderId: The id of uploader (user) of local file\nuploader: The local file uploader (user)\n\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fileName\n                            \n                            \n                                generalAccess\n                            \n                            \n                                id\n                            \n                            \n                                mimeType\n                            \n                            \n                                path\n                            \n                            \n                                uploader\n                            \n                            \n                                uploaderId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/storages/entities/local-file.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generalAccess\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileGeneralAccess\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('enum', {enum: FileGeneralAccess})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/storages/entities/local-file.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/storages/entities/local-file.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mimeType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/storages/entities/local-file.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/storages/entities/local-file.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploader\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/storages/entities/local-file.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploaderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/storages/entities/local-file.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  JoinColumn,\n  ManyToOne,\n} from 'typeorm';\nimport { FileGeneralAccess } from '../enums/file-general-access.enum';\nimport { User } from '../../users/entities/user.entity';\nimport { GenericEntity } from '../../../common/entities/generic.entity';\n\n/**\n * Defines the local file entity.\n *\n * @usageNotes\n * The local file entity contains attribute:\n * - `id`: The id of local file\n * - `fileName`: The original file name of local file\n * - `path`: The path location of local file\n * - `mimeType`: The mime type of local file\n * - `generalAccess`: The general access of local file\n * - `createdAt`: The creation time of local file\n * - `updatedAt`: The last updation time of local file\n * - `uploaderId`: The id of uploader (user) of local file\n * - `uploader`: The local file uploader (user)\n */\n@Entity()\nexport class LocalFile extends GenericEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  fileName: string;\n\n  @Column()\n  path: string;\n\n  @Column()\n  mimeType: string;\n\n  @Column('enum', { enum: FileGeneralAccess })\n  generalAccess: FileGeneralAccess;\n\n  @Column('uuid')\n  uploaderId: string;\n\n  @ManyToOne(/* istanbul ignore next */ () => User, { onDelete: 'CASCADE' })\n  @JoinColumn()\n  uploader: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalFileByIdPipe.html":{"url":"injectables/LocalFileByIdPipe.html","title":"injectable - LocalFileByIdPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalFileByIdPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storages/pipes/local-file-by-id.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Class defining the implementation of a pipe that parse string UUID value\nand return the promise of local file entity of related identifier value.\nThe transform method will throw UnprocessableEntityException, if fail to validate the string UUID value.\nAlso the transform method will throw NotFoundException, if fail to parse the local file entity from the parsed string UUID local file identifier value.\nSee Pipes\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, storagesService: StoragesService)\n                    \n                \n                        \n                            \n                                Defined in src/services/storages/pipes/local-file-by-id.pipe.ts:23\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The pino logger\n\n                                                        \n                                                \n                                                \n                                                        storagesService\n                                                  \n                                                        \n                                                                        StoragesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The storages service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/services/storages/pipes/local-file-by-id.pipe.ts:38\n                \n            \n\n\n            \n                \n                    {@inheritDoc PipeTransform.transform}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, PipeTransform, ArgumentMetadata } from '@nestjs/common';\nimport { isUUID } from 'class-validator';\nimport { PinoLogger } from 'nestjs-pino';\nimport { NotFoundException } from '../../../common/exceptions/not-found.exception';\nimport { UnprocessableEntityException } from '../../../common/exceptions/unprocessable-entity.exception';\nimport { LocalFile } from '../entities/local-file.entity';\nimport { StoragesService } from '../storages.service';\n\n/**\n * Class defining the implementation of a pipe that parse string UUID value\n * and return the promise of local file entity of related identifier value.\n *\n * @usageNotes\n * The transform method will throw {@link UnprocessableEntityException}, if fail to validate the string UUID value.\n *\n * Also the transform method will throw {@link NotFoundException}, if fail to parse the local file entity from the parsed string UUID local file identifier value.\n *\n * @see [Pipes](https://docs.nestjs.com/pipes)\n */\n@Injectable()\nexport class LocalFileByIdPipe\n  implements PipeTransform>\n{\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param storagesService The storages service\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    private readonly storagesService: StoragesService,\n  ) {}\n\n  /**\n   * {@inheritDoc PipeTransform.transform}\n   */\n  async transform(\n    value: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    metadata: ArgumentMetadata,\n  ): Promise {\n    this.logger.info(\n      `Try to call ${LocalFileByIdPipe.prototype.transform.name}`,\n    );\n\n    if (!isUUID(value, '4')) {\n      throw new UnprocessableEntityException({\n        message: 'The given value is not a valid UUID',\n      });\n    }\n\n    const file = await this.storagesService.findLocalFileById(value);\n\n    if (file === null) {\n      throw new NotFoundException({ message: 'File not found' });\n    }\n\n    return file;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalFileIdParam.html":{"url":"classes/LocalFileIdParam.html","title":"class - LocalFileIdParam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalFileIdParam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storages/dto/params/local-file-id.param.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries the local file identifier request parameter.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsLocalFileExist()@ApiProperty({description: 'The id of local file', format: 'uuid', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/storages/dto/params/local-file-id.param.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { localFilesData } from '../../../../database/data/local-files.data';\nimport { IsLocalFileExist } from '../../validators/is-local-file-exist.validator';\n\n/**\n * Defines the DTO that carries the local file identifier request parameter.\n */\nexport class LocalFileIdParam {\n  @IsNotEmpty()\n  @IsString()\n  @IsLocalFileExist()\n  @ApiProperty({\n    description: 'The id of local file',\n    format: 'uuid',\n    example: localFilesData[0].id,\n  })\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalFileSeeder.html":{"url":"classes/LocalFileSeeder.html","title":"class - LocalFileSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalFileSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/seeds/local-file.seeder.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines LocalFile entity seeder.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(dataSource: DataSource)\n                \n            \n\n\n            \n                \n                    Defined in src/database/seeds/local-file.seeder.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSource\n                                    \n                                            DataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Seeder } from 'typeorm-extension';\nimport { DataSource } from 'typeorm';\nimport { LocalFile } from '../../services/storages/entities/local-file.entity';\nimport { localFilesData } from '../data/local-files.data';\n\n/**\n * Defines {@link LocalFile} entity seeder.\n */\nexport default class LocalFileSeeder implements Seeder {\n  async run(dataSource: DataSource): Promise {\n    await dataSource\n      .createQueryBuilder()\n      .insert()\n      .into(LocalFile)\n      .values([...localFilesData])\n      .orIgnore()\n      .execute();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalFileUploadEnvironmentVariables.html":{"url":"classes/LocalFileUploadEnvironmentVariables.html","title":"class - LocalFileUploadEnvironmentVariables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalFileUploadEnvironmentVariables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/file-upload/local-file-upload.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines class to hold local-file-upload-related environment variables.\nSee Custom validate function\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                LOCAL_FILE_UPLOAD_DEST\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        LOCAL_FILE_UPLOAD_DEST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/file-upload/local-file-upload.config.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import * as fs from 'fs';\nimport { registerAs } from '@nestjs/config';\nimport { MulterOptions } from '@nestjs/platform-express/multer/interfaces/multer-options.interface';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { isEnvValid } from '../../common/utils/validators/is-env-valid.validator.util';\n\n/**\n * Defines class to hold local-file-upload-related environment variables.\n *\n * @see [Custom validate function](https://docs.nestjs.com/techniques/configuration#schema-validation)\n */\nexport class LocalFileUploadEnvironmentVariables {\n  @IsNotEmpty()\n  @IsString()\n  LOCAL_FILE_UPLOAD_DEST: string;\n}\n\n/**\n * Defines the local file upload configuration.\n * This configuration is registered under `local-file-upload` namespace.\n *\n * @see [Configuration Namespace](https://docs.nestjs.com/techniques/configuration#configuration-namespaces)\n */\nexport const localFileUploadConfig = registerAs(\n  'local-file-upload',\n  (): MulterOptions => {\n    const env: LocalFileUploadEnvironmentVariables = isEnvValid(\n      process.env,\n      LocalFileUploadEnvironmentVariables,\n    );\n\n    // * Create the local file upload destination if it doesn't exist\n    if (!fs.existsSync(env.LOCAL_FILE_UPLOAD_DEST)) {\n      fs.mkdirSync(env.LOCAL_FILE_UPLOAD_DEST);\n    }\n\n    return {\n      dest: env.LOCAL_FILE_UPLOAD_DEST,\n    };\n  },\n);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth/strategies/local.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the strategy for local strategy by extending PassportStrategy with Strategy from passport-local.\nThis strategy being used by the guards under AuthGuard('local').\nSee Implementing Passport Strategy\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/services/auth/strategies/local.strategy.ts:18\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The pino logger\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The auth service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/auth/strategies/local.strategy.ts:45\n                \n            \n\n\n            \n                \n                    To validate the LocalAuthGuard.\nFor each strategy, Passport will call the verify function (implemented with the validate() method in nestjs/passport) using an appropriate strategy-specific set of parameters.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The username to validate\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The password to validate\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The user entity.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { PinoLogger } from 'nestjs-pino';\nimport { Strategy } from 'passport-local';\nimport { UnprocessableEntityException } from '../../../common/exceptions/unprocessable-entity.exception';\nimport { User } from '../../users/entities/user.entity';\nimport { AuthService } from '../auth.service';\n\n/**\n * Defines the strategy for local strategy by extending PassportStrategy with Strategy from `passport-local`.\n *\n * @usageNotes\n * This strategy being used by the guards under `AuthGuard('local')`.\n *\n * @see [Implementing Passport Strategy](https://docs.nestjs.com/security/authentication#implementing-passport-strategies)\n */\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param authService The auth service\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    private readonly authService: AuthService,\n  ) {\n    super();\n\n    this.logger.setContext(LocalStrategy.name);\n  }\n\n  /**\n   * To validate the {@link LocalAuthGuard}.\n   *\n   * @usageNotes\n   * For each strategy, Passport will call the verify function (implemented with the validate() method in nestjs/passport) using an appropriate strategy-specific set of parameters.\n   *\n   * @param username The username to validate\n   * @param password The password to validate\n   *\n   * @returns The user entity.\n   */\n  async validate(username: string, password: string): Promise {\n    this.logger.info(`Try to call ${LocalStrategy.prototype.validate.name}`);\n\n    const user = await this.authService.validateUser(username, password);\n\n    if (!user) {\n      throw new UnprocessableEntityException({\n        message: `Wrong credential provided`,\n      });\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerEnvironmentVariables.html":{"url":"classes/LoggerEnvironmentVariables.html","title":"class - LoggerEnvironmentVariables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerEnvironmentVariables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/logger/logger.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines class to hold logger-related environment variables.\nSee Custom validate function\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                LOGGER_STREAM_BUFFER\n                            \n                            \n                                LOGGER_STREAM_DESTINATION\n                            \n                            \n                                LOGGER_STREAM_SYNC\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        LOGGER_STREAM_BUFFER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger/logger.config.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOGGER_STREAM_DESTINATION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger/logger.config.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOGGER_STREAM_SYNC\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsBoolean()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/logger/logger.config.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { APP_NAME } from '../../common/constants';\nimport { registerAs } from '@nestjs/config';\nimport { Params } from 'nestjs-pino';\nimport { appConfig, Environment } from '../app/app.config';\nimport pino from 'pino';\nimport { Transform } from 'class-transformer';\nimport { IsNotEmpty, IsString, IsNumber, IsBoolean } from 'class-validator';\nimport { toBoolean } from '../../common/utils/transformers/to-boolean.transformer.util';\nimport { toNumber } from '../../common/utils/transformers/to-number.transformer.util';\nimport { isEnvValid } from '../../common/utils/validators/is-env-valid.validator.util';\nimport { join } from 'path';\n\n/**\n * Defines class to hold logger-related environment variables.\n *\n * @see [Custom validate function](https://docs.nestjs.com/techniques/configuration#schema-validation)\n */\nexport class LoggerEnvironmentVariables {\n  @IsNotEmpty()\n  @IsString()\n  LOGGER_STREAM_DESTINATION: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @Transform(({ value }) => toNumber(value))\n  LOGGER_STREAM_BUFFER: number;\n\n  @IsNotEmpty()\n  @IsBoolean()\n  @Transform(({ value }) => toBoolean(value))\n  LOGGER_STREAM_SYNC: boolean;\n}\n\n/**\n * Defines the logger configuration under nestjs-pino.\n * This configuration is registered as `logger` namespace.\n *\n * @see [Configuration Namespace](https://docs.nestjs.com/techniques/configuration#configuration-namespaces)\n */\nexport const loggerConfig = registerAs('logger', (): Params => {\n  const env: LoggerEnvironmentVariables = isEnvValid(\n    process.env,\n    LoggerEnvironmentVariables,\n  );\n\n  const appConfigOptions = appConfig();\n\n  return {\n    pinoHttp: {\n      name: APP_NAME,\n      level: appConfigOptions.debug ? 'debug' : 'info',\n      transport:\n        appConfigOptions.environment !== Environment.Production\n          ? {\n              target: 'pino-pretty',\n              options: {\n                singleLine: true,\n              },\n            }\n          : undefined,\n      stream: pino.destination({\n        dest: join(process.cwd(), env.LOGGER_STREAM_DESTINATION),\n        minLength: env.LOGGER_STREAM_BUFFER,\n        sync: env.LOGGER_STREAM_SYNC,\n      }),\n      customProps: /* istanbul ignore next */ () => ({\n        context: 'Http',\n      }),\n    },\n  };\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/logging.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines interceptor for logging the time takes between a specified incoming request and outgoing response.\nSee Interceptors\nSee Logger\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/logging.interceptor.ts:17\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The injected pino logger\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/logging.interceptor.ts:31\n                \n            \n\n\n            \n                \n                    {@inheritDoc NestInterceptor.intercept}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { InjectPinoLogger, Logger } from 'nestjs-pino';\nimport { Observable, tap } from 'rxjs';\n\n/**\n * Defines interceptor for logging the time takes between a specified incoming request and outgoing response.\n *\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\n * @see [Logger](https://docs.nestjs.com/techniques/logger#logger)\n */\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  /**\n   * The constructor.\n   *\n   * @param logger The injected pino logger\n   */\n  constructor(\n    @InjectPinoLogger(LoggingInterceptor.name)\n    private readonly logger: Logger,\n  ) {}\n\n  /**\n   * {@inheritDoc NestInterceptor.intercept}\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const url = context.switchToHttp().getRequest().url;\n\n    this.logger.log(`Start hitting ${url}...`);\n\n    const now = Date.now();\n\n    return next\n      .handle()\n      .pipe(\n        tap((res) =>\n          this.logger.log(`After... ${Date.now() - now}ms`, { res: res }),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoContentSuccessResponse.html":{"url":"classes/NoContentSuccessResponse.html","title":"class - NoContentSuccessResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoContentSuccessResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/responses/successes/no-content-success-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data representing a no content success response.\nThe DTO extends SuccessResponse of the shape of TData.\nThe NoContentSuccessResponse of TData shape contains success response attribute:\n\nstatusCode: The HttpStatus code\n\n\n            \n\n            \n                Extends\n            \n            \n                        SuccessResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                statusCode\n                            \n                            \n                                    Optional\n                                data\n                            \n                            \n                                message\n                            \n                            \n                                path\n                            \n                            \n                                success\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The http status code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:21\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TData | null | undefined\n\n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:48\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The response message', example: 'Success'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:45\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The requested url/path', example: '/api/v1/auth/sign-in'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The request status', example: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:39\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The time when the request was made', example: '2023-02-11T05:24:50.680Z'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:27\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { SuccessResponse } from '../success-response.dto';\n\n/**\n * Defines the DTO that carries data representing a no content success response.\n *\n * @usageNotes\n * The DTO extends {@link SuccessResponse} of the shape of TData.\n *\n * The NoContentSuccessResponse of TData shape contains success response attribute:\n * - `statusCode`: The {@link HttpStatus} code\n */\nexport class NoContentSuccessResponse extends SuccessResponse {\n  @ApiProperty({\n    description: 'The http status code',\n    example: HttpStatus.NO_CONTENT,\n  })\n  statusCode: HttpStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundErrorResponse.html":{"url":"classes/NotFoundErrorResponse.html","title":"class - NotFoundErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/responses/errors/not-found-error-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data representing a not found error response.\nThe DTO extends ErrorResponse.\nThe NotFoundErrorResponse contains error attribute:\n\nstatusCode: The HttpStatus code\nerror: The application error code\n\n\n            \n\n            \n                Extends\n            \n            \n                        ErrorResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                statusCode\n                            \n                            \n                                help\n                            \n                            \n                                message\n                            \n                            \n                                path\n                            \n                            \n                                success\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ErrorCode\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The application error code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The http status code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:21\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        help\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The help message related to error', example: DEFAULT_HELP_MESSAGE})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:61\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string | ValidationErrors[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The response message', example: 'Error'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:49\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The requested url/path', example: '/api/v1/auth/sign-in'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The request status', example: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The time when the request was made', example: '2023-02-11T05:24:50.680Z'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:31\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { ErrorCode } from '../../../enums/http/error-code.enum';\nimport { ErrorResponse } from '../error-response.dto';\n\n/**\n * Defines the DTO that carries data representing a not found error response.\n *\n * @usageNotes\n * The DTO extends {@link ErrorResponse}.\n *\n * The NotFoundErrorResponse contains error attribute:\n * - `statusCode`: The {@link HttpStatus} code\n * - `error`: The application error code\n */\nexport class NotFoundErrorResponse extends ErrorResponse {\n  @ApiProperty({\n    description: 'The http status code',\n    example: HttpStatus.NOT_FOUND,\n  })\n  statusCode: HttpStatus;\n\n  @ApiProperty({\n    description: 'The application error code',\n    example: ErrorCode.ErrorNotFound,\n  })\n  error: ErrorCode;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundException.html":{"url":"classes/NotFoundException.html","title":"class - NotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/not-found.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines an HTTP exception for Not Found type errors.\nSee Built-in HTTP exceptions\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errorResponse?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/not-found.exception.ts:11\n                            \n                        \n\n                \n                    \n                            Instantiate an NotFoundException Exception.\n`throw new NotFoundException()`The HTTP response status code will be 404.\n\nThe errorResponse argument defines the JSON response body.\n\nBy default, the JSON response body contains three properties:\n\nmessage: the string DEFAULT_NOT_FOUND_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\nerror: the enum ErrorCode.ErrorNotFound by default;\noverride this by supplying any value of ErrorCode in the errorResponse parameter.\nhelp: the string DEFAULT_HELP_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        errorResponse\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Object describing the error condition, if any\n\n                                                        \n                                                \n                                        \n                                    \n                                    Example :\n                                        \n                                            throw new NotFoundException()\n\n                                        \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\nimport { DEFAULT_HELP_MESSAGE, DEFAULT_NOT_FOUND_MESSAGE } from '../constants';\nimport { ErrorResponse } from '../dto/responses/error-response.dto';\nimport { ErrorCode } from '../enums/http/error-code.enum';\n\n/**\n * Defines an HTTP exception for *Not Found* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n */\nexport class NotFoundException extends HttpException {\n  /**\n   * Instantiate an `NotFoundException` Exception.\n   *\n   * @example\n   * `throw new NotFoundException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 404.\n   * - The `errorResponse` argument defines the JSON response body.\n   *\n   * By default, the JSON response body contains three properties:\n   * - `message`: the string {@link DEFAULT_NOT_FOUND_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   * - `error`: the enum {@link ErrorCode.ErrorNotFound} by default;\n   * override this by supplying any value of `ErrorCode` in the errorResponse parameter.\n   * - `help`: the string {@link DEFAULT_HELP_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   *\n   * @param errorResponse Object describing the error condition, if any\n   */\n  constructor(errorResponse?: Partial) {\n    const httpStatus = HttpStatus.NOT_FOUND;\n    const response: ErrorResponse = new ErrorResponse({\n      message: errorResponse?.message ?? DEFAULT_NOT_FOUND_MESSAGE,\n      error: errorResponse?.error ?? ErrorCode.ErrorNotFound,\n      help: errorResponse?.help ?? DEFAULT_HELP_MESSAGE,\n    });\n\n    super(\n      HttpException.createBody(response, response.error, httpStatus),\n      httpStatus,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OkSuccessResponse.html":{"url":"classes/OkSuccessResponse.html","title":"class - OkSuccessResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OkSuccessResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/responses/successes/ok-success-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data representing a ok success response.\nThe DTO extends SuccessResponse of the shape of TData.\nThe OkSuccessResponse of TData shape contains success response attribute:\n\nstatusCode: The HttpStatus code\n\n\n            \n\n            \n                Extends\n            \n            \n                        SuccessResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                statusCode\n                            \n                            \n                                    Optional\n                                data\n                            \n                            \n                                message\n                            \n                            \n                                path\n                            \n                            \n                                success\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The http status code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:19\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TData | null | undefined\n\n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:48\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The response message', example: 'Success'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:45\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The requested url/path', example: '/api/v1/auth/sign-in'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The request status', example: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:39\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The time when the request was made', example: '2023-02-11T05:24:50.680Z'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         SuccessResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         SuccessResponse:27\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { SuccessResponse } from '../success-response.dto';\n\n/**\n * Defines the DTO that carries data representing a ok success response.\n *\n * @usageNotes\n * The DTO extends {@link SuccessResponse} of the shape of TData.\n *\n * The OkSuccessResponse of TData shape contains success response attribute:\n * - `statusCode`: The {@link HttpStatus} code\n */\nexport class OkSuccessResponse extends SuccessResponse {\n  @ApiProperty({\n    description: 'The http status code',\n    example: HttpStatus.OK,\n  })\n  statusCode: HttpStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/parse-int.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Class defining the implementation of a pipe that parse int from any string value.\nThe transform method will throw UnprocessableEntityException,\nif fail to parse the string value.\nSee Pipes\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/parse-int.pipe.ts:19\n                \n            \n\n\n            \n                \n                    {@inheritDoc ExceptionFilter.catch}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, PipeTransform, ArgumentMetadata } from '@nestjs/common';\nimport { UnprocessableEntityException } from '../exceptions/unprocessable-entity.exception';\n\n/**\n * Class defining the implementation of a pipe that parse int from any string value.\n *\n * @usageNotes\n * The transform method will throw `UnprocessableEntityException`,\n * if fail to parse the string value.\n *\n * @see [Pipes](https://docs.nestjs.com/pipes)\n */\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  /**\n   * {@inheritDoc ExceptionFilter.catch}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  transform(value: string, metadata: ArgumentMetadata): number {\n    const val = parseInt(value, 10);\n\n    if (isNaN(val)) {\n      throw new UnprocessableEntityException({\n        message: 'Unable to parse value to int',\n      });\n    }\n\n    return val;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/posts/entities/post.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the post entity.\nThe post entity contains attribute:\n\nid: The id of post\ncontent: The content of post\nauthorId: The id of author of post\ntopicIds: The ids of topic of post\ncreatedAt: The creation time of post\nupdatedAt: The last updation time of post\nauthor: The post author\ntopics: The post topics\n\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                authorId\n                            \n                            \n                                content\n                            \n                            \n                                id\n                            \n                            \n                                topicIds\n                            \n                            \n                                topics\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/posts/entities/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/posts/entities/post.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/posts/entities/post.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/posts/entities/post.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topicIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @RelationId(post => post.topics)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/posts/entities/post.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topics\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Topic[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, topic => topic.posts, {cascade: true, onDelete: 'CASCADE'})@JoinTable({name: 'posts_topics'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/posts/entities/post.entity.ts:55\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  RelationId,\n} from 'typeorm';\nimport { GenericEntity } from '../../../common/entities/generic.entity';\nimport { Topic } from '../../topics/entities/topic.entity';\nimport { User } from '../../users/entities/user.entity';\n\n/**\n * Defines the post entity.\n *\n * @usageNotes\n * The post entity contains attribute:\n * - `id`: The id of post\n * - `content`: The content of post\n * - `authorId`: The id of author of post\n * - `topicIds`: The ids of topic of post\n * - `createdAt`: The creation time of post\n * - `updatedAt`: The last updation time of post\n * - `author`: The post author\n * - `topics`: The post topics\n */\n@Entity()\nexport class Post extends GenericEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  content: string;\n\n  @Column('uuid')\n  authorId: string;\n\n  @ManyToOne(/* istanbul ignore next */ () => User, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  author: User;\n\n  @RelationId(/* istanbul ignore next */ (post: Post) => post.topics)\n  topicIds: string[];\n\n  @ManyToMany(\n    /* istanbul ignore next */ () => Topic,\n    /* istanbul ignore next */ (topic: Topic) => topic.posts,\n    { cascade: true, onDelete: 'CASCADE' },\n  )\n  @JoinTable({ name: 'posts_topics' })\n  topics: Topic[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostByIdHook.html":{"url":"injectables/PostByIdHook.html","title":"injectable - PostByIdHook","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostByIdHook\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/posts/permissions/hooks/post-by-id.hook.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines subject hook for Post subject.\nIt hooks the Post subject by its identifier.\nFor permissions with conditions we need to provide subject hook in UseAccessControl decorator.\nSee Subject hook\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, postsService: PostsService)\n                    \n                \n                        \n                            \n                                Defined in src/services/posts/permissions/hooks/post-by-id.hook.ts:17\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The pino logger\n\n                                                        \n                                                \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The posts service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(undefined: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/services/posts/permissions/hooks/post-by-id.hook.ts:38\n                \n            \n\n\n            \n                \n                    Run PostByIdHook.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The post if it exists, otherwise undefined\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Request, SubjectBeforeFilterHook } from 'nest-casl';\nimport { PinoLogger } from 'nestjs-pino';\nimport { Post } from '../../entities/post.entity';\nimport { PostsService } from '../../posts.service';\n\n/**\n * Defines subject hook for {@link Post} subject.\n * It hooks the {@link Post} subject by its identifier.\n *\n * @usageNotes\n * For permissions with conditions we need to provide subject hook in {@link UseAccessControl} decorator.\n *\n * @see [Subject hook](https://github.com/getjerry/nest-casl#subject-hook)\n */\n@Injectable()\nexport class PostByIdHook implements SubjectBeforeFilterHook {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param postsService The posts service\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    private readonly postsService: PostsService,\n  ) {\n    this.logger.setContext(PostByIdHook.name);\n  }\n\n  /**\n   * Run {@link PostByIdHook}.\n   *\n   * @param params The request parameter\n   *\n   * @returns The post if it exists, otherwise undefined\n   */\n  async run({ params }: Request): Promise {\n    this.logger.info(`Try to call ${PostByIdHook.prototype.run.name}`);\n\n    return (await this.postsService.findById(params.id)) ?? undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostByIdPipe.html":{"url":"injectables/PostByIdPipe.html","title":"injectable - PostByIdPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostByIdPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/posts/pipes/post-by-id.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Class defining the implementation of a pipe that parse string UUID value\nand return the promise of post entity of related identifier value.\nThe transform method will throw UnprocessableEntityException, if fail to validate the string UUID value.\nAlso the transform method will throw NotFoundException, if fail to parse the post entity from the parsed string UUID post identifier value.\nSee Pipes\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, postsService: PostsService)\n                    \n                \n                        \n                            \n                                Defined in src/services/posts/pipes/post-by-id.pipe.ts:21\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The pino logger\n\n                                                        \n                                                \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The posts service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/services/posts/pipes/post-by-id.pipe.ts:39\n                \n            \n\n\n            \n                \n                    {@inheritDoc PipeTransform.transform}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, PipeTransform, ArgumentMetadata } from '@nestjs/common';\nimport { isUUID } from 'class-validator';\nimport { PinoLogger } from 'nestjs-pino';\nimport { NotFoundException } from '../../../common/exceptions/not-found.exception';\nimport { UnprocessableEntityException } from '../../../common/exceptions/unprocessable-entity.exception';\nimport { Post } from '../entities/post.entity';\nimport { PostsService } from '../posts.service';\n\n/**\n * Class defining the implementation of a pipe that parse string UUID value\n * and return the promise of post entity of related identifier value.\n *\n * @usageNotes\n * The transform method will throw {@link UnprocessableEntityException}, if fail to validate the string UUID value.\n *\n * Also the transform method will throw {@link NotFoundException}, if fail to parse the post entity from the parsed string UUID post identifier value.\n *\n * @see [Pipes](https://docs.nestjs.com/pipes)\n */\n@Injectable()\nexport class PostByIdPipe implements PipeTransform> {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param postsService The posts service\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    private readonly postsService: PostsService,\n  ) {\n    this.logger.setContext(PostByIdPipe.name);\n  }\n\n  /**\n   * {@inheritDoc PipeTransform.transform}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async transform(value: string, metadata: ArgumentMetadata): Promise {\n    this.logger.info(`Try to call ${PostByIdPipe.prototype.transform.name}`);\n\n    if (!isUUID(value, '4')) {\n      throw new UnprocessableEntityException({\n        message: 'The given value is not a valid UUID',\n      });\n    }\n\n    const post = await this.postsService.findById(value);\n\n    if (post === null) {\n      throw new NotFoundException({\n        message: 'Post not found',\n      });\n    }\n\n    return post;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostIdParam.html":{"url":"classes/PostIdParam.html","title":"class - PostIdParam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostIdParam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/posts/dto/params/post-id.param.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries the post identifier request parameter.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsUUID('4')@IsPostExist()@ApiProperty({description: 'The id of post', format: 'uuid', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/posts/dto/params/post-id.param.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsUUID } from 'class-validator';\nimport { postsData } from '../../../../database/data/posts.data';\nimport { IsPostExist } from '../../validators/is-post-exist.validator';\n\n/**\n * Defines the DTO that carries the post identifier request parameter.\n */\nexport class PostIdParam {\n  @IsNotEmpty()\n  @IsUUID('4')\n  @IsPostExist()\n  @ApiProperty({\n    description: 'The id of post',\n    format: 'uuid',\n    example: postsData[0].id,\n  })\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostResponse.html":{"url":"classes/PostResponse.html","title":"class - PostResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/posts/dto/responses/post-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data representing a post.\nThe DTO intersect PostIdParam with TimestampResponse.\nThe PostResponse also contains post attribute:\n\ncontent: The content of post\ntopicIds: The topic ids of post\nauthorId: The author id of post\ntopics: The post topics\nauthor: The post author\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                authorId\n                            \n                            \n                                content\n                            \n                            \n                                topicIds\n                            \n                            \n                                topics\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The author of post', type: UserResponse})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/posts/dto/responses/post-response.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The author id of post', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/posts/dto/responses/post-response.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The content of post', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/posts/dto/responses/post-response.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topicIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The topic ids of post', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/posts/dto/responses/post-response.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topics\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TopicResponse[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The topics of post', type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/posts/dto/responses/post-response.dto.ts:55\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, IntersectionType } from '@nestjs/swagger';\nimport { TimestampResponse } from '../../../../common/dto/responses/timestamp-response.dto';\nimport { postsData } from '../../../../database/data/posts.data';\nimport { topicsData } from '../../../../database/data/topics.data';\nimport { usersData } from '../../../../database/data/users.data';\nimport { TopicResponse } from '../../../topics/dto/responses/topic-response.dto';\nimport { UserResponse } from '../../../users/dto/responses/users/user-response.dto';\nimport { PostIdParam } from '../params/post-id.param.dto';\n\n/**\n * Defines the DTO that carries data representing a post.\n *\n * @usageNotes\n * The DTO intersect {@link PostIdParam} with {@link TimestampResponse}.\n *\n * The PostResponse also contains post attribute:\n * - `content`: The content of post\n * - `topicIds`: The topic ids of post\n * - `authorId`: The author id of post\n * - `topics`: The post topics\n * - `author`: The post author\n */\nexport class PostResponse extends IntersectionType(\n  PostIdParam,\n  TimestampResponse,\n) {\n  @ApiProperty({\n    description: 'The content of post',\n    example: postsData[0].content,\n  })\n  content: string;\n\n  @ApiProperty({\n    description: 'The author id of post',\n    example: usersData[0].id,\n  })\n  authorId: string;\n\n  @ApiProperty({\n    description: 'The author of post',\n    type: UserResponse,\n  })\n  author: UserResponse;\n\n  @ApiProperty({\n    description: 'The topic ids of post',\n    example: [topicsData[0].id, topicsData[1].id],\n  })\n  topicIds: string[];\n\n  @ApiProperty({\n    description: 'The topics of post',\n    type: [TopicResponse],\n  })\n  topics: TopicResponse[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostSeeder.html":{"url":"classes/PostSeeder.html","title":"class - PostSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/seeds/post.seeder.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines Post entity seeder.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(dataSource: DataSource)\n                \n            \n\n\n            \n                \n                    Defined in src/database/seeds/post.seeder.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSource\n                                    \n                                            DataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Seeder } from 'typeorm-extension';\nimport { DataSource } from 'typeorm';\nimport { Post } from '../../services/posts/entities/post.entity';\nimport { postsData } from '../data/posts.data';\n\n/**\n * Defines {@link Post} entity seeder.\n */\nexport default class PostSeeder implements Seeder {\n  async run(dataSource: DataSource): Promise {\n    await dataSource\n      .createQueryBuilder()\n      .insert()\n      .into(Post)\n      .values([...postsData])\n      .orIgnore()\n      .execute();\n\n    // * @see [Working with Relations](https://github.com/typeorm/typeorm/blob/master/docs/relational-query-builder.md)\n    await Promise.all(\n      postsData.map(async (postData) => {\n        await Promise.all(\n          postData.topics.map(async (topic) => {\n            await dataSource\n              .createQueryBuilder()\n              .relation(Post, 'topics')\n              .of(postData.id)\n              .add(topic.id);\n          }),\n        );\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/posts/posts.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Defines the posts controller.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                findAllPosts\n                            \n                            \n                                    Async\n                                findPostById\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                            \n                                    Async\n                                updatePostTopics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(undefined: RequestWithAuthUser, createPostRequest: CreatePostRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseAccessControl(PostActions.Create, PostEntity)@ApiBearerAuth()@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/posts/posts.controller.ts:89\n                \n            \n\n\n            \n                \n                    Create a post endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    \n                                                RequestWithAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    createPostRequest\n                                    \n                                                CreatePostRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The DTO that carries data to create a post\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        The success response with 'Post created' message and created post data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(undefined: PostEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseAccessControl(PostActions.Delete, PostEntity, PostByIdHook)@ApiBearerAuth()@ApiUuidParam({name: 'id', description: 'The id of post'})@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/posts/posts.controller.ts:272\n                \n            \n\n\n            \n                \n                    Delete a post by a given id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                PostEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The success response with 'Post deleted' message.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseAccessControl(PostActions.ReadAll, PostEntity)@ApiBearerAuth()@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/posts/posts.controller.ts:137\n                \n            \n\n\n            \n                \n                    Get all posts endpoint.\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        The success response with 'Posts retrieved' message and posts data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPostById(post: PostEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseAccessControl(PostActions.ReadById, PostEntity, PostByIdHook)@ApiBearerAuth()@ApiUuidParam({name: 'id', description: 'The id of post'})@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/posts/posts.controller.ts:180\n                \n            \n\n\n            \n                \n                    Get a post by a given id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                PostEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The specified post to get\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        The success response with 'Post retrieved' message and a post data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(undefined: PostEntity, updatePostRequest: UpdatePostRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@UseAccessControl(PostActions.Update, PostEntity, PostByIdHook)@ApiBearerAuth()@ApiUuidParam({name: 'id', description: 'The id of post'})@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/posts/posts.controller.ts:220\n                \n            \n\n\n            \n                \n                    Update a post by a given id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    \n                                                PostEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    updatePostRequest\n                                    \n                                                UpdatePostRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The DTO that carries data to update a post\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The success response with 'Post updated' message.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePostTopics\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePostTopics(undefined: PostEntity, updatePostTopicsRequest: UpdatePostTopicsRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id/topics')@UseAccessControl(PostActions.UpdateTopics, PostEntity, PostByIdHook)@ApiBearerAuth()@ApiUuidParam({name: 'id', description: 'The id of post'})@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/posts/posts.controller.ts:319\n                \n            \n\n\n            \n                \n                    Update a post's topics by a given id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    \n                                                PostEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    updatePostTopicsRequest\n                                    \n                                                UpdatePostTopicsRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The DTO that carries data to update a post's topics\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The success response with 'Post topics updated' message.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { PinoLogger } from 'nestjs-pino';\nimport { APP_VERSION } from '../../common/constants';\nimport { ApiErrorsResponse } from '../../common/decorators/open-api/api-errors-response.decorator';\nimport { ApiSuccessesResponse } from '../../common/decorators/open-api/api-successes-response.decorator';\nimport { ApiConflictErrorResponse } from '../../common/decorators/open-api/errors/api-conflict-error-response.decorator';\nimport { ApiForbiddenErrorResponse } from '../../common/decorators/open-api/errors/api-forbidden-error-response.decorator';\nimport { ApiNotFoundErrorResponse } from '../../common/decorators/open-api/errors/api-not-found-error-response.decorator';\nimport { ApiUnauthorizedErrorResponse } from '../../common/decorators/open-api/errors/api-unauthorized-error-response.decorator';\nimport { ApiUnprocessableEntityErrorResponse } from '../../common/decorators/open-api/errors/api-unprocessable-entity-error-response.decorator';\nimport { ApiUuidParam } from '../../common/decorators/open-api/params/api-uuid-param.decorator';\nimport { ApiCreatedSuccessResponse } from '../../common/decorators/open-api/successes/api-created-success-response.decorator';\nimport { ApiOkSuccessResponse } from '../../common/decorators/open-api/successes/api-ok-success-response.decorator';\nimport { SuccessResponse } from '../../common/dto/responses/success-response.dto';\nimport { ConflictException } from '../../common/exceptions/conflict.exception';\nimport { InternalServerErrorException } from '../../common/exceptions/internal-server-error.exception';\nimport { UseAccessControl } from '../auth/decorators/use-access-control.decorator';\nimport RequestWithAuthUser from '../auth/interface/request-with-auth-user.interface';\nimport { TopicsService } from '../topics/topics.service';\nimport { CreatePostRequest } from './dto/requests/create-post-request.dto';\nimport { UpdatePostRequest } from './dto/requests/update-post-request.dto';\nimport { UpdatePostTopicsRequest } from './dto/requests/update-post-topics-request.dto';\nimport { PostResponse } from './dto/responses/post-response.dto';\nimport { Post as PostEntity } from './entities/post.entity';\nimport { PostByIdHook } from './permissions/hooks/post-by-id.hook';\nimport { PostActions } from './permissions/post.permissions';\nimport { PostByIdPipe } from './pipes/post-by-id.pipe';\nimport { PostsService } from './posts.service';\n\n/**\n * Defines the posts controller.\n */\n@Controller({\n  path: 'posts',\n  version: APP_VERSION,\n})\n@ApiTags('Posts')\nexport class PostsController {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param topicsService The topics service\n   * @param postsService The posts service\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    private readonly topicsService: TopicsService,\n    private readonly postsService: PostsService,\n  ) {\n    this.logger.setContext(PostsController.name);\n  }\n\n  /**\n   * Create a post endpoint.\n   *\n   * @param user The authenticated user\n   * @param createPostRequest The DTO that carries data to create a post\n   *\n   * @returns The success response with `'Post created'` message and created `post` data.\n   */\n  @Post()\n  @UseAccessControl(PostActions.Create, PostEntity)\n  @ApiBearerAuth()\n  @ApiSuccessesResponse([\n    {\n      response: ApiCreatedSuccessResponse,\n      options: {\n        model: PostResponse,\n        options: { description: 'Post created' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiUnprocessableEntityErrorResponse },\n  ])\n  async createPost(\n    @Req() { user }: RequestWithAuthUser,\n    @Body() createPostRequest: CreatePostRequest,\n  ): Promise> {\n    this.logger.info(\n      `Try to call ${PostsController.prototype.createPost.name}`,\n    );\n\n    try {\n      return new SuccessResponse({\n        message: 'Post created',\n        data: await this.postsService.create({\n          ...CreatePostRequest.toEntity(createPostRequest),\n          topics: await this.topicsService.findByIds(\n            createPostRequest.topicIds,\n          ),\n          author: user,\n        }),\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Get all posts endpoint.\n   *\n   * @returns The success response with `'Posts retrieved'` message and `posts` data.\n   */\n  @Get()\n  @UseAccessControl(PostActions.ReadAll, PostEntity)\n  @ApiBearerAuth()\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        model: PostResponse,\n        isArray: true,\n        options: { description: 'Posts retrieved' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n  ])\n  async findAllPosts(): Promise> {\n    this.logger.info(\n      `Try to call ${PostsController.prototype.findAllPosts.name}`,\n    );\n\n    try {\n      return new SuccessResponse({\n        message: 'Posts retrieved',\n        data: await this.postsService.findAll(),\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Get a post by a given id endpoint.\n   *\n   * @param post The specified post to get\n   *\n   * @returns The success response with `'Post retrieved'` message and a `post` data.\n   */\n  @Get(':id')\n  @UseAccessControl(PostActions.ReadById, PostEntity, PostByIdHook)\n  @ApiBearerAuth()\n  @ApiUuidParam({ name: 'id', description: 'The id of post' })\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        model: PostResponse,\n        options: { description: 'Post retrieved' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiNotFoundErrorResponse },\n    { response: ApiUnprocessableEntityErrorResponse },\n  ])\n  async findPostById(\n    @Param('id', PostByIdPipe) post: PostEntity,\n  ): Promise> {\n    this.logger.info(\n      `Try to call ${PostsController.prototype.findPostById.name}`,\n    );\n\n    return new SuccessResponse({\n      message: 'Post retrieved',\n      data: post,\n    });\n  }\n\n  /**\n   * Update a post by a given id endpoint.\n   *\n   * @param id The post id request parameter\n   * @param updatePostRequest The DTO that carries data to update a post\n   *\n   * @returns The success response with `'Post updated'` message.\n   */\n  @Put(':id')\n  @UseAccessControl(PostActions.Update, PostEntity, PostByIdHook)\n  @ApiBearerAuth()\n  @ApiUuidParam({ name: 'id', description: 'The id of post' })\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        options: { description: 'Post updated' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiNotFoundErrorResponse },\n    { response: ApiConflictErrorResponse },\n    { response: ApiUnprocessableEntityErrorResponse },\n  ])\n  async updatePost(\n    @Param('id', PostByIdPipe) { id }: PostEntity,\n    @Body() updatePostRequest: UpdatePostRequest,\n  ): Promise {\n    this.logger.info(\n      `Try to call ${PostsController.prototype.updatePost.name}`,\n    );\n\n    if (id !== updatePostRequest.id) {\n      throw new ConflictException({ message: `Inconsistent post id` });\n    }\n\n    try {\n      await this.postsService.update(\n        id,\n        UpdatePostRequest.toEntity(updatePostRequest),\n      );\n\n      return new SuccessResponse({\n        message: 'Post updated',\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Delete a post by a given id endpoint.\n   *\n   * @param id The specified post id to delete\n   *\n   * @returns The success response with `'Post deleted'` message.\n   */\n  @Delete(':id')\n  @UseAccessControl(PostActions.Delete, PostEntity, PostByIdHook)\n  @ApiBearerAuth()\n  @ApiUuidParam({ name: 'id', description: 'The id of post' })\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        options: { description: 'Post deleted' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiNotFoundErrorResponse },\n  ])\n  async deletePost(\n    @Param('id', PostByIdPipe) { id }: PostEntity,\n  ): Promise {\n    this.logger.info(\n      `Try to call ${PostsController.prototype.deletePost.name}`,\n    );\n\n    try {\n      await this.postsService.delete(id);\n\n      return new SuccessResponse({\n        message: 'Post deleted',\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Update a post's topics by a given id endpoint.\n   *\n   * @param id The specified post id to update\n   * @param updatePostTopicsRequest The DTO that carries data to update a post's topics\n   *\n   * @returns The success response with `'Post topics updated'` message.\n   */\n  @Put(':id/topics')\n  @UseAccessControl(PostActions.UpdateTopics, PostEntity, PostByIdHook)\n  @ApiBearerAuth()\n  @ApiUuidParam({ name: 'id', description: 'The id of post' })\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        options: { description: 'Post topics updated' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiNotFoundErrorResponse },\n    { response: ApiConflictErrorResponse },\n    { response: ApiUnprocessableEntityErrorResponse },\n  ])\n  async updatePostTopics(\n    @Param('id', PostByIdPipe) { id }: PostEntity,\n    @Body() updatePostTopicsRequest: UpdatePostTopicsRequest,\n  ): Promise {\n    this.logger.info(\n      `Try to call ${PostsController.prototype.updatePostTopics.name}`,\n    );\n\n    if (id !== updatePostTopicsRequest.id) {\n      throw new ConflictException({ message: `Inconsistent post id` });\n    }\n\n    try {\n      await this.postsService.updateTopics(\n        id,\n        await this.topicsService.findByIds(updatePostTopicsRequest.topicIds),\n      );\n\n      return new SuccessResponse({\n        message: `Post topics updated`,\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nTopicsModule\n\nTopicsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTopicsModule->PostsModule\n\n\n\n\n\nIsPostExistValidator\n\nIsPostExistValidator\n\nPostsModule -->\n\nIsPostExistValidator->PostsModule\n\n\n\n\n\nPostByIdPipe\n\nPostByIdPipe\n\nPostsModule -->\n\nPostByIdPipe->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/posts/posts.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Defines the posts module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IsPostExistValidator\n                        \n                        \n                            PostByIdPipe\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TopicsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CaslModule } from 'nest-casl';\nimport { TopicsModule } from '../topics/topics.module';\nimport { Post } from './entities/post.entity';\nimport { PostPermissions } from './permissions/post.permissions';\nimport { PostByIdPipe } from './pipes/post-by-id.pipe';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './posts.service';\nimport { IsPostExistValidator } from './validators/is-post-exist.validator';\n\n/**\n * Defines the posts module.\n */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Post]),\n    CaslModule.forFeature({ permissions: PostPermissions }),\n    TopicsModule,\n  ],\n  providers: [PostsService, PostByIdPipe, IsPostExistValidator],\n  controllers: [PostsController],\n  exports: [],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/posts/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the posts service that responsible for data storage and retrieval for post entity.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateTopics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, postsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/services/posts/posts.service.ts:13\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The pino logger\n\n                                                        \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The repository of local file entity\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(post: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/services/posts/posts.service.ts:35\n                \n            \n\n\n            \n                \n                    Creates a post.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A post to create\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created post.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/posts/posts.service.ts:102\n                \n            \n\n\n            \n                \n                    Deletes a post by a given id.\nReturn true if the delete process is success, otherwise false.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicated whether the delete process is success or not\nReturn true if the delete process is success, otherwise false.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/services/posts/posts.service.ts:50\n                \n            \n\n\n            \n                \n                    Gets all posts.\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The posts array.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/posts/posts.service.ts:65\n                \n            \n\n\n            \n                \n                    Gets a post by a given id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The post if it exists, otherwise null.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, post: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/services/posts/posts.service.ts:83\n                \n            \n\n\n            \n                \n                    Updates a post by a given id.\nReturn true if the update process is success, otherwise false.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The post id to update\n\n                                    \n                                \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The post to update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the update process is success or not\nReturn true if the update process is success, otherwise false.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateTopics\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTopics(id: string, topics: Topic[])\n                \n            \n\n\n            \n                \n                    Defined in src/services/posts/posts.service.ts:119\n                \n            \n\n\n            \n                \n                    Updates a post topics by a given id.\nReturn true if the update process is success, otherwise false.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The post id to update\n\n                                    \n                                \n                                \n                                    topics\n                                    \n                                                Topic[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The post topics to update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the update process is success or not.\nReturn true if the update process is success, otherwise false.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PinoLogger } from 'nestjs-pino';\nimport { Repository } from 'typeorm';\nimport { Topic } from '../topics/entities/topic.entity';\nimport { Post } from './entities/post.entity';\n\n// * Service will be responsible for data storage and retrieval\n/**\n * Defines the posts service that responsible for data storage and retrieval for post entity.\n */\n@Injectable()\nexport class PostsService {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param postsRepository The repository of local file entity\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    @InjectRepository(Post)\n    private readonly postsRepository: Repository,\n  ) {\n    this.logger.setContext(PostsService.name);\n  }\n\n  /**\n   * Creates a post.\n   *\n   * @param post A post to create\n   *\n   * @return The created post.\n   */\n  async create(post: Post): Promise {\n    this.logger.info(`Try to call ${PostsService.prototype.create.name}`);\n\n    const createdPost: Post = this.postsRepository.create(post);\n\n    await this.postsRepository.save(createdPost);\n\n    return createdPost;\n  }\n\n  /**\n   * Gets all posts.\n   *\n   * @returns The posts array.\n   */\n  async findAll(): Promise {\n    this.logger.info(`Try to call ${PostsService.prototype.findAll.name}`);\n\n    return await this.postsRepository.find({\n      relations: { topics: true, author: { profile: true } },\n    });\n  }\n\n  /**\n   * Gets a post by a given id.\n   *\n   * @param id The id to find\n   *\n   * @returns The post if it exists, otherwise null.\n   */\n  async findById(id: string): Promise {\n    this.logger.info(`Try to call ${PostsService.prototype.findById.name}`);\n\n    return await this.postsRepository.findOne({\n      where: { id },\n      relations: { topics: true, author: { profile: true } },\n    });\n  }\n\n  /**\n   * Updates a post by a given id.\n   *\n   * @param id The post id to update\n   * @param post The post to update\n   *\n   * @returns The flag indicates whether the update process is success or not\n   * Return `true` if the update process is success, otherwise `false`.\n   */\n  async update(id: string, post: Post): Promise {\n    this.logger.info(`Try to call ${PostsService.prototype.update.name}`);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { topics, topicIds, ...postToUpdate } = post;\n\n    await this.postsRepository.update(id, postToUpdate);\n\n    return true;\n  }\n\n  /**\n   * Deletes a post by a given id.\n   *\n   * @param id The id to find\n   *\n   * @returns The flag indicated whether the delete process is success or not\n   * Return `true` if the delete process is success, otherwise `false`.\n   */\n  async delete(id: string): Promise {\n    this.logger.info(`Try to call ${PostsService.prototype.delete.name}`);\n\n    await this.postsRepository.delete(id);\n\n    return true;\n  }\n\n  /**\n   * Updates a post topics by a given id.\n   *\n   * @param id The post id to update\n   * @param topics The post topics to update\n   *\n   * @returns The flag indicates whether the update process is success or not.\n   * Return `true` if the update process is success, otherwise `false`.\n   */\n  async updateTopics(id: string, topics: Topic[]): Promise {\n    this.logger.info(`Try to call ${PostsService.prototype.updateTopics.name}`);\n\n    await this.postsRepository.save({\n      ...(await this.findById(id)),\n      topics: topics,\n    });\n\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RateLimitingEnvironmentVariables.html":{"url":"classes/RateLimitingEnvironmentVariables.html","title":"class - RateLimitingEnvironmentVariables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RateLimitingEnvironmentVariables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/rate-limiting/rate-limiting.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines class to hold rate-limiting-related environment variables.\nSee Custom validate function\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                THROTTLER_LIMIT\n                            \n                            \n                                THROTTLER_TTL\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        THROTTLER_LIMIT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/rate-limiting/rate-limiting.config.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        THROTTLER_TTL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/rate-limiting/rate-limiting.config.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\nimport { ThrottlerModuleOptions } from '@nestjs/throttler';\nimport { Transform } from 'class-transformer';\nimport { IsNotEmpty, IsNumber } from 'class-validator';\nimport { toNumber } from '../../common/utils/transformers/to-number.transformer.util';\nimport { isEnvValid } from '../../common/utils/validators/is-env-valid.validator.util';\n\n/**\n * Defines class to hold rate-limiting-related environment variables.\n *\n * @see [Custom validate function](https://docs.nestjs.com/techniques/configuration#schema-validation)\n */\nexport class RateLimitingEnvironmentVariables {\n  @IsNotEmpty()\n  @IsNumber()\n  @Transform(({ value }) => toNumber(value))\n  THROTTLER_TTL: number;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @Transform(({ value }) => toNumber(value))\n  THROTTLER_LIMIT: number;\n}\n\n/**\n * Defines the rate-limiting configuration.\n * This configuration is registered as `rate-limiting` namespace.\n *\n * @see [Configuration Namespace](https://docs.nestjs.com/techniques/configuration#configuration-namespaces)\n */\nexport const rateLimitingConfig = registerAs(\n  'rate-limiting',\n  (): ThrottlerModuleOptions => {\n    const env: RateLimitingEnvironmentVariables = isEnvValid(\n      process.env,\n      RateLimitingEnvironmentVariables,\n    );\n\n    return {\n      ttl: env.THROTTLER_TTL,\n      limit: env.THROTTLER_LIMIT,\n    };\n  },\n);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RedisStoreEnvironmentVariables.html":{"url":"classes/RedisStoreEnvironmentVariables.html","title":"class - RedisStoreEnvironmentVariables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RedisStoreEnvironmentVariables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/cache/redis-store.config.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines class to hold redis-store-related environment variables.\nSee Custom validate function\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                REDIS_STORE_HOST\n                            \n                            \n                                REDIS_STORE_PORT\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        REDIS_STORE_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/cache/redis-store.config.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REDIS_STORE_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/cache/redis-store.config.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\nimport { Transform } from 'class-transformer';\nimport { IsNotEmpty, IsNumber, IsString } from 'class-validator';\nimport { RedisClientOptions } from 'redis';\nimport { toNumber } from '../../common/utils/transformers/to-number.transformer.util';\nimport { isEnvValid } from '../../common/utils/validators/is-env-valid.validator.util';\n\n/**\n * Defines class to hold redis-store-related environment variables.\n *\n * @see [Custom validate function](https://docs.nestjs.com/techniques/configuration#schema-validation)\n */\nexport class RedisStoreEnvironmentVariables {\n  @IsNotEmpty()\n  @IsString()\n  REDIS_STORE_HOST: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @Transform(({ value }) => toNumber(value))\n  REDIS_STORE_PORT: number;\n}\n\n/**\n * Defines the redis store configuration.\n * This configuration is registered under `redis-store` namespace.\n *\n * @see [Configuration Namespace](https://docs.nestjs.com/techniques/configuration#configuration-namespaces)\n */\nexport const redisStoreConfig = registerAs(\n  'redis-store',\n  (): RedisClientOptions => {\n    const env: RedisStoreEnvironmentVariables = isEnvValid(\n      process.env,\n      RedisStoreEnvironmentVariables,\n    );\n\n    return {\n      socket: {\n        host: env.REDIS_STORE_HOST,\n        port: env.REDIS_STORE_PORT,\n      },\n    };\n  },\n);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RemovePostTitleAttribute1678285751957.html":{"url":"classes/RemovePostTitleAttribute1678285751957.html","title":"class - RemovePostTitleAttribute1678285751957","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RemovePostTitleAttribute1678285751957\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1678285751957-RemovePostTitleAttribute.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'RemovePostTitleAttribute1678285751957'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1678285751957-RemovePostTitleAttribute.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1678285751957-RemovePostTitleAttribute.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1678285751957-RemovePostTitleAttribute.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class RemovePostTitleAttribute1678285751957\n  implements MigrationInterface\n{\n  name = 'RemovePostTitleAttribute1678285751957';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` DROP FOREIGN KEY \\`FK_1dc62b3a3dd9182d23a01bb0c31\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` CHANGE \\`ownerId\\` \\`uploaderId\\` varchar(255) NULL`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`title\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` CHANGE \\`uploaderId\\` \\`uploaderId\\` varchar(255) NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` ADD CONSTRAINT \\`FK_89db8ec91d69803e1c35e871742\\` FOREIGN KEY (\\`uploaderId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` DROP FOREIGN KEY \\`FK_89db8ec91d69803e1c35e871742\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` CHANGE \\`uploaderId\\` \\`uploaderId\\` varchar(255) NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`post\\` ADD \\`title\\` varchar(255) NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` CHANGE \\`uploaderId\\` \\`ownerId\\` varchar(255) NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`local_file\\` ADD CONSTRAINT \\`FK_1dc62b3a3dd9182d23a01bb0c31\\` FOREIGN KEY (\\`ownerId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RemoveRoleTable1679272991389.html":{"url":"classes/RemoveRoleTable1679272991389.html","title":"class - RemoveRoleTable1679272991389","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RemoveRoleTable1679272991389\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1679272991389-RemoveRoleTable.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'RemoveRoleTable1679272991389'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1679272991389-RemoveRoleTable.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1679272991389-RemoveRoleTable.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1679272991389-RemoveRoleTable.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class RemoveRoleTable1679272991389 implements MigrationInterface {\n  name = 'RemoveRoleTable1679272991389';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \\`user\\` ADD \\`roles\\` enum ('super-admin', 'user') NOT NULL`,\n    );\n    await queryRunner.query(`DROP TABLE \\`users_roles\\``);\n    await queryRunner.query(`DROP TABLE \\`role\\``);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`roles\\``);\n    await queryRunner.query(\n      `CREATE TABLE \\`role\\` (\\`id\\` int NOT NULL AUTO_INCREMENT, \\`name\\` varchar(255) NOT NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \\`users_roles\\` (\\`userId\\` int NOT NULL, \\`roleId\\` int NOT NULL, INDEX \\`IDX_776b7cf9330802e5ef5a8fb18d\\` (\\`userId\\`), INDEX \\`IDX_4fb14631257670efa14b15a3d8\\` (\\`roleId\\`), PRIMARY KEY (\\`userId\\`, \\`roleId\\`)) ENGINE=InnoDB`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`role\\` DROP COLUMN \\`name\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`role\\` ADD \\`name\\` enum ('super-admin', 'user') NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`role\\` CHANGE \\`id\\` \\`id\\` int NOT NULL`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`role\\` DROP PRIMARY KEY`);\n    await queryRunner.query(`ALTER TABLE \\`role\\` DROP COLUMN \\`id\\``);\n    await queryRunner.query(\n      `ALTER TABLE \\`role\\` ADD \\`id\\` varchar(36) NOT NULL PRIMARY KEY`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`role\\` ADD UNIQUE INDEX \\`IDX_ae4578dcaed5adff96595e6166\\` (\\`name\\`)`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`users_roles\\` DROP PRIMARY KEY`);\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD PRIMARY KEY (\\`roleId\\`)`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \\`IDX_776b7cf9330802e5ef5a8fb18d\\` ON \\`users_roles\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` DROP COLUMN \\`userId\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD \\`userId\\` varchar(36) NOT NULL`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`users_roles\\` DROP PRIMARY KEY`);\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD PRIMARY KEY (\\`roleId\\`, \\`userId\\`)`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`users_roles\\` DROP PRIMARY KEY`);\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD PRIMARY KEY (\\`userId\\`)`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \\`IDX_4fb14631257670efa14b15a3d8\\` ON \\`users_roles\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` DROP COLUMN \\`roleId\\``,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD \\`roleId\\` varchar(36) NOT NULL`,\n    );\n    await queryRunner.query(`ALTER TABLE \\`users_roles\\` DROP PRIMARY KEY`);\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD PRIMARY KEY (\\`userId\\`, \\`roleId\\`)`,\n    );\n    await queryRunner.query(\n      `CREATE INDEX \\`IDX_776b7cf9330802e5ef5a8fb18d\\` ON \\`users_roles\\` (\\`userId\\`)`,\n    );\n    await queryRunner.query(\n      `CREATE INDEX \\`IDX_4fb14631257670efa14b15a3d8\\` ON \\`users_roles\\` (\\`roleId\\`)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD CONSTRAINT \\`FK_776b7cf9330802e5ef5a8fb18dc\\` FOREIGN KEY (\\`userId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE CASCADE`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`users_roles\\` ADD CONSTRAINT \\`FK_4fb14631257670efa14b15a3d86\\` FOREIGN KEY (\\`roleId\\`) REFERENCES \\`role\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`role\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \\`role\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RequestTimeoutErrorResponse.html":{"url":"classes/RequestTimeoutErrorResponse.html","title":"class - RequestTimeoutErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RequestTimeoutErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/responses/errors/request-timeout-error-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data representing a request timeout error response.\nThe DTO extends ErrorResponse.\nThe RequestTimeoutErrorResponse contains error attribute:\n\nstatusCode: The HttpStatus code\nerror: The application error code\n\n\n            \n\n            \n                Extends\n            \n            \n                        ErrorResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                statusCode\n                            \n                            \n                                help\n                            \n                            \n                                message\n                            \n                            \n                                path\n                            \n                            \n                                success\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ErrorCode\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The application error code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The http status code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:21\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        help\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The help message related to error', example: DEFAULT_HELP_MESSAGE})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:61\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string | ValidationErrors[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The response message', example: 'Error'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:49\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The requested url/path', example: '/api/v1/auth/sign-in'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The request status', example: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The time when the request was made', example: '2023-02-11T05:24:50.680Z'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:31\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { ErrorCode } from '../../../enums/http/error-code.enum';\nimport { ErrorResponse } from '../error-response.dto';\n\n/**\n * Defines the DTO that carries data representing a request timeout error response.\n *\n * @usageNotes\n * The DTO extends {@link ErrorResponse}.\n *\n * The RequestTimeoutErrorResponse contains error attribute:\n * - `statusCode`: The {@link HttpStatus} code\n * - `error`: The application error code\n */\nexport class RequestTimeoutErrorResponse extends ErrorResponse {\n  @ApiProperty({\n    description: 'The http status code',\n    example: HttpStatus.REQUEST_TIMEOUT,\n  })\n  statusCode: HttpStatus;\n\n  @ApiProperty({\n    description: 'The application error code',\n    example: ErrorCode.ErrorRequestTimeout,\n  })\n  error: ErrorCode;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RequestTimeoutException.html":{"url":"classes/RequestTimeoutException.html","title":"class - RequestTimeoutException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RequestTimeoutException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/request-timeout.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines an HTTP exception for Request Timeout type errors.\nSee Built-in HTTP exceptions\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errorResponse?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/request-timeout.exception.ts:14\n                            \n                        \n\n                \n                    \n                            Instantiate an RequestTimeoutException Exception.\n`throw new RequestTimeoutException()`The HTTP response status code will be 408.\n\nThe errorResponse argument defines the JSON response body.\n\nBy default, the JSON response body contains three properties:\n\nmessage: the string DEFAULT_REQUEST_TIMEOUT_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\nerror: the enum ErrorCode.ErrorRequestTimeout by default;\noverride this by supplying any value of ErrorCode in the errorResponse parameter.\nhelp: the string DEFAULT_HELP_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        errorResponse\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Object describing the error condition, if any\n\n                                                        \n                                                \n                                        \n                                    \n                                    Example :\n                                        \n                                            throw new RequestTimeoutException()\n\n                                        \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\nimport {\n  DEFAULT_HELP_MESSAGE,\n  DEFAULT_REQUEST_TIMEOUT_MESSAGE,\n} from '../constants';\nimport { ErrorResponse } from '../dto/responses/error-response.dto';\nimport { ErrorCode } from '../enums/http/error-code.enum';\n\n/**\n * Defines an HTTP exception for *Request Timeout* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n */\nexport class RequestTimeoutException extends HttpException {\n  /**\n   * Instantiate an `RequestTimeoutException` Exception.\n   *\n   * @example\n   * `throw new RequestTimeoutException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 408.\n   * - The `errorResponse` argument defines the JSON response body.\n   *\n   * By default, the JSON response body contains three properties:\n   * - `message`: the string {@link DEFAULT_REQUEST_TIMEOUT_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   * - `error`: the enum {@link ErrorCode.ErrorRequestTimeout} by default;\n   * override this by supplying any value of `ErrorCode` in the errorResponse parameter.\n   * - `help`: the string {@link DEFAULT_HELP_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   *\n   * @param errorResponse Object describing the error condition, if any\n   */\n  constructor(errorResponse?: Partial) {\n    const httpStatus = HttpStatus.REQUEST_TIMEOUT;\n    const response: ErrorResponse = new ErrorResponse({\n      message: errorResponse?.message ?? DEFAULT_REQUEST_TIMEOUT_MESSAGE,\n      error: errorResponse?.error ?? ErrorCode.ErrorRequestTimeout,\n      help: errorResponse?.help ?? DEFAULT_HELP_MESSAGE,\n    });\n\n    super(\n      HttpException.createBody(response, response.error, httpStatus),\n      httpStatus,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithAuthUser.html":{"url":"interfaces/RequestWithAuthUser.html","title":"interface - RequestWithAuthUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithAuthUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth/interface/request-with-auth-user.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the request with authenticated user interface.\n\n            \n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User } from '../../users/entities/user.entity';\n\n/**\n * Defines the request with authenticated user interface.\n */\nexport default interface RequestWithAuthUser extends Request {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines default response.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable, map } from 'rxjs';\nimport { NOT_TO_BE_TRANSFORMED_KEY } from '../constants';\nimport { SuccessResponse } from '../dto/responses/success-response.dto';\n\n/**\n * Defines default response.\n */\nexport interface Response {\n  data: T;\n}\n\n/**\n * Defines interceptor for intercepting the outgoing response.\n *\n * This interceptor transform outgoing response to the shape of {@link BaseResponse} merged with SuccessResponse.\n *\n * @usageNotes\n * Any error response would be catch by `HttpExceptionFilter`.\n * Hence, this interceptor just transform outgoing success response.\n *\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\n * @see [Exception Filters](https://docs.nestjs.com/exception-filters)\n */\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  /**\n   * The constructor.\n   *\n   * @param reflector The reflector to access the route's custom metadata\n   */\n  constructor(private readonly reflector: Reflector) {}\n\n  /**\n   * {@inheritDoc NestInterceptor.intercept}\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    // * Get the not to be transformed status meta data by the NOT_TO_BE_TRANSFORMED_KEY\n    const notToBeTransformedMetadata = this.reflector.get(\n      NOT_TO_BE_TRANSFORMED_KEY,\n      context.getHandler(),\n    );\n\n    // * If the route handler not to be transformed, then return to the next handle\n    if (notToBeTransformedMetadata) {\n      return next.handle();\n    }\n\n    const ctx = context.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n    const httpStatus = response.statusCode;\n\n    const baseResponseBody = new SuccessResponse({\n      statusCode: httpStatus,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      success: true,\n      message: 'Success',\n    });\n\n    return next.handle().pipe(\n      map((responseBody) => ({\n        ...baseResponseBody,\n        ...responseBody,\n        message: responseBody?.message ?? baseResponseBody.message,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ServicesModule.html":{"url":"modules/ServicesModule.html","title":"module - ServicesModule","body":"\n                   \n\n\n\n\n    Modules\n    ServicesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ServicesModule\n\n\n\ncluster_ServicesModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nServicesModule\n\nServicesModule\n\nServicesModule -->\n\nAuthModule->ServicesModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nServicesModule -->\n\nPostsModule->ServicesModule\n\n\n\n\n\nStoragesModule\n\nStoragesModule\n\nServicesModule -->\n\nStoragesModule->ServicesModule\n\n\n\n\n\nTopicsModule\n\nTopicsModule\n\nServicesModule -->\n\nTopicsModule->ServicesModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nServicesModule -->\n\nUsersModule->ServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/services.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Defines the application services module.\nThis services module contains module as follow:\n\nAuthModule: The module that responsible for authentication operations\nUsersModule: The module that responsible for user-related operations\nStoragesModule: The module that responsible for storage-related operations\nTopicsModule: The module that responsible for topic-related operations\nPostsModule: The module that responsible for post-related operations\n\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            StoragesModule\n                        \n                        \n                            TopicsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from './auth/auth.module';\nimport { PostsModule } from './posts/posts.module';\nimport { StoragesModule } from './storages/storages.module';\nimport { TopicsModule } from './topics/topics.module';\nimport { UsersModule } from './users/users.module';\n\n/**\n * Defines the application services module.\n *\n * @usageNotes\n * This services module contains module as follow:\n * - {@link AuthModule}: The module that responsible for authentication operations\n * - {@link UsersModule}: The module that responsible for user-related operations\n * - {@link StoragesModule}: The module that responsible for storage-related operations\n * - {@link TopicsModule}: The module that responsible for topic-related operations\n * - {@link PostsModule}: The module that responsible for post-related operations\n */\n@Module({\n  imports: [AuthModule, UsersModule, StoragesModule, TopicsModule, PostsModule],\n})\nexport class ServicesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInRequest.html":{"url":"classes/SignInRequest.html","title":"class - SignInRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth/dto/requests/sign-in-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data to sign in a user.\nThe CreateUserRequest contains user attribute:\n\nusername: The username of user\npassword: The password of user\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of user', example: 'password'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/auth/dto/requests/sign-in-request.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({description: 'The username of user', example: 'user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/auth/dto/requests/sign-in-request.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * Defines the DTO that carries data to sign in a user.\n *\n * @usageNotes\n * The CreateUserRequest contains user attribute:\n * - `username`: The username of user\n * - `password`: The password of user\n */\nexport default class SignInRequest {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    description: 'The username of user',\n    example: 'user',\n  })\n  username: string;\n\n  @ApiProperty({\n    description: 'The password of user',\n    example: 'password',\n  })\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInResponse.html":{"url":"classes/SignInResponse.html","title":"class - SignInResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth/dto/responses/sign-in-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries signed in user data.\nThe SignInResponse contains user attribute:\n\naccessToken: The access token that used in authentication\nexpiresIn: The access token expiration\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                            \n                                    Optional\n                                expiresIn\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The access token that used in authentication', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXIiLCJzdWIiOjIsImlhdCI6MTY3NjA5MzA5MCwiZXhwIjoxNjc2MTc5NDkwfQ.MhTZVDjFIGBQH2Z126iRT7l_nNCX8AvrsuALAn5qjeX'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/auth/dto/responses/sign-in-response.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The access token expiration', example: '24h'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/auth/dto/responses/sign-in-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * Defines the DTO that carries signed in user data.\n *\n * @usageNotes\n * The SignInResponse contains user attribute:\n * - `accessToken`: The access token that used in authentication\n * - `expiresIn`: The access token expiration\n */\nexport default class SignInResponse {\n  @ApiProperty({\n    description: 'The access token that used in authentication',\n    example:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXIiLCJzdWIiOjIsImlhdCI6MTY3NjA5MzA5MCwiZXhwIjoxNjc2MTc5NDkwfQ.MhTZVDjFIGBQH2Z126iRT7l_nNCX8AvrsuALAn5qjeX',\n  })\n  accessToken: string;\n\n  @ApiPropertyOptional({\n    description: 'The access token expiration',\n    example: '24h',\n  })\n  expiresIn?: string | number | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StoragesController.html":{"url":"controllers/StoragesController.html","title":"controller - StoragesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StoragesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storages/storages.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Defines the storages controller.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findLocalFileById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findLocalFileById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findLocalFileById(file: LocalFile, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('local/:id')@NotToBeCached()@NotToBeTransformed()@ApiUuidParam({name: 'id', description: 'The id of local file'})@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/storages/storages.controller.ts:61\n                \n            \n\n\n            \n                \n                    Gets a local file by a given id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                                LocalFile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    response\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response type and options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The Streamable of LocalFile\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Res, StreamableFile } from '@nestjs/common';\nimport * as fs from 'fs';\nimport { PinoLogger } from 'nestjs-pino';\nimport { join } from 'path';\nimport { LocalFile } from './entities/local-file.entity';\nimport { Response } from 'express';\nimport { LocalFileByIdPipe } from './pipes/local-file-by-id.pipe';\nimport { NotToBeCached } from '../../common/decorators/interceptors/not-to-be-cached.decorator';\nimport { NotToBeTransformed } from '../../common/decorators/interceptors/not-to-be-transformed.decorator';\nimport { NotFoundException } from '../../common/exceptions/not-found.exception';\nimport { InternalServerErrorException } from '../../common/exceptions/internal-server-error.exception';\nimport { ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { ApiErrorsResponse } from '../../common/decorators/open-api/api-errors-response.decorator';\nimport { ApiNotFoundErrorResponse } from '../../common/decorators/open-api/errors/api-not-found-error-response.decorator';\nimport { ApiSuccessesResponse } from '../../common/decorators/open-api/api-successes-response.decorator';\nimport { APP_VERSION } from '../../common/constants';\nimport { ApiUuidParam } from '../../common/decorators/open-api/params/api-uuid-param.decorator';\n\n/**\n * Defines the storages controller.\n */\n@Controller({\n  path: 'storages',\n  version: APP_VERSION,\n})\n@ApiTags('Storages')\nexport class StoragesController {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   */\n  constructor(private readonly logger: PinoLogger) {\n    this.logger.setContext(StoragesController.name);\n  }\n\n  /**\n   * Gets a local file by a given id endpoint.\n   *\n   * @param id The id to find\n   * @param response The response type and options\n   *\n   * @returns The Streamable of LocalFile\n   */\n  @Get('local/:id')\n  @NotToBeCached()\n  @NotToBeTransformed()\n  @ApiUuidParam({ name: 'id', description: 'The id of local file' })\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkResponse,\n      options: { description: 'File loaded' },\n    },\n  ])\n  @ApiErrorsResponse([\n    {\n      response: ApiNotFoundErrorResponse,\n      options: { description: 'File not found' },\n    },\n  ])\n  async findLocalFileById(\n    @Param('id', LocalFileByIdPipe) file: LocalFile,\n    @Res({ passthrough: true }) response: Response,\n  ): Promise {\n    this.logger.info(\n      `Try to call ${StoragesController.prototype.findLocalFileById.name}`,\n    );\n\n    const path = join(process.cwd(), file.path);\n\n    if (!fs.existsSync(path)) {\n      throw new NotFoundException({ message: 'File not found' });\n    }\n\n    try {\n      const stream = fs.createReadStream(path);\n\n      response.set({\n        'Content-Disposition': `inline; filename=\"${file.fileName}\"`,\n        'Content-Type': file.mimeType,\n      });\n\n      return new StreamableFile(stream);\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StoragesModule.html":{"url":"modules/StoragesModule.html","title":"module - StoragesModule","body":"\n                   \n\n\n\n\n    Modules\n    StoragesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StoragesModule\n\n\n\ncluster_StoragesModule_exports\n\n\n\ncluster_StoragesModule_providers\n\n\n\n\nStoragesService \n\nStoragesService \n\n\n\nStoragesModule\n\nStoragesModule\n\nStoragesService  -->\n\nStoragesModule->StoragesService \n\n\n\n\n\nIsLocalFileExistValidator\n\nIsLocalFileExistValidator\n\nStoragesModule -->\n\nIsLocalFileExistValidator->StoragesModule\n\n\n\n\n\nStoragesService\n\nStoragesService\n\nStoragesModule -->\n\nStoragesService->StoragesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/storages/storages.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Defines the storages module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IsLocalFileExistValidator\n                        \n                        \n                            StoragesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StoragesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StoragesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LocalFile } from './entities/local-file.entity';\nimport { StoragesController } from './storages.controller';\nimport { StoragesService } from './storages.service';\nimport { IsLocalFileExistValidator } from './validators/is-local-file-exist.validator';\n\n/**\n * Defines the storages module.\n */\n@Module({\n  imports: [TypeOrmModule.forFeature([LocalFile])],\n  providers: [StoragesService, IsLocalFileExistValidator],\n  controllers: [StoragesController],\n  exports: [StoragesService],\n})\nexport class StoragesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StoragesService.html":{"url":"injectables/StoragesService.html","title":"injectable - StoragesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StoragesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/storages/storages.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the storages service that responsible for data storage and retrieval for local file entity.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLocalFile\n                            \n                            \n                                    Async\n                                deleteLocalFile\n                            \n                            \n                                    Async\n                                findLocalFileById\n                            \n                            \n                                    Async\n                                updateLocalFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, localFilesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/services/storages/storages.service.ts:12\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The pino logger\n\n                                                        \n                                                \n                                                \n                                                        localFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The repository of local file entity\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLocalFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLocalFile(file: LocalFile)\n                \n            \n\n\n            \n                \n                    Defined in src/services/storages/storages.service.ts:34\n                \n            \n\n\n            \n                \n                    Creates a local file.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                                LocalFile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A local file to create\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created local file.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteLocalFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteLocalFile(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/storages/storages.service.ts:88\n                \n            \n\n\n            \n                \n                    Deletes a local file by a given id.\nReturn true if the delete process is success, otherwise false.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the delete process is success or not.\nReturn true if the delete process is success, otherwise false.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findLocalFileById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findLocalFileById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/storages/storages.service.ts:53\n                \n            \n\n\n            \n                \n                    Gets a local file by a given id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The local file if it exists, otherwise null.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateLocalFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateLocalFile(id: string, file: LocalFile)\n                \n            \n\n\n            \n                \n                    Defined in src/services/storages/storages.service.ts:70\n                \n            \n\n\n            \n                \n                    Updates a local file by a given id.\nReturn true if the update process is success, otherwise false.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id to find\n\n                                    \n                                \n                                \n                                    file\n                                    \n                                                LocalFile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The local file to update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the update process is success or not.\nReturn true if the update process is success, otherwise false.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PinoLogger } from 'nestjs-pino';\nimport { Repository } from 'typeorm';\nimport { LocalFile } from './entities/local-file.entity';\n\n// * Service will be responsible for data storage and retrieval\n/**\n * Defines the storages service that responsible for data storage and retrieval for local file entity.\n */\n@Injectable()\nexport class StoragesService {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param localFilesRepository The repository of local file entity\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    @InjectRepository(LocalFile)\n    private readonly localFilesRepository: Repository,\n  ) {\n    this.logger.setContext(StoragesService.name);\n  }\n\n  /**\n   * Creates a local file.\n   *\n   * @param file A local file to create\n   *\n   * @returns The created local file.\n   */\n  async createLocalFile(file: LocalFile): Promise {\n    this.logger.info(\n      `Try to call ${StoragesService.prototype.createLocalFile.name}`,\n    );\n\n    const createdFile: LocalFile = this.localFilesRepository.create(file);\n\n    await this.localFilesRepository.save(createdFile);\n\n    return createdFile;\n  }\n\n  /**\n   * Gets a local file by a given id.\n   *\n   * @param id The id to find\n   *\n   * @returns The local file if it exists, otherwise null.\n   */\n  async findLocalFileById(id: string): Promise {\n    this.logger.info(\n      `Try to call ${StoragesService.prototype.findLocalFileById.name}`,\n    );\n\n    return await this.localFilesRepository.findOne({ where: { id: id } });\n  }\n\n  /**\n   * Updates a local file by a given id.\n   *\n   * @param id The id to find\n   * @param file The local file to update\n   *\n   * @returns The flag indicates whether the update process is success or not.\n   * Return `true` if the update process is success, otherwise `false`.\n   */\n  async updateLocalFile(id: string, file: LocalFile): Promise {\n    this.logger.info(\n      `Try to call ${StoragesService.prototype.updateLocalFile.name}`,\n    );\n\n    await this.localFilesRepository.update(id, file);\n\n    return true;\n  }\n\n  /**\n   * Deletes a local file by a given id.\n   *\n   * @param id The id to find\n   *\n   * @returns The flag indicates whether the delete process is success or not.\n   * Return `true` if the delete process is success, otherwise `false`.\n   */\n  async deleteLocalFile(id: string): Promise {\n    this.logger.info(\n      `Try to call ${StoragesService.prototype.deleteLocalFile.name}`,\n    );\n\n    await this.localFilesRepository.delete(id);\n\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SuccessResponse.html":{"url":"classes/SuccessResponse.html","title":"class - SuccessResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SuccessResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/responses/success-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries the success response.\nThe Success Response of TData contains user attribute:\n\nstatusCode: The HttpStatus code\ntimestamp: The time when the request was made\npath: The requested url/path\nsuccess: The request status, which is always true\nmessage: The response message\ndata: The response data of shape TData, if any\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                data\n                            \n                            \n                                message\n                            \n                            \n                                path\n                            \n                            \n                                statusCode\n                            \n                            \n                                success\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial?: Partial>)\n                    \n                \n                        \n                            \n                                Defined in src/common/dto/responses/success-response.dto.ts:48\n                            \n                        \n\n                \n                    \n                            Instantiate a SuccessResponse.\n```ts\nnew SuccessResponse({\n   message: 'Success',\n   data: null\n})By most cases, the response only take two properties:\n- `message`: The message to be returned, if any\n- `data`: The data to be returned, if any\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial>\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The success response of TData to be returned\n\n                                                        \n                                                \n                                        \n                                    \n                                    Example :\n                                        \n                                            new SuccessResponse({\n   message: 'Success',\n   data: null\n})\n\n\n                                        \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TData | null | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/responses/success-response.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The response message', example: 'Success'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/responses/success-response.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The requested url/path', example: '/api/v1/auth/sign-in'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/responses/success-response.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The http status code', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/responses/success-response.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The request status', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/responses/success-response.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The time when the request was made', example: '2023-02-11T05:24:50.680Z'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/responses/success-response.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Defines the DTO that carries the success response.\n *\n * @usageNotes\n * The Success Response of TData contains user attribute:\n * - `statusCode`: The {@link HttpStatus} code\n * - `timestamp`: The time when the request was made\n * - `path`: The requested url/path\n * - `success`: The request status, which is always `true`\n * - `message`: The response message\n * - `data`: The response data of shape TData, if any\n */\nexport class SuccessResponse {\n  @ApiProperty({\n    description: 'The http status code',\n    example: HttpStatus.OK,\n  })\n  statusCode: HttpStatus;\n\n  @ApiProperty({\n    description: 'The time when the request was made',\n    example: '2023-02-11T05:24:50.680Z',\n  })\n  timestamp: string;\n\n  @ApiProperty({\n    description: 'The requested url/path',\n    example: '/api/v1/auth/sign-in',\n  })\n  path: string;\n\n  @ApiProperty({\n    description: 'The request status',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'The response message',\n    example: 'Success',\n  })\n  message: string;\n\n  // * @see {@link https://docs.nestjs.com/openapi/operations#advanced-generic-apiresponse}\n  data?: TData | null | undefined;\n\n  /**\n   * Instantiate a `SuccessResponse`.\n   *\n   * @example\n   * ```ts\n   * new SuccessResponse({\n   *    message: 'Success',\n   *    data: null\n   * })\n   * ```\n   *\n   * @usageNotes\n   * By most cases, the response only take two properties:\n   * - `message`: The message to be returned, if any\n   * - `data`: The data to be returned, if any\n   *\n   * @param partial The success response of TData to be returned\n   */\n  constructor(partial?: Partial>) {\n    Object.assign(this, partial);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nTasksService\n\nTasksService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/services/tasks/tasks.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Defines the tasks module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\n\n/**\n * Defines the tasks module.\n */\n@Module({\n  providers: [TasksService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/tasks/tasks.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the tasks service that responsible for all application tasks scheduling.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleCron\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleCron\n                        \n                    \n                \n            \n            \n                \nhandleCron()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_MINUTE)\n                \n            \n\n            \n                \n                    Defined in src/common/services/tasks/tasks.service.ts:15\n                \n            \n\n\n            \n                \n                    The handle cron method.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(TasksService.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/services/tasks/tasks.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\n\n/**\n * Defines the tasks service that responsible for all application tasks scheduling.\n */\n@Injectable()\nexport class TasksService {\n  private readonly logger = new Logger(TasksService.name);\n\n  /**\n   * The handle cron method.\n   */\n  @Cron(CronExpression.EVERY_MINUTE)\n  handleCron() {\n    this.logger.debug('Called every minute');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/timeout.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines interceptor for intercepting any incoming request that exceed the maximum allowed request time.\nThe maximum allowed request time could be configured in app.constant.ts APP_MAX_TIMEOUT.\nSee Interceptors\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/timeout.interceptor.ts:26\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The reflector to access the route's custom metadata\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/timeout.interceptor.ts:37\n                \n            \n\n\n            \n                \n                    {@inheritDoc NestInterceptor.intercept}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport {\n  Observable,\n  timeout,\n  catchError,\n  TimeoutError,\n  throwError,\n} from 'rxjs';\nimport { APP_MAX_TIMEOUT, NOT_TO_BE_TIMEOUTED_KEY } from '../constants';\nimport { RequestTimeoutException } from '../exceptions/request-timeout.exception';\n\n/**\n * Defines interceptor for intercepting any incoming request that exceed the maximum allowed request time.\n *\n * The maximum allowed request time could be configured in app.constant.ts {@link APP_MAX_TIMEOUT}.\n *\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\n */\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n  /**\n   * The constructor.\n   *\n   * @param reflector The reflector to access the route's custom metadata\n   */\n  constructor(private readonly reflector: Reflector) {}\n\n  /**\n   * {@inheritDoc NestInterceptor.intercept}\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    // * Get the not to be timeouted status meta data by the NOT_TO_BE_TIMEOUTED_KEY\n    const notToBeTimeouted = this.reflector.get(\n      NOT_TO_BE_TIMEOUTED_KEY,\n      context.getHandler(),\n    );\n\n    // * If the route handler not to be timeouted, then return to the next handle\n    if (notToBeTimeouted) {\n      return next.handle();\n    }\n\n    return next.handle().pipe(\n      timeout(APP_MAX_TIMEOUT),\n      catchError((err) => {\n        if (err instanceof TimeoutError) {\n          return throwError(() => new RequestTimeoutException());\n        }\n\n        return throwError(() => err);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimestampResponse.html":{"url":"classes/TimestampResponse.html","title":"class - TimestampResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimestampResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/responses/timestamp-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data representing timestamp of data.\nThe TimestampResponse contains timestamp attribute:\n\ncreatedAt: The creation time of data\nupdatedAt: The last updation time of data\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The creation time of data', example: '2023-02-11T05:24:50.680Z'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/responses/timestamp-response.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The last updation time of data', example: '2023-02-11T05:24:50.680Z'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/responses/timestamp-response.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Defines the DTO that carries data representing timestamp of data.\n *\n * @usageNotes\n * The TimestampResponse contains timestamp attribute:\n * - `createdAt`: The creation time of data\n * - `updatedAt`: The last updation time of data\n */\nexport class TimestampResponse {\n  @ApiProperty({\n    description: 'The creation time of data',\n    example: '2023-02-11T05:24:50.680Z',\n  })\n  createdAt: Date;\n\n  @ApiProperty({\n    description: 'The last updation time of data',\n    example: '2023-02-11T05:24:50.680Z',\n  })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth/interface/token-payload.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines token payload data interface.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  sub: string;\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TooManyRequestsErrorResponse.html":{"url":"classes/TooManyRequestsErrorResponse.html","title":"class - TooManyRequestsErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TooManyRequestsErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/responses/errors/too-many-requests-error-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data representing a too many requests error response.\nThe DTO extends ErrorResponse.\nThe TooManyRequestsResponse contains error attribute:\n\nstatusCode: The HttpStatus code\nerror: The application error code\n\n\n            \n\n            \n                Extends\n            \n            \n                        ErrorResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                statusCode\n                            \n                            \n                                help\n                            \n                            \n                                message\n                            \n                            \n                                path\n                            \n                            \n                                success\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ErrorCode\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The application error code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The http status code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:21\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        help\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The help message related to error', example: DEFAULT_HELP_MESSAGE})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:61\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string | ValidationErrors[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The response message', example: 'Error'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:49\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The requested url/path', example: '/api/v1/auth/sign-in'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The request status', example: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The time when the request was made', example: '2023-02-11T05:24:50.680Z'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:31\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { ErrorCode } from '../../../enums/http/error-code.enum';\nimport { ErrorResponse } from '../error-response.dto';\n\n/**\n * Defines the DTO that carries data representing a too many requests error response.\n *\n * @usageNotes\n * The DTO extends {@link ErrorResponse}.\n *\n * The TooManyRequestsResponse contains error attribute:\n * - `statusCode`: The {@link HttpStatus} code\n * - `error`: The application error code\n */\nexport class TooManyRequestsErrorResponse extends ErrorResponse {\n  @ApiProperty({\n    description: 'The http status code',\n    example: HttpStatus.TOO_MANY_REQUESTS,\n  })\n  statusCode: HttpStatus;\n\n  @ApiProperty({\n    description: 'The application error code',\n    example: ErrorCode.ErrorTooManyRequests,\n  })\n  error: ErrorCode;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TooManyRequestsException.html":{"url":"classes/TooManyRequestsException.html","title":"class - TooManyRequestsException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TooManyRequestsException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/too-many-requests.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines an HTTP exception for Too Many Requests type errors.\nSee Built-in HTTP exceptions\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errorResponse?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/too-many-requests.exception.ts:15\n                            \n                        \n\n                \n                    \n                            Instantiate an TooManyRequestsException Exception.\n`throw new TooManyRequestsException()`The HTTP response status code will be 429.\n\nThe errorResponse argument defines the JSON response body.\n\nBy default, the JSON response body contains three properties:\n\nmessage: the string DEFAULT_TOO_MANY_REQUESTS_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\nerror: the enum ErrorCode.ErrorTooManyRequests by default;\noverride this by supplying any value of ErrorCode in the errorResponse parameter.\nhelp: the string DEFAULT_HELP_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        errorResponse\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Object describing the error condition, if any\n\n                                                        \n                                                \n                                        \n                                    \n                                    Example :\n                                        \n                                            throw new TooManyRequestsException()\n\n                                        \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\nimport {\n  DEFAULT_HELP_MESSAGE,\n  DEFAULT_TOO_MANY_REQUESTS_MESSAGE,\n} from '../constants';\nimport { ErrorResponse } from '../dto/responses/error-response.dto';\nimport { ErrorCode } from '../enums/http/error-code.enum';\n\n/**\n * Defines an HTTP exception for *Too Many Requests* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n */\nexport class TooManyRequestsException extends HttpException {\n  /**\n   * Instantiate an `TooManyRequestsException` Exception.\n   *\n   * @example\n   * `throw new TooManyRequestsException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 429.\n   * - The `errorResponse` argument defines the JSON response body.\n   *\n   * By default, the JSON response body contains three properties:\n   * - `message`: the string {@link DEFAULT_TOO_MANY_REQUESTS_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   * - `error`: the enum {@link ErrorCode.ErrorTooManyRequests} by default;\n   * override this by supplying any value of `ErrorCode` in the errorResponse parameter.\n   * - `help`: the string {@link DEFAULT_HELP_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   *\n   * @param errorResponse Object describing the error condition, if any\n   */\n  constructor(errorResponse?: Partial) {\n    const httpStatus = HttpStatus.TOO_MANY_REQUESTS;\n    const response: ErrorResponse = new ErrorResponse({\n      message: errorResponse?.message ?? DEFAULT_TOO_MANY_REQUESTS_MESSAGE,\n      error: errorResponse?.error ?? ErrorCode.ErrorTooManyRequests,\n      help: errorResponse?.help ?? DEFAULT_HELP_MESSAGE,\n    });\n\n    super(\n      HttpException.createBody(response, response.error, httpStatus),\n      httpStatus,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Topic.html":{"url":"entities/Topic.html","title":"entity - Topic","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Topic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/topics/entities/topic.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the topic entity.\nThe topic entity contains attribute:\n\nid: The id of topic\nname: The name of topic\ncreatedAt: The creation time of topic\nupdatedAt: The last updation time of topic\nposts: The topic posts\n\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/topics/entities/topic.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/topics/entities/topic.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.topics)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/topics/entities/topic.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { GenericEntity } from '../../../common/entities/generic.entity';\nimport { Post } from '../../posts/entities/post.entity';\n\n/**\n * Defines the topic entity.\n *\n * @usageNotes\n * The topic entity contains attribute:\n * - `id`: The id of topic\n * - `name`: The name of topic\n * - `createdAt`: The creation time of topic\n * - `updatedAt`: The last updation time of topic\n * - `posts`: The topic posts\n */\n@Entity()\nexport class Topic extends GenericEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ unique: true })\n  name: string;\n\n  @ManyToMany(\n    /* istanbul ignore next */ () => Post,\n    /* istanbul ignore next */ (post: Post) => post.topics,\n  )\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TopicByIdHook.html":{"url":"injectables/TopicByIdHook.html","title":"injectable - TopicByIdHook","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TopicByIdHook\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/topics/permissions/hooks/topic-by-id.hook.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines subject hook for Topic subject.\nIt hooks the Topic subject by its identifier.\nFor permissions with conditions we need to provide subject hook in UseAccessControl decorator.\nSee Subject hook\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, topicsService: TopicsService)\n                    \n                \n                        \n                            \n                                Defined in src/services/topics/permissions/hooks/topic-by-id.hook.ts:17\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The pino logger\n\n                                                        \n                                                \n                                                \n                                                        topicsService\n                                                  \n                                                        \n                                                                        TopicsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The topics service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(undefined: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/services/topics/permissions/hooks/topic-by-id.hook.ts:38\n                \n            \n\n\n            \n                \n                    Run TopicByIdHook.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The topic if it exists, otherwise undefined\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Request, SubjectBeforeFilterHook } from 'nest-casl';\nimport { PinoLogger } from 'nestjs-pino';\nimport { Topic } from '../../entities/topic.entity';\nimport { TopicsService } from '../../topics.service';\n\n/**\n * Defines subject hook for {@link Topic} subject.\n * It hooks the {@link Topic} subject by its identifier.\n *\n * @usageNotes\n * For permissions with conditions we need to provide subject hook in {@link UseAccessControl} decorator.\n *\n * @see [Subject hook](https://github.com/getjerry/nest-casl#subject-hook)\n */\n@Injectable()\nexport class TopicByIdHook implements SubjectBeforeFilterHook {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param topicsService The topics service\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    private readonly topicsService: TopicsService,\n  ) {\n    this.logger.setContext(TopicByIdHook.name);\n  }\n\n  /**\n   * Run {@link TopicByIdHook}.\n   *\n   * @param params The request parameter\n   *\n   * @returns The topic if it exists, otherwise undefined\n   */\n  async run({ params }: Request): Promise {\n    this.logger.info(`Try to call ${TopicByIdHook.prototype.run.name}`);\n\n    return (await this.topicsService.findById(params.id)) ?? undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TopicByIdPipe.html":{"url":"injectables/TopicByIdPipe.html","title":"injectable - TopicByIdPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TopicByIdPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/topics/pipes/topic-by-id.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Class defining the implementation of a pipe that parse string UUID value\nand return the promise of topic entity of related identifier value.\nThe transform method will throw UnprocessableEntityException, if fail to validate the string UUID value.\nAlso the transform method will throw NotFoundException, if fail to parse the topic entity from the parsed string UUID topic identifier value.\nSee Pipes\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, topicsService: TopicsService)\n                    \n                \n                        \n                            \n                                Defined in src/services/topics/pipes/topic-by-id.pipe.ts:21\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The pino logger\n\n                                                        \n                                                \n                                                \n                                                        topicsService\n                                                  \n                                                        \n                                                                        TopicsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The topics service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/services/topics/pipes/topic-by-id.pipe.ts:39\n                \n            \n\n\n            \n                \n                    {@inheritDoc PipeTransform.transform}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, PipeTransform, ArgumentMetadata } from '@nestjs/common';\nimport { isUUID } from 'class-validator';\nimport { PinoLogger } from 'nestjs-pino';\nimport { NotFoundException } from '../../../common/exceptions/not-found.exception';\nimport { UnprocessableEntityException } from '../../../common/exceptions/unprocessable-entity.exception';\nimport { Topic } from '../entities/topic.entity';\nimport { TopicsService } from '../topics.service';\n\n/**\n * Class defining the implementation of a pipe that parse string UUID value\n * and return the promise of topic entity of related identifier value.\n *\n * @usageNotes\n * The transform method will throw {@link UnprocessableEntityException}, if fail to validate the string UUID value.\n *\n * Also the transform method will throw {@link NotFoundException}, if fail to parse the topic entity from the parsed string UUID topic identifier value.\n *\n * @see [Pipes](https://docs.nestjs.com/pipes)\n */\n@Injectable()\nexport class TopicByIdPipe implements PipeTransform> {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param topicsService The topics service\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    private readonly topicsService: TopicsService,\n  ) {\n    this.logger.setContext(TopicByIdPipe.name);\n  }\n\n  /**\n   * {@inheritDoc PipeTransform.transform}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async transform(value: string, metadata: ArgumentMetadata): Promise {\n    this.logger.info(`Try to call ${TopicByIdPipe.prototype.transform.name}`);\n\n    if (!isUUID(value, '4')) {\n      throw new UnprocessableEntityException({\n        message: 'The given value is not a valid UUID',\n      });\n    }\n\n    const topic = await this.topicsService.findById(value);\n\n    if (topic === null) {\n      throw new NotFoundException({\n        message: 'Topic not found',\n      });\n    }\n\n    return topic;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TopicIdParam.html":{"url":"classes/TopicIdParam.html","title":"class - TopicIdParam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TopicIdParam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/topics/dto/params/topic-id.param.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries the topic identifier request parameter.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsUUID('4')@IsTopicExist()@ApiProperty({description: 'The id of topic', format: 'uuid', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/topics/dto/params/topic-id.param.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsUUID } from 'class-validator';\nimport { topicsData } from '../../../../database/data/topics.data';\nimport { IsTopicExist } from '../../validators/is-topic-exist.validator';\n\n/**\n * Defines the DTO that carries the topic identifier request parameter.\n */\nexport class TopicIdParam {\n  @IsNotEmpty()\n  @IsUUID('4')\n  @IsTopicExist()\n  @ApiProperty({\n    description: 'The id of topic',\n    format: 'uuid',\n    example: topicsData[0].id,\n  })\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TopicResponse.html":{"url":"classes/TopicResponse.html","title":"class - TopicResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TopicResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/topics/dto/responses/topic-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data representing a topic.\nThe DTO intersect TopicIdParam with TimestampResponse.\nThe TopicResponse also contains topic attribute:\n\nname: The name of topic\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of topic', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/topics/dto/responses/topic-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, IntersectionType } from '@nestjs/swagger';\nimport { TimestampResponse } from '../../../../common/dto/responses/timestamp-response.dto';\nimport { topicsData } from '../../../../database/data/topics.data';\nimport { TopicIdParam } from '../params/topic-id.param';\n\n/**\n * Defines the DTO that carries data representing a topic.\n *\n * @usageNotes\n * The DTO intersect {@link TopicIdParam} with {@link TimestampResponse}.\n *\n * The TopicResponse also contains topic attribute:\n * - `name`: The name of topic\n */\nexport class TopicResponse extends IntersectionType(\n  TopicIdParam,\n  TimestampResponse,\n) {\n  @ApiProperty({\n    description: 'The name of topic',\n    example: topicsData[0].name,\n  })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TopicSeeder.html":{"url":"classes/TopicSeeder.html","title":"class - TopicSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TopicSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/seeds/topic.seeder.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines Topic entity seeder.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(dataSource: DataSource)\n                \n            \n\n\n            \n                \n                    Defined in src/database/seeds/topic.seeder.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSource\n                                    \n                                            DataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Seeder } from 'typeorm-extension';\nimport { DataSource } from 'typeorm';\nimport { Topic } from '../../services/topics/entities/topic.entity';\nimport { topicsData } from '../data/topics.data';\n\n/**\n * Defines {@link Topic} entity seeder.\n */\nexport default class TopicSeeder implements Seeder {\n  async run(dataSource: DataSource): Promise {\n    await dataSource\n      .createQueryBuilder()\n      .insert()\n      .into(Topic)\n      .values([...topicsData])\n      .orIgnore()\n      .execute();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TopicsController.html":{"url":"controllers/TopicsController.html","title":"controller - TopicsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TopicsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/topics/topics.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Defines the topics controller.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTopic\n                            \n                            \n                                    Async\n                                deleteTopic\n                            \n                            \n                                    Async\n                                findAllTopics\n                            \n                            \n                                    Async\n                                findTopicById\n                            \n                            \n                                    Async\n                                updateTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTopic\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTopic(createTopicRequest: CreateTopicRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseAccessControl(TopicActions.Create, Topic)@ApiBearerAuth()@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/topics/topics.controller.ts:81\n                \n            \n\n\n            \n                \n                    Create a topic endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createTopicRequest\n                                    \n                                                CreateTopicRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The DTO that carries data to create a topic\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        The success response with 'Topic created' message and created topic data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTopic\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTopic(undefined: Topic)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseAccessControl(TopicActions.Delete, Topic)@ApiBearerAuth()@ApiUuidParam({name: 'id', description: 'The id of topic'})@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/topics/topics.controller.ts:259\n                \n            \n\n\n            \n                \n                    Delete a topic by a given id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                Topic\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The success response with 'Topic deleted' message.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllTopics\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTopics()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseAccessControl(TopicActions.ReadAll, Topic)@ApiBearerAuth()@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/topics/topics.controller.ts:124\n                \n            \n\n\n            \n                \n                    Get all topics endpoint.\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        The success response with 'Topics retrieved' message and topics data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTopicById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTopicById(topic: Topic)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseAccessControl(TopicActions.ReadById, Topic)@ApiBearerAuth()@ApiUuidParam({name: 'id', description: 'The id of topic'})@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/topics/topics.controller.ts:167\n                \n            \n\n\n            \n                \n                    Get a topic by a given id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    topic\n                                    \n                                                Topic\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The specified topic to get\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        The success response with 'Topic retrieved' message and a topic data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateTopic\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTopic(undefined: Topic, updateTopicRequest: UpdateTopicRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@UseAccessControl(TopicActions.Update, Topic)@ApiBearerAuth()@ApiUuidParam({name: 'id', description: 'The id of topic'})@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/topics/topics.controller.ts:207\n                \n            \n\n\n            \n                \n                    Update a topic by a given id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    \n                                                Topic\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    updateTopicRequest\n                                    \n                                                UpdateTopicRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The DTO that carries data to update a topic\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The success response with 'Topic updated' message.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { PinoLogger } from 'nestjs-pino';\nimport { APP_VERSION } from '../../common/constants';\nimport { ApiErrorsResponse } from '../../common/decorators/open-api/api-errors-response.decorator';\nimport { ApiSuccessesResponse } from '../../common/decorators/open-api/api-successes-response.decorator';\nimport { ApiConflictErrorResponse } from '../../common/decorators/open-api/errors/api-conflict-error-response.decorator';\nimport { ApiForbiddenErrorResponse } from '../../common/decorators/open-api/errors/api-forbidden-error-response.decorator';\nimport { ApiNotFoundErrorResponse } from '../../common/decorators/open-api/errors/api-not-found-error-response.decorator';\nimport { ApiUnauthorizedErrorResponse } from '../../common/decorators/open-api/errors/api-unauthorized-error-response.decorator';\nimport { ApiUnprocessableEntityErrorResponse } from '../../common/decorators/open-api/errors/api-unprocessable-entity-error-response.decorator';\nimport { ApiUuidParam } from '../../common/decorators/open-api/params/api-uuid-param.decorator';\nimport { ApiCreatedSuccessResponse } from '../../common/decorators/open-api/successes/api-created-success-response.decorator';\nimport { ApiOkSuccessResponse } from '../../common/decorators/open-api/successes/api-ok-success-response.decorator';\nimport { SuccessResponse } from '../../common/dto/responses/success-response.dto';\nimport { ConflictException } from '../../common/exceptions/conflict.exception';\nimport { InternalServerErrorException } from '../../common/exceptions/internal-server-error.exception';\nimport { UseAccessControl } from '../auth/decorators/use-access-control.decorator';\nimport { CreateTopicRequest } from './dto/requests/create-topic-request.dto';\nimport { UpdateTopicRequest } from './dto/requests/update-topic-request.dto';\nimport { TopicResponse } from './dto/responses/topic-response.dto';\nimport { Topic } from './entities/topic.entity';\nimport { TopicActions } from './permissions/topic.permissions';\nimport { TopicByIdPipe } from './pipes/topic-by-id.pipe';\nimport { TopicsService } from './topics.service';\n\n/**\n * Defines the topics controller.\n */\n@Controller({\n  path: 'topics',\n  version: APP_VERSION,\n})\n@ApiTags('Topics')\nexport class TopicsController {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param topicsService The topics service\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    private readonly topicsService: TopicsService,\n  ) {\n    this.logger.setContext(TopicsController.name);\n  }\n\n  /**\n   * Create a topic endpoint.\n   *\n   * @param createTopicRequest The DTO that carries data to create a topic\n   *\n   * @returns The success response with `'Topic created'` message and created `topic` data.\n   */\n  @Post()\n  @UseAccessControl(TopicActions.Create, Topic)\n  @ApiBearerAuth()\n  @ApiSuccessesResponse([\n    {\n      response: ApiCreatedSuccessResponse,\n      options: {\n        model: TopicResponse,\n        options: { description: 'Topic created' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiUnprocessableEntityErrorResponse },\n  ])\n  async createTopic(\n    @Body() createTopicRequest: CreateTopicRequest,\n  ): Promise> {\n    this.logger.info(\n      `Try to call ${TopicsController.prototype.createTopic.name}`,\n    );\n\n    try {\n      return new SuccessResponse({\n        message: 'Topic created',\n        data: await this.topicsService.create(\n          CreateTopicRequest.toEntity(createTopicRequest),\n        ),\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Get all topics endpoint.\n   *\n   * @returns The success response with `'Topics retrieved'` message and `topics` data.\n   */\n  @Get()\n  @UseAccessControl(TopicActions.ReadAll, Topic)\n  @ApiBearerAuth()\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        model: TopicResponse,\n        isArray: true,\n        options: { description: 'Topics retrieved' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n  ])\n  async findAllTopics(): Promise> {\n    this.logger.info(\n      `Try to call ${TopicsController.prototype.findAllTopics.name}`,\n    );\n\n    try {\n      return new SuccessResponse({\n        message: 'Topics retrieved',\n        data: await this.topicsService.findAll(),\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Get a topic by a given id endpoint.\n   *\n   * @param topic The specified topic to get\n   *\n   * @returns The success response with `'Topic retrieved'` message and a `topic` data.\n   */\n  @Get(':id')\n  @UseAccessControl(TopicActions.ReadById, Topic)\n  @ApiBearerAuth()\n  @ApiUuidParam({ name: 'id', description: 'The id of topic' })\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        model: TopicResponse,\n        options: { description: 'Topic retrieved' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiNotFoundErrorResponse },\n    { response: ApiUnprocessableEntityErrorResponse },\n  ])\n  async findTopicById(\n    @Param('id', TopicByIdPipe) topic: Topic,\n  ): Promise> {\n    this.logger.info(\n      `Try to call ${TopicsController.prototype.findTopicById.name}`,\n    );\n\n    return new SuccessResponse({\n      message: 'Topic retrieved',\n      data: topic,\n    });\n  }\n\n  /**\n   * Update a topic by a given id endpoint.\n   *\n   * @param id The specified topic id to update\n   * @param updateTopicRequest The DTO that carries data to update a topic\n   *\n   * @returns The success response with `'Topic updated'` message.\n   */\n  @Put(':id')\n  @UseAccessControl(TopicActions.Update, Topic)\n  @ApiBearerAuth()\n  @ApiUuidParam({ name: 'id', description: 'The id of topic' })\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        options: { description: 'Topic updated' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiNotFoundErrorResponse },\n    { response: ApiConflictErrorResponse },\n    { response: ApiUnprocessableEntityErrorResponse },\n  ])\n  async updateTopic(\n    @Param('id', TopicByIdPipe) { id }: Topic,\n    @Body() updateTopicRequest: UpdateTopicRequest,\n  ): Promise {\n    this.logger.info(\n      `Try to call ${TopicsController.prototype.updateTopic.name}`,\n    );\n\n    if (id !== updateTopicRequest.id) {\n      throw new ConflictException({ message: `Inconsistent topic id` });\n    }\n\n    try {\n      await this.topicsService.update(\n        id,\n        UpdateTopicRequest.toEntity(updateTopicRequest),\n      );\n\n      return new SuccessResponse({\n        message: 'Topic updated',\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Delete a topic by a given id endpoint.\n   *\n   * @param id The specified topic id to delete\n   *\n   * @returns The success response with `'Topic deleted'` message.\n   */\n  @Delete(':id')\n  @UseAccessControl(TopicActions.Delete, Topic)\n  @ApiBearerAuth()\n  @ApiUuidParam({ name: 'id', description: 'The id of topic' })\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        options: { description: 'Topic deleted' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiNotFoundErrorResponse },\n  ])\n  async deleteTopic(\n    @Param('id', TopicByIdPipe) { id }: Topic,\n  ): Promise {\n    this.logger.info(\n      `Try to call ${TopicsController.prototype.deleteTopic.name}`,\n    );\n\n    try {\n      await this.topicsService.delete(id);\n\n      return new SuccessResponse({\n        message: 'Topic deleted',\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TopicsModule.html":{"url":"modules/TopicsModule.html","title":"module - TopicsModule","body":"\n                   \n\n\n\n\n    Modules\n    TopicsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TopicsModule\n\n\n\ncluster_TopicsModule_exports\n\n\n\ncluster_TopicsModule_providers\n\n\n\n\nTopicsService \n\nTopicsService \n\n\n\nTopicsModule\n\nTopicsModule\n\nTopicsService  -->\n\nTopicsModule->TopicsService \n\n\n\n\n\nIsNameUniqueValidator\n\nIsNameUniqueValidator\n\nTopicsModule -->\n\nIsNameUniqueValidator->TopicsModule\n\n\n\n\n\nIsTopicExistValidator\n\nIsTopicExistValidator\n\nTopicsModule -->\n\nIsTopicExistValidator->TopicsModule\n\n\n\n\n\nTopicByIdPipe\n\nTopicByIdPipe\n\nTopicsModule -->\n\nTopicByIdPipe->TopicsModule\n\n\n\n\n\nTopicsService\n\nTopicsService\n\nTopicsModule -->\n\nTopicsService->TopicsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/topics/topics.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Defines the topics module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IsNameUniqueValidator\n                        \n                        \n                            IsTopicExistValidator\n                        \n                        \n                            TopicByIdPipe\n                        \n                        \n                            TopicsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TopicsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TopicsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CaslModule } from 'nest-casl';\nimport { Topic } from './entities/topic.entity';\nimport { TopicPermissions } from './permissions/topic.permissions';\nimport { TopicByIdPipe } from './pipes/topic-by-id.pipe';\nimport { TopicsController } from './topics.controller';\nimport { TopicsService } from './topics.service';\nimport { IsNameUniqueValidator } from './validators/is-name-unique.validator';\nimport { IsTopicExistValidator } from './validators/is-topic-exist.validator';\n\n/**\n * Defines the topics module.\n */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Topic]),\n    CaslModule.forFeature({ permissions: TopicPermissions }),\n  ],\n  providers: [\n    TopicsService,\n    TopicByIdPipe,\n\n    IsTopicExistValidator,\n    IsNameUniqueValidator,\n  ],\n  controllers: [TopicsController],\n  exports: [TopicsService],\n})\nexport class TopicsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TopicsService.html":{"url":"injectables/TopicsService.html","title":"injectable - TopicsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TopicsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/topics/topics.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the topics service that responsible for data storage and retrieval for topic related entity.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByIds\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, topicsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/services/topics/topics.service.ts:12\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The pino logger\n\n                                                        \n                                                \n                                                \n                                                        topicsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The repository of topic entity\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(topic: Topic)\n                \n            \n\n\n            \n                \n                    Defined in src/services/topics/topics.service.ts:34\n                \n            \n\n\n            \n                \n                    Creates a topic.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    topic\n                                    \n                                                Topic\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A topic to create\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created topic.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/topics/topics.service.ts:125\n                \n            \n\n\n            \n                \n                    Deletes a topic by a given id.\nReturn true if the delete process is success, otherwise false.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the delete process is success or not.\nReturn true if the delete process is success, otherwise false.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/services/topics/topics.service.ts:49\n                \n            \n\n\n            \n                \n                    Gets all topics.\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The topics array.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/topics/topics.service.ts:77\n                \n            \n\n\n            \n                \n                    Gets a topic by a given id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The topic if it exists, otherwise null.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIds(ids: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/services/topics/topics.service.ts:62\n                \n            \n\n\n            \n                \n                    Get topics by a given ids.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ids to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The topics array.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/topics/topics.service.ts:92\n                \n            \n\n\n            \n                \n                    Gets a topic by a given name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The topic if it exists, otherwise null.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, topic: Topic)\n                \n            \n\n\n            \n                \n                    Defined in src/services/topics/topics.service.ts:109\n                \n            \n\n\n            \n                \n                    Updates a topic by a given id.\nReturn true if the update process is success, otherwise false.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The topic id to update\n\n                                    \n                                \n                                \n                                    topic\n                                    \n                                                Topic\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The topic to update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the update process is success or not.\nReturn true if the update process is success, otherwise false.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PinoLogger } from 'nestjs-pino';\nimport { In, Repository } from 'typeorm';\nimport { Topic } from './entities/topic.entity';\n\n// * Service will be responsible for data storage and retrieval\n/**\n * Defines the topics service that responsible for data storage and retrieval for topic related entity.\n */\n@Injectable()\nexport class TopicsService {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param topicsRepository The repository of topic entity\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    @InjectRepository(Topic)\n    private readonly topicsRepository: Repository,\n  ) {\n    this.logger.setContext(TopicsService.name);\n  }\n\n  /**\n   * Creates a topic.\n   *\n   * @param topic A topic to create\n   *\n   * @returns The created topic.\n   */\n  async create(topic: Topic): Promise {\n    this.logger.info(`Try to call ${TopicsService.prototype.create.name}`);\n\n    const createdTopic = this.topicsRepository.create(topic);\n\n    await this.topicsRepository.save(createdTopic);\n\n    return createdTopic;\n  }\n\n  /**\n   * Gets all topics.\n   *\n   * @returns The topics array.\n   */\n  async findAll(): Promise {\n    this.logger.info(`Try to call ${TopicsService.prototype.findAll.name}`);\n\n    return await this.topicsRepository.find();\n  }\n\n  /**\n   * Get topics by a given ids.\n   *\n   * @param ids The ids to find\n   *\n   * @returns The topics array.\n   */\n  async findByIds(ids: string[]): Promise {\n    this.logger.info(`Try to call ${TopicsService.prototype.findByIds.name}`);\n\n    return await this.topicsRepository.find({\n      where: { id: In(ids) },\n    });\n  }\n\n  /**\n   * Gets a topic by a given id.\n   *\n   * @param id The id to find\n   *\n   * @returns The topic if it exists, otherwise null.\n   */\n  async findById(id: string): Promise {\n    this.logger.info(`Try to call ${TopicsService.prototype.findById.name}`);\n\n    return await this.topicsRepository.findOne({\n      where: { id },\n    });\n  }\n\n  /**\n   * Gets a topic by a given name.\n   *\n   * @param name The name to find\n   *\n   * @returns The topic if it exists, otherwise null.\n   */\n  async findByName(name: string): Promise {\n    this.logger.info(`Try to call ${TopicsService.prototype.findByName.name}`);\n\n    return await this.topicsRepository.findOne({\n      where: { name },\n    });\n  }\n\n  /**\n   * Updates a topic by a given id.\n   *\n   * @param id The topic id to update\n   * @param topic The topic to update\n   *\n   * @returns The flag indicates whether the update process is success or not.\n   * Return `true` if the update process is success, otherwise `false`.\n   */\n  async update(id: string, topic: Topic): Promise {\n    this.logger.info(`Try to call ${TopicsService.prototype.update.name}`);\n\n    await this.topicsRepository.update(id, topic);\n\n    return true;\n  }\n\n  /**\n   * Deletes a topic by a given id.\n   *\n   * @param id The id to find\n   *\n   * @returns The flag indicates whether the delete process is success or not.\n   * Return `true` if the delete process is success, otherwise `false`.\n   */\n  async delete(id: string): Promise {\n    this.logger.info(`Try to call ${TopicsService.prototype.delete.name}`);\n\n    await this.topicsRepository.delete(id);\n\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines interceptor for intercepting the outgoing response.\nThis interceptor transform outgoing response to the shape of BaseResponse merged with SuccessResponse.\nAny error response would be catch by HttpExceptionFilter.\nHence, this interceptor just transform outgoing success response.\nSee Interceptors\nSee Exception Filters\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/transform.interceptor.ts:34\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The reflector to access the route's custom metadata\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/transform.interceptor.ts:45\n                \n            \n\n\n            \n                \n                    {@inheritDoc NestInterceptor.intercept}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable, map } from 'rxjs';\nimport { NOT_TO_BE_TRANSFORMED_KEY } from '../constants';\nimport { SuccessResponse } from '../dto/responses/success-response.dto';\n\n/**\n * Defines default response.\n */\nexport interface Response {\n  data: T;\n}\n\n/**\n * Defines interceptor for intercepting the outgoing response.\n *\n * This interceptor transform outgoing response to the shape of {@link BaseResponse} merged with SuccessResponse.\n *\n * @usageNotes\n * Any error response would be catch by `HttpExceptionFilter`.\n * Hence, this interceptor just transform outgoing success response.\n *\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\n * @see [Exception Filters](https://docs.nestjs.com/exception-filters)\n */\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  /**\n   * The constructor.\n   *\n   * @param reflector The reflector to access the route's custom metadata\n   */\n  constructor(private readonly reflector: Reflector) {}\n\n  /**\n   * {@inheritDoc NestInterceptor.intercept}\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    // * Get the not to be transformed status meta data by the NOT_TO_BE_TRANSFORMED_KEY\n    const notToBeTransformedMetadata = this.reflector.get(\n      NOT_TO_BE_TRANSFORMED_KEY,\n      context.getHandler(),\n    );\n\n    // * If the route handler not to be transformed, then return to the next handle\n    if (notToBeTransformedMetadata) {\n      return next.handle();\n    }\n\n    const ctx = context.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n    const httpStatus = response.statusCode;\n\n    const baseResponseBody = new SuccessResponse({\n      statusCode: httpStatus,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      success: true,\n      message: 'Success',\n    });\n\n    return next.handle().pipe(\n      map((responseBody) => ({\n        ...baseResponseBody,\n        ...responseBody,\n        message: responseBody?.message ?? baseResponseBody.message,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnauthorizedErrorResponse.html":{"url":"classes/UnauthorizedErrorResponse.html","title":"class - UnauthorizedErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnauthorizedErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/responses/errors/unauthorized-error-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data representing an unauthorized error response.\nThe DTO extends ErrorResponse.\nThe UnauthorizedErrorResponse contains error attribute:\n\nstatusCode: The HttpStatus code\nerror: The application error code\n\n\n            \n\n            \n                Extends\n            \n            \n                        ErrorResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                statusCode\n                            \n                            \n                                help\n                            \n                            \n                                message\n                            \n                            \n                                path\n                            \n                            \n                                success\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ErrorCode\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The application error code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The http status code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:21\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        help\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The help message related to error', example: DEFAULT_HELP_MESSAGE})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:61\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string | ValidationErrors[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The response message', example: 'Error'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:49\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The requested url/path', example: '/api/v1/auth/sign-in'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The request status', example: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The time when the request was made', example: '2023-02-11T05:24:50.680Z'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:31\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { ErrorCode } from '../../../enums/http/error-code.enum';\nimport { ErrorResponse } from '../error-response.dto';\n\n/**\n * Defines the DTO that carries data representing an unauthorized error response.\n *\n * @usageNotes\n * The DTO extends {@link ErrorResponse}.\n *\n * The UnauthorizedErrorResponse contains error attribute:\n * - `statusCode`: The {@link HttpStatus} code\n * - `error`: The application error code\n */\nexport class UnauthorizedErrorResponse extends ErrorResponse {\n  @ApiProperty({\n    description: 'The http status code',\n    example: HttpStatus.UNAUTHORIZED,\n  })\n  statusCode: HttpStatus;\n\n  @ApiProperty({\n    description: 'The application error code',\n    example: ErrorCode.ErrorUnauthorized,\n  })\n  error: ErrorCode;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnauthorizedException.html":{"url":"classes/UnauthorizedException.html","title":"class - UnauthorizedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnauthorizedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/unauthorized.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines an HTTP exception for Unauthorized type errors.\nSee Built-in HTTP exceptions\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errorResponse?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/unauthorized.exception.ts:14\n                            \n                        \n\n                \n                    \n                            Instantiate an UnauthorizedException Exception.\n`throw new UnauthorizedException()`The HTTP response status code will be 401.\n\nThe errorResponse argument defines the JSON response body.\n\nBy default, the JSON response body contains three properties:\n\nmessage: the string DEFAULT_UNAUTHORIZED_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\nerror: the enum ErrorCode.ErrorUnauthorized by default;\noverride this by supplying any value of ErrorCode in the errorResponse parameter.\nhelp: the string DEFAULT_HELP_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        errorResponse\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Object describing the error condition, if any\n\n                                                        \n                                                \n                                        \n                                    \n                                    Example :\n                                        \n                                            throw new UnauthorizedException()\n\n                                        \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\nimport {\n  DEFAULT_HELP_MESSAGE,\n  DEFAULT_UNAUTHORIZED_MESSAGE,\n} from '../constants';\nimport { ErrorResponse } from '../dto/responses/error-response.dto';\nimport { ErrorCode } from '../enums/http/error-code.enum';\n\n/**\n * Defines an HTTP exception for *Unauthorized* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n */\nexport class UnauthorizedException extends HttpException {\n  /**\n   * Instantiate an `UnauthorizedException` Exception.\n   *\n   * @example\n   * `throw new UnauthorizedException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 401.\n   * - The `errorResponse` argument defines the JSON response body.\n   *\n   * By default, the JSON response body contains three properties:\n   * - `message`: the string {@link DEFAULT_UNAUTHORIZED_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   * - `error`: the enum {@link ErrorCode.ErrorUnauthorized} by default;\n   * override this by supplying any value of `ErrorCode` in the errorResponse parameter.\n   * - `help`: the string {@link DEFAULT_HELP_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   *\n   * @param errorResponse Object describing the error condition, if any\n   */\n  constructor(errorResponse?: Partial) {\n    const httpStatus = HttpStatus.UNAUTHORIZED;\n    const response: ErrorResponse = new ErrorResponse({\n      message: errorResponse?.message ?? DEFAULT_UNAUTHORIZED_MESSAGE,\n      error: errorResponse?.error ?? ErrorCode.ErrorUnauthorized,\n      help: errorResponse?.help ?? DEFAULT_HELP_MESSAGE,\n    });\n\n    super(\n      HttpException.createBody(response, response.error, httpStatus),\n      httpStatus,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnprocessableEntityErrorResponse.html":{"url":"classes/UnprocessableEntityErrorResponse.html","title":"class - UnprocessableEntityErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnprocessableEntityErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/responses/errors/unprocessable-entity-error-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data representing an unprocessable entity error response.\nThe DTO extends ErrorResponse.\nThe UnprocessableEntityErrorResponse contains error attribute:\n\nstatusCode: The HttpStatus code\nerror: The application error code\n\n\n            \n\n            \n                Extends\n            \n            \n                        ErrorResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                statusCode\n                            \n                            \n                                help\n                            \n                            \n                                message\n                            \n                            \n                                path\n                            \n                            \n                                success\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ErrorCode\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The application error code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The http status code', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:21\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        help\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The help message related to error', example: DEFAULT_HELP_MESSAGE})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:61\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string | ValidationErrors[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The response message', example: 'Error'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:49\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The requested url/path', example: '/api/v1/auth/sign-in'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The request status', example: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The time when the request was made', example: '2023-02-11T05:24:50.680Z'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ErrorResponse\n\n                            \n                        \n                    \n                        \n                                Defined in         ErrorResponse:31\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { ErrorCode } from '../../../enums/http/error-code.enum';\nimport { ErrorResponse } from '../error-response.dto';\n\n/**\n * Defines the DTO that carries data representing an unprocessable entity error response.\n *\n * @usageNotes\n * The DTO extends {@link ErrorResponse}.\n *\n * The UnprocessableEntityErrorResponse contains error attribute:\n * - `statusCode`: The {@link HttpStatus} code\n * - `error`: The application error code\n */\nexport class UnprocessableEntityErrorResponse extends ErrorResponse {\n  @ApiProperty({\n    description: 'The http status code',\n    example: HttpStatus.UNPROCESSABLE_ENTITY,\n  })\n  statusCode: HttpStatus;\n\n  @ApiProperty({\n    description: 'The application error code',\n    example: ErrorCode.ErrorUnprocessableEntity,\n  })\n  error: ErrorCode;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnprocessableEntityException.html":{"url":"classes/UnprocessableEntityException.html","title":"class - UnprocessableEntityException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnprocessableEntityException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/unprocessable-entity.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines an HTTP exception for Unprocessable Entity type errors.\nSee Built-in HTTP exceptions\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errorResponse?: Partial, errors?: ValidationError[])\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/unprocessable-entity.exception.ts:16\n                            \n                        \n\n                \n                    \n                            Instantiate an UnprocessableEntityException Exception.\n`throw new UnprocessableEntityException()`The HTTP response status code will be 422.\n\nThe errorResponse argument defines the JSON response body.\nThe errors argument defines validation error.\n\nBy default, the JSON response body contains three properties:\n\nmessage: the string DEFAULT_UNPROCESSABLE_ENTITY_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\nerror: the enum ErrorCode.ErrorUnprocessableEntity by default;\noverride this by supplying any value of ErrorCode in the errorResponse parameter.\nhelp: the string DEFAULT_HELP_MESSAGE by default;\noverride this by supplying a string in the errorResponse parameter.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        errorResponse\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Object describing the error condition, if any\n\n                                                        \n                                                \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                    ValidationError[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Object describing error validation, if any\n\n                                                        \n                                                \n                                        \n                                    \n                                    Example :\n                                        \n                                            throw new UnprocessableEntityException()\n\n                                        \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport {\n  DEFAULT_HELP_MESSAGE,\n  DEFAULT_UNPROCESSABLE_ENTITY_MESSAGE,\n} from '../constants';\nimport { ErrorCode } from '../enums/http/error-code.enum';\nimport { ValidationErrors } from '../interfaces/http/validation-errors.interface';\nimport { ErrorResponse } from '../dto/responses/error-response.dto';\n\n/**\n * Defines an HTTP exception for *Unprocessable Entity* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n */\nexport class UnprocessableEntityException extends HttpException {\n  /**\n   * Instantiate an `UnprocessableEntityException` Exception.\n   *\n   * @example\n   * `throw new UnprocessableEntityException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 422.\n   * - The `errorResponse` argument defines the JSON response body.\n   * - The `errors` argument defines validation error.\n   *\n   * By default, the JSON response body contains three properties:\n   * - `message`: the string {@link DEFAULT_UNPROCESSABLE_ENTITY_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   * - `error`: the enum {@link ErrorCode.ErrorUnprocessableEntity} by default;\n   * override this by supplying any value of `ErrorCode` in the errorResponse parameter.\n   * - `help`: the string {@link DEFAULT_HELP_MESSAGE} by default;\n   * override this by supplying a string in the errorResponse parameter.\n   *\n   * @param errorResponse Object describing the error condition, if any\n   * @param errors Object describing error validation, if any\n   */\n  constructor(\n    errorResponse?: Partial,\n    errors?: ValidationError[],\n  ) {\n    const httpStatus = HttpStatus.UNPROCESSABLE_ENTITY;\n    const response: ErrorResponse = new ErrorResponse({\n      message:\n        errorResponse?.message ??\n        (errors\n          ? mapChildrenToValidationErrorResponses(errors)\n          : DEFAULT_UNPROCESSABLE_ENTITY_MESSAGE),\n      error: errorResponse?.error ?? ErrorCode.ErrorUnprocessableEntity,\n      help: errorResponse?.help ?? DEFAULT_HELP_MESSAGE,\n    });\n\n    super(\n      HttpException.createBody(response, response.error, httpStatus),\n      httpStatus,\n    );\n  }\n}\n\n/**\n * Maps an array of validation error to array of validation error response.\n * This function maps the nested `children` `constraints` value.\n *\n * @param errors The validation error to map\n *\n * @returns The array of validation error response.\n */\nconst mapChildrenToValidationErrorResponses = (\n  errors: ValidationError[],\n): ValidationErrors[] => {\n  return errors.map((error) => ({\n    property: error.property,\n    constraints:\n      Array.isArray(error.children) && error.children.length > 0\n        ? mapChildrenToValidationErrorResponses(error.children)\n        : Object.values(error.constraints ?? []),\n  }));\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostRequest.html":{"url":"classes/UpdatePostRequest.html","title":"class - UpdatePostRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/posts/dto/requests/update-post-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data to update a post.\nThis DTO intersect PostIdParam with CreatePostRequest with omitted topicIds attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                toEntity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        toEntity\n                        \n                    \n                \n            \n            \n                \n                    \n                    toEntity(request: UpdatePostRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/services/posts/dto/requests/update-post-request.dto.ts:23\n                \n            \n\n\n            \n                \n                    Transform the DTO into the related entity.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                UpdatePostRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request DTO to transform\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Post\n\n                    \n                    \n                        The Post entity\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType, OmitType } from '@nestjs/swagger';\nimport { Post } from '../../entities/post.entity';\nimport { PostIdParam } from '../params/post-id.param.dto';\nimport { CreatePostRequest } from './create-post-request.dto';\n\n/**\n * Defines the DTO that carries data to update a post.\n *\n * @usageNotes\n * This DTO intersect {@link PostIdParam} with {@link CreatePostRequest} with omitted `topicIds` attribute.\n */\nexport class UpdatePostRequest extends IntersectionType(\n  PostIdParam,\n  OmitType(CreatePostRequest, ['topicIds'] as const),\n) {\n  /**\n   * Transform the DTO into the related entity.\n   *\n   * @param request The request DTO to transform\n   *\n   * @returns The `Post` entity\n   */\n  static toEntity(request: UpdatePostRequest): Post {\n    return new Post(request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostTopicsRequest.html":{"url":"classes/UpdatePostTopicsRequest.html","title":"class - UpdatePostTopicsRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostTopicsRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/posts/dto/requests/update-post-topics-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data to update a post topics.\nThis DTO intersect TopicIdParam with CreatePostRequest with picked topicIds attribute.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType, PickType } from '@nestjs/swagger';\nimport { TopicIdParam } from '../../../topics/dto/params/topic-id.param';\nimport { CreatePostRequest } from './create-post-request.dto';\n\n/**\n * Defines the DTO that carries data to update a post topics.\n *\n * @usageNotes\n * This DTO intersect {@link TopicIdParam} with {@link CreatePostRequest} with picked `topicIds` attribute.\n */\nexport class UpdatePostTopicsRequest extends IntersectionType(\n  TopicIdParam,\n  PickType(CreatePostRequest, ['topicIds'] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTopicRequest.html":{"url":"classes/UpdateTopicRequest.html","title":"class - UpdateTopicRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTopicRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/topics/dto/requests/update-topic-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data to update a topic.\nThis DTO intersect TopicIdParam with CreateTopicRequest.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                toEntity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        toEntity\n                        \n                    \n                \n            \n            \n                \n                    \n                    toEntity(request: UpdateTopicRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/services/topics/dto/requests/update-topic-request.dto.ts:23\n                \n            \n\n\n            \n                \n                    Transform the DTO into the related entity.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                UpdateTopicRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request DTO to transform\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Topic\n\n                    \n                    \n                        The Topic entity\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from '@nestjs/swagger';\nimport { Topic } from '../../entities/topic.entity';\nimport { TopicIdParam } from '../params/topic-id.param';\nimport { CreateTopicRequest } from './create-topic-request.dto';\n\n/**\n * Defines the DTO that carries data to update a topic.\n *\n * @usageNotes\n * This DTO intersect {@link TopicIdParam} with {@link CreateTopicRequest}.\n */\nexport class UpdateTopicRequest extends IntersectionType(\n  TopicIdParam,\n  CreateTopicRequest,\n) {\n  /**\n   * Transform the DTO into the related entity.\n   *\n   * @param request The request DTO to transform\n   *\n   * @returns The `Topic` entity\n   */\n  static toEntity(request: UpdateTopicRequest): Topic {\n    return new Topic(request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserPasswordRequest.html":{"url":"classes/UpdateUserPasswordRequest.html","title":"class - UpdateUserPasswordRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserPasswordRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/dto/requests/users/update-user-password-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data to update a user password.\nThis DTO intersect UserIdParam with CreateUserRequest with picked password attribute.\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType, PickType } from '@nestjs/swagger';\nimport { UserIdParam } from '../../params/users/user-id.param';\nimport { CreateUserRequest } from './create-user-request.dto';\n\n/**\n * Defines the DTO that carries data to update a user password.\n *\n * @usageNotes\n * This DTO intersect {@link UserIdParam} with {@link CreateUserRequest} with picked `password` attribute.\n */\nexport class UpdateUserPasswordRequest extends IntersectionType(\n  UserIdParam,\n  PickType(CreateUserRequest, ['password'] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileAvatarRequest.html":{"url":"classes/UpdateUserProfileAvatarRequest.html","title":"class - UpdateUserProfileAvatarRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileAvatarRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/dto/requests/user-profiles/update-user-profile-avatar-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data to update a user profile avatar.\nThis DTO extends UserIdParam and contains additional attribute:\n\navatar: The avatar of user profile\n\n\n            \n\n            \n                Extends\n            \n            \n                        UserIdParam\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'binary', description: 'The avatar of user profile'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/requests/user-profiles/update-user-profile-avatar-request.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsUUID('4')@IsUserExist()@ApiProperty({description: 'The id of user', format: 'uuid', example: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UserIdParam\n\n                            \n                        \n                    \n                        \n                                Defined in         UserIdParam:18\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserIdParam } from '../../params/users/user-id.param';\n\n/**\n * Defines the DTO that carries data to update a user profile avatar.\n *\n * @usageNotes\n * This DTO extends {@link UserIdParam} and contains additional attribute:\n * - `avatar`: The avatar of user profile\n */\nexport class UpdateUserProfileAvatarRequest extends UserIdParam {\n  @ApiProperty({\n    type: 'string',\n    format: 'binary',\n    description: 'The avatar of user profile',\n  })\n  avatar: Express.Multer.File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileRequest.html":{"url":"classes/UpdateUserProfileRequest.html","title":"class - UpdateUserProfileRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/dto/requests/user-profiles/update-user-profile-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data to update a user profile.\nThis DTO intersect UserIdParam with CreateUserProfileRequest.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                toEntity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        toEntity\n                        \n                    \n                \n            \n            \n                \n                    \n                    toEntity(request: UpdateUserProfileRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/dto/requests/user-profiles/update-user-profile-request.dto.ts:23\n                \n            \n\n\n            \n                \n                    Transform the DTO into the related entity.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                UpdateUserProfileRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request DTO to transform\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserProfile\n\n                    \n                    \n                        The UserProfile entity\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from '@nestjs/swagger';\nimport { UserProfile } from '../../../entities/user-profile.entity';\nimport { UserIdParam } from '../../params/users/user-id.param';\nimport { CreateUserProfileRequest } from './create-user-profile-request.dto';\n\n/**\n * Defines the DTO that carries data to update a user profile.\n *\n * @usageNotes\n * This DTO intersect {@link UserIdParam} with {@link CreateUserProfileRequest}.\n */\nexport class UpdateUserProfileRequest extends IntersectionType(\n  UserIdParam,\n  CreateUserProfileRequest,\n) {\n  /**\n   * Transform the DTO into the related entity.\n   *\n   * @param request The request DTO to transform\n   *\n   * @returns The `UserProfile` entity\n   */\n  static toEntity(request: UpdateUserProfileRequest): UserProfile {\n    return new UserProfile(request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserRequest.html":{"url":"classes/UpdateUserRequest.html","title":"class - UpdateUserRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/dto/requests/users/update-user-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data to update a user.\nThis DTO intersect UserIdParam with CreateUserRequest with omitted password and profile attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                phone\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                toEntity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsEmail()@IsEmailUnique('id')@ApiProperty({description: 'The email of user', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/requests/users/update-user-request.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsPhoneNumber('ID')@IsPhoneNumberUnique('id')@ApiProperty({description: 'The phone number of user', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/requests/users/update-user-request.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@Length(4, 12)@IsUsernameUnique('id')@ApiProperty({description: 'The username of user', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/requests/users/update-user-request.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        toEntity\n                        \n                    \n                \n            \n            \n                \n                    \n                    toEntity(request: UpdateUserRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/dto/requests/users/update-user-request.dto.ts:64\n                \n            \n\n\n            \n                \n                    Transform the DTO into the related entity.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                UpdateUserRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request DTO to transform\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        The User entity\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, IntersectionType, OmitType } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsString,\n  Length,\n  IsEmail,\n  IsPhoneNumber,\n} from 'class-validator';\nimport { usersData } from '../../../../../database/data/users.data';\nimport { User } from '../../../entities/user.entity';\nimport { IsEmailUnique } from '../../../validators/is-email-unique-validator';\nimport { IsPhoneNumberUnique } from '../../../validators/is-phone-number-unique.validator';\nimport { IsUsernameUnique } from '../../../validators/is-username-unique.validator';\nimport { UserIdParam } from '../../params/users/user-id.param';\nimport { CreateUserRequest } from './create-user-request.dto';\n\n/**\n * Defines the DTO that carries data to update a user.\n *\n * @usageNotes\n * This DTO intersect {@link UserIdParam} with {@link CreateUserRequest} with omitted `password` and `profile` attribute.\n */\nexport class UpdateUserRequest extends IntersectionType(\n  UserIdParam,\n  OmitType(CreateUserRequest, ['password', 'roles', 'profile'] as const),\n) {\n  @IsNotEmpty()\n  @IsString()\n  @Length(4, 12)\n  @IsUsernameUnique('id')\n  @ApiProperty({\n    description: 'The username of user',\n    example: usersData[0].username,\n  })\n  username: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  @IsEmailUnique('id')\n  @ApiProperty({\n    description: 'The email of user',\n    example: usersData[0].email,\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsPhoneNumber('ID')\n  @IsPhoneNumberUnique('id')\n  @ApiProperty({\n    description: 'The phone number of user',\n    example: usersData[0].phone,\n  })\n  phone: string;\n\n  /**\n   * Transform the DTO into the related entity.\n   *\n   * @param request The request DTO to transform\n   *\n   * @returns The `User` entity\n   */\n  static toEntity(request: UpdateUserRequest): User {\n    return new User(request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserRolesRequest.html":{"url":"classes/UpdateUserRolesRequest.html","title":"class - UpdateUserRolesRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserRolesRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/dto/requests/users/update-user-roles-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data to update a user roles.\nThis DTO intersect UserIdParam with CreateUserRequest with picked roles attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                toEntity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        toEntity\n                        \n                    \n                \n            \n            \n                \n                    \n                    toEntity(request: UpdateUserRolesRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/dto/requests/users/update-user-roles-request.dto.ts:23\n                \n            \n\n\n            \n                \n                    Transform the DTO into the related entity.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                UpdateUserRolesRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request DTO to transform\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        The User entity\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType, PickType } from '@nestjs/swagger';\nimport { User } from '../../../entities/user.entity';\nimport { UserIdParam } from '../../params/users/user-id.param';\nimport { CreateUserRequest } from './create-user-request.dto';\n\n/**\n * Defines the DTO that carries data to update a user roles.\n *\n * @usageNotes\n * This DTO intersect {@link UserIdParam} with {@link CreateUserRequest} with picked `roles` attribute.\n */\nexport class UpdateUserRolesRequest extends IntersectionType(\n  UserIdParam,\n  PickType(CreateUserRequest, ['roles'] as const),\n) {\n  /**\n   * Transform the DTO into the related entity.\n   *\n   * @param request The request DTO to transform\n   *\n   * @returns The `User` entity\n   */\n  static toEntity(request: UpdateUserRolesRequest): User {\n    return new User(request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the user entity.\nThe user entity contains attribute:\n\nid: The id of user\nusername: The username of user\nemail: The email of user\nphone: The phone of user\npassword: The password of user\nroles: The roles of user\nlastSignedInAt: The last signed in time of user\ncreatedAt: The creation time of user\nupdatedAt: The last updation time of user\nprofile: The user profile\n\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                lastSignedInAt\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                            \n                                profile\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastSignedInAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('datetime', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserProfile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, profile => profile.user, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('set', {enum: UserRole})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Column, Entity, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { GenericEntity } from '../../../common/entities/generic.entity';\nimport { UserRole } from '../enums/user-role.enum';\nimport { UserProfile } from './user-profile.entity';\n\n/**\n * Defines the user entity.\n *\n * @usageNotes\n * The user entity contains attribute:\n * - `id`: The id of user\n * - `username`: The username of user\n * - `email`: The email of user\n * - `phone`: The phone of user\n * - `password`: The password of user\n * - `roles`: The roles of user\n * - `lastSignedInAt`: The last signed in time of user\n * - `createdAt`: The creation time of user\n * - `updatedAt`: The last updation time of user\n * - `profile`: The user profile\n */\n@Entity()\nexport class User extends GenericEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ unique: true })\n  phone: string;\n\n  @Exclude()\n  @Column()\n  password: string;\n\n  @Column('set', { enum: UserRole })\n  roles: UserRole[];\n\n  // * To be exactly the same with CreateDate & UpdateDate column, the column length should be set to 6 inside the migrations manually\n  // * `ALTER TABLE \\`user\\` ADD \\`lastSignedInAt\\` datetime(6) NULL`\n  @Column('datetime', { nullable: true })\n  lastSignedInAt?: Date | null | undefined;\n\n  @OneToOne(\n    /* istanbul ignore next */ () => UserProfile,\n    /* istanbul ignore next */ (profile: UserProfile) => profile.user,\n    {\n      cascade: true,\n    },\n  )\n  profile: UserProfile;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserByIdHook.html":{"url":"injectables/UserByIdHook.html","title":"injectable - UserByIdHook","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserByIdHook\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/permissions/hooks/users/user-by-id.hook.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines subject hook for User subject.\nIt hooks the User subject by its identifier.\nFor permissions with conditions we need to provide subject hook in UseAccessControl decorator.\nSee Subject hook\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/services/users/permissions/hooks/users/user-by-id.hook.ts:17\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The pino logger\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The users service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(undefined: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/permissions/hooks/users/user-by-id.hook.ts:38\n                \n            \n\n\n            \n                \n                    Run UserByIdHook.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The user if it exists, otherwise undefined\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Request, SubjectBeforeFilterHook } from 'nest-casl';\nimport { PinoLogger } from 'nestjs-pino';\nimport { User } from '../../../entities/user.entity';\nimport { UsersService } from '../../../users.service';\n\n/**\n * Defines subject hook for {@link User} subject.\n * It hooks the {@link User} subject by its identifier.\n *\n * @usageNotes\n * For permissions with conditions we need to provide subject hook in {@link UseAccessControl} decorator.\n *\n * @see [Subject hook](https://github.com/getjerry/nest-casl#subject-hook)\n */\n@Injectable()\nexport class UserByIdHook implements SubjectBeforeFilterHook {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param usersService The users service\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    private readonly usersService: UsersService,\n  ) {\n    this.logger.setContext(UserByIdHook.name);\n  }\n\n  /**\n   * Run {@link UserByIdHook}.\n   *\n   * @param params The request parameter\n   *\n   * @returns The user if it exists, otherwise undefined\n   */\n  async run({ params }: Request): Promise {\n    this.logger.info(`Try to call ${UserByIdHook.prototype.run.name}`);\n\n    return (await this.usersService.findById(params.id)) ?? undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserByIdPipe.html":{"url":"injectables/UserByIdPipe.html","title":"injectable - UserByIdPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserByIdPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/pipes/user-by-id.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Class defining the implementation of a pipe that parse string UUID value\nand return the promise of user entity of related identifier value.\nThe transform method will throw UnprocessableEntityException, if fail to validate the string UUID value.\nAlso the transform method will throw NotFoundException, if fail to parse the user entity from the parsed string UUID user identifier value.\nSee Pipes\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/services/users/pipes/user-by-id.pipe.ts:21\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The pino logger\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The users service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/pipes/user-by-id.pipe.ts:39\n                \n            \n\n\n            \n                \n                    {@inheritDoc PipeTransform.transform}\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, PipeTransform, ArgumentMetadata } from '@nestjs/common';\nimport { isUUID } from 'class-validator';\nimport { PinoLogger } from 'nestjs-pino';\nimport { NotFoundException } from '../../../common/exceptions/not-found.exception';\nimport { UnprocessableEntityException } from '../../../common/exceptions/unprocessable-entity.exception';\nimport { User } from '../entities/user.entity';\nimport { UsersService } from '../users.service';\n\n/**\n * Class defining the implementation of a pipe that parse string UUID value\n * and return the promise of user entity of related identifier value.\n *\n * @usageNotes\n * The transform method will throw {@link UnprocessableEntityException}, if fail to validate the string UUID value.\n *\n * Also the transform method will throw {@link NotFoundException}, if fail to parse the user entity from the parsed string UUID user identifier value.\n *\n * @see [Pipes](https://docs.nestjs.com/pipes)\n */\n@Injectable()\nexport class UserByIdPipe implements PipeTransform> {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param usersService The users service\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    private readonly usersService: UsersService,\n  ) {\n    this.logger.setContext(UserByIdPipe.name);\n  }\n\n  /**\n   * {@inheritDoc PipeTransform.transform}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async transform(value: string, metadata: ArgumentMetadata): Promise {\n    this.logger.info(`Try to call ${UserByIdPipe.prototype.transform.name}`);\n\n    if (!isUUID(value, '4')) {\n      throw new UnprocessableEntityException({\n        message: 'The given value is not a valid UUID',\n      });\n    }\n\n    const user = await this.usersService.findById(value);\n\n    if (user === null) {\n      throw new NotFoundException({\n        message: 'User not found',\n      });\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserIdParam.html":{"url":"classes/UserIdParam.html","title":"class - UserIdParam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserIdParam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/dto/params/users/user-id.param.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries the user identifier request parameter.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsUUID('4')@IsUserExist()@ApiProperty({description: 'The id of user', format: 'uuid', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/params/users/user-id.param.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsUUID } from 'class-validator';\nimport { usersData } from '../../../../../database/data/users.data';\nimport { IsUserExist } from '../../../validators/is-user-exist.validator';\n\n/**\n * Defines the DTO that carries the user identifier request parameter.\n */\nexport class UserIdParam {\n  @IsNotEmpty()\n  @IsUUID('4')\n  @IsUserExist()\n  @ApiProperty({\n    description: 'The id of user',\n    format: 'uuid',\n    example: usersData[0].id,\n  })\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserProfile.html":{"url":"entities/UserProfile.html","title":"entity - UserProfile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserProfile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/entities/user-profile.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the user profile entity.\nThe user profile entity contains attribute:\n\nid: The id of user profile, as the same as the id of user\nfirstName: The first name of user profile\nlastName: The last name of user profile\nfullName: The full name of user profile (firstName + lastName)\nbio: The bio of user profile\nlocation: The location of user profile\nwebsite: The website of user profile\nbirthDate: The birthDate of user profile\ncreatedAt: The creation time of user profile\nupdatedAt: The last updation time of user profile\navatarFileId: The id of avatar file of user profile\nuser: The profile user\navatarFile: The profile avatar file\n\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatarFile\n                            \n                            \n                                    Optional\n                                avatarFileId\n                            \n                            \n                                    Optional\n                                bio\n                            \n                            \n                                birthDate\n                            \n                            \n                                firstName\n                            \n                            \n                                id\n                            \n                            \n                                lastName\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                user\n                            \n                            \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatarFile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LocalFile | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {onDelete: 'SET NULL'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user-profile.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatarFileId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('uuid', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user-profile.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user-profile.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user-profile.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user-profile.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user-profile.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user-profile.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user-profile.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.profile, {onDelete: 'CASCADE'})@JoinColumn({name: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user-profile.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/entities/user-profile.entity.ts:43\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, OneToOne, PrimaryColumn } from 'typeorm';\nimport { GenericEntity } from '../../../common/entities/generic.entity';\nimport { LocalFile } from '../../storages/entities/local-file.entity';\nimport { User } from './user.entity';\n\n/**\n * Defines the user profile entity.\n *\n * @usageNotes\n * The user profile entity contains attribute:\n * - `id`: The id of user profile, as the same as the id of user\n * - `firstName`: The first name of user profile\n * - `lastName`: The last name of user profile\n * - `fullName`: The full name of user profile (firstName + lastName)\n * - `bio`: The bio of user profile\n * - `location`: The location of user profile\n * - `website`: The website of user profile\n * - `birthDate`: The birthDate of user profile\n * - `createdAt`: The creation time of user profile\n * - `updatedAt`: The last updation time of user profile\n * - `avatarFileId`: The id of avatar file of user profile\n * - `user`: The profile user\n * - `avatarFile`: The profile avatar file\n */\n@Entity()\nexport class UserProfile extends GenericEntity {\n  @PrimaryColumn()\n  id: string;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column('varchar', { nullable: true })\n  bio?: string | null | undefined;\n\n  @Column('varchar', { nullable: true })\n  location?: string | null | undefined;\n\n  @Column('varchar', { nullable: true })\n  website?: string | null | undefined;\n\n  @Column()\n  birthDate: Date;\n\n  @Column('uuid', { nullable: true })\n  avatarFileId?: string | undefined;\n\n  @OneToOne(\n    /* istanbul ignore next */ () => User,\n    /* istanbul ignore next */ (user: User) => user.profile,\n    {\n      onDelete: 'CASCADE',\n    },\n  )\n  @JoinColumn({ name: 'id' })\n  user: User;\n\n  @OneToOne(/* istanbul ignore next */ () => LocalFile, {\n    onDelete: 'SET NULL',\n  })\n  @JoinColumn()\n  avatarFile?: LocalFile | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProfileResponse.html":{"url":"classes/UserProfileResponse.html","title":"class - UserProfileResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProfileResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/dto/responses/user-profiles/user-profile-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data representing a user profile.\nThe DTO intersect UserIdParam with TimestampResponse.\nThe UserProfileResponse also contains user profile attribute:\n\nfirstName: The first name of user profile\nlastName: The last name of user profile\nbio: The bio of user profile\nlocation: The location of user profile\nwebsite: The website of user profile\nbirthDate: The birthDate of user profile\navatarFileId: The avatar file id of user profile\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatarFileId\n                            \n                            \n                                    Optional\n                                bio\n                            \n                            \n                                birthDate\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatarFileId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The avatar file id of user profile', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/responses/user-profiles/user-profile-response.dto.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The bio of user profile', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/responses/user-profiles/user-profile-response.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The birth date of user profile', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/responses/user-profiles/user-profile-response.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The first name of user profile', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/responses/user-profiles/user-profile-response.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The last name of user profile', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/responses/user-profiles/user-profile-response.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The location of user profile', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/responses/user-profiles/user-profile-response.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The website of user profile', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/responses/user-profiles/user-profile-response.dto.ts:58\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ApiProperty,\n  ApiPropertyOptional,\n  IntersectionType,\n} from '@nestjs/swagger';\nimport { TimestampResponse } from '../../../../../common/dto/responses/timestamp-response.dto';\nimport { localFilesData } from '../../../../../database/data/local-files.data';\nimport { userProfilesData } from '../../../../../database/data/user-profiles.data';\nimport { UserIdParam } from '../../params/users/user-id.param';\n\n/**\n * Defines the DTO that carries data representing a user profile.\n *\n * @usageNotes\n * The DTO intersect {@link UserIdParam} with {@link TimestampResponse}.\n *\n * The UserProfileResponse also contains user profile attribute:\n * - `firstName`: The first name of user profile\n * - `lastName`: The last name of user profile\n * - `bio`: The bio of user profile\n * - `location`: The location of user profile\n * - `website`: The website of user profile\n * - `birthDate`: The birthDate of user profile\n * - `avatarFileId`: The avatar file id of user profile\n */\nexport class UserProfileResponse extends IntersectionType(\n  UserIdParam,\n  TimestampResponse,\n) {\n  @ApiProperty({\n    description: 'The first name of user profile',\n    example: userProfilesData[0].firstName,\n  })\n  firstName: string;\n\n  @ApiProperty({\n    description: 'The last name of user profile',\n    example: userProfilesData[0].lastName,\n  })\n  lastName: string;\n\n  @ApiPropertyOptional({\n    description: 'The bio of user profile',\n    example: userProfilesData[0].bio,\n  })\n  bio?: string | null | undefined;\n\n  @ApiPropertyOptional({\n    description: 'The location of user profile',\n    example: userProfilesData[0].location,\n  })\n  location?: string | null | undefined;\n\n  @ApiPropertyOptional({\n    description: 'The website of user profile',\n    example: userProfilesData[0].website,\n  })\n  website?: string | null | undefined;\n\n  @ApiProperty({\n    description: 'The birth date of user profile',\n    example: userProfilesData[0].birthDate,\n  })\n  birthDate: Date;\n\n  @ApiPropertyOptional({\n    description: 'The avatar file id of user profile',\n    example: localFilesData[0].id,\n  })\n  avatarFileId?: string | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProfileSeeder.html":{"url":"classes/UserProfileSeeder.html","title":"class - UserProfileSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProfileSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/seeds/user-profile.seeder.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines UserProfile entity seeder.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(dataSource: DataSource)\n                \n            \n\n\n            \n                \n                    Defined in src/database/seeds/user-profile.seeder.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSource\n                                    \n                                            DataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Seeder } from 'typeorm-extension';\nimport { DataSource } from 'typeorm';\nimport { UserProfile } from '../../services/users/entities/user-profile.entity';\nimport { userProfilesData } from '../data/user-profiles.data';\n\n/**\n * Defines {@link UserProfile} entity seeder.\n */\nexport default class UserProfileSeeder implements Seeder {\n  async run(dataSource: DataSource): Promise {\n    await dataSource\n      .createQueryBuilder()\n      .insert()\n      .into(UserProfile)\n      .values([...userProfilesData])\n      .orIgnore()\n      .execute();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResponse.html":{"url":"classes/UserResponse.html","title":"class - UserResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/dto/responses/users/user-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the DTO that carries data representing a user.\nThe DTO intersect UserIdParam with TimestampResponse.\nThe UserResponse also contains user attribute:\n\nusername: The username of user\nemail: The email of user\nphone: The phone of user\nroles: The roles of user\nlastSignedInAt: The last signed in time of user\nprofile: The user profile\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                lastSignedInAt\n                            \n                            \n                                phone\n                            \n                            \n                                profile\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of user', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/responses/users/user-response.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastSignedInAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The last signed in time of user', example: '2023-02-11T05:24:50.680Z'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/responses/users/user-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The phone number of user', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/responses/users/user-response.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserProfileResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The profile of user', type: UserProfileResponse})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/responses/users/user-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The roles of user', enum: UserRole, isArray: true, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/responses/users/user-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The username of user', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/users/dto/responses/users/user-response.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, IntersectionType } from '@nestjs/swagger';\nimport { TimestampResponse } from '../../../../../common/dto/responses/timestamp-response.dto';\nimport { usersData } from '../../../../../database/data/users.data';\nimport { UserRole } from '../../../enums/user-role.enum';\nimport { UserIdParam } from '../../params/users/user-id.param';\nimport { UserProfileResponse } from '../user-profiles/user-profile-response.dto';\n\n/**\n * Defines the DTO that carries data representing a user.\n *\n * @usageNotes\n * The DTO intersect {@link UserIdParam} with {@link TimestampResponse}.\n *\n * The UserResponse also contains user attribute:\n * - `username`: The username of user\n * - `email`: The email of user\n * - `phone`: The phone of user\n * - `roles`: The roles of user\n * - `lastSignedInAt`: The last signed in time of user\n * - `profile`: The user profile\n */\nexport class UserResponse extends IntersectionType(\n  UserIdParam,\n  TimestampResponse,\n) {\n  @ApiProperty({\n    description: 'The username of user',\n    example: usersData[0].username,\n  })\n  username: string;\n\n  @ApiProperty({\n    description: 'The email of user',\n    example: usersData[0].email,\n  })\n  email: string;\n\n  @ApiProperty({\n    description: 'The phone number of user',\n    example: usersData[0].phone,\n  })\n  phone: string;\n\n  @ApiProperty({\n    description: 'The roles of user',\n    enum: UserRole,\n    isArray: true,\n    example: [UserRole.SuperAdmin],\n  })\n  roles: UserRole[];\n\n  @ApiProperty({\n    description: 'The last signed in time of user',\n    example: '2023-02-11T05:24:50.680Z',\n  })\n  lastSignedInAt?: Date | null | undefined;\n\n  @ApiProperty({\n    description: 'The profile of user',\n    type: UserProfileResponse,\n  })\n  profile: UserProfileResponse;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSeeder.html":{"url":"classes/UserSeeder.html","title":"class - UserSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/seeds/user.seeder.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines User entity seeder.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(dataSource: DataSource)\n                \n            \n\n\n            \n                \n                    Defined in src/database/seeds/user.seeder.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSource\n                                    \n                                            DataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Seeder } from 'typeorm-extension';\nimport { DataSource } from 'typeorm';\nimport { User } from '../../services/users/entities/user.entity';\nimport { usersData } from '../data/users.data';\n\n/**\n * Defines {@link User} entity seeder.\n */\nexport default class UserSeeder implements Seeder {\n  async run(dataSource: DataSource): Promise {\n    await dataSource\n      .createQueryBuilder()\n      .insert()\n      .into(User)\n      .values([...usersData])\n      .orIgnore()\n      .execute();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/users.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Defines the users controller.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findAllUsers\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                updateUserPassword\n                            \n                            \n                                    Async\n                                updateUserProfile\n                            \n                            \n                                    Async\n                                updateUserProfileAvatar\n                            \n                            \n                                    Async\n                                updateUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserRequest: CreateUserRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseAccessControl(UserActions.Create, User)@ApiBearerAuth()@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/users/users.controller.ts:97\n                \n            \n\n\n            \n                \n                    Create a user endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserRequest\n                                    \n                                                CreateUserRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The DTO that carries data to create a user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        The success response with 'User created' message and created user data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(undefined: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseAccessControl(UserActions.Delete, User, UserByIdHook)@ApiBearerAuth()@ApiUuidParam({name: 'id', description: 'The id of user'})@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/users/users.controller.ts:275\n                \n            \n\n\n            \n                \n                    Delete a user by a given id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The success response with 'User deleted' message.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseAccessControl(UserActions.ReadAll, User)@ApiBearerAuth()@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/users/users.controller.ts:140\n                \n            \n\n\n            \n                \n                    Get all users endpoint.\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        The success response with 'Users retrieved' message and users data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserById(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseAccessControl(UserActions.ReadById, User, UserByIdHook)@ApiBearerAuth()@ApiUuidParam({name: 'id', description: 'The id of user'})@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/users/users.controller.ts:183\n                \n            \n\n\n            \n                \n                    Get a user by a given id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The specified user to get\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        The success response with 'User retrieved' message and a user data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(undefined: User, updateUserRequest: UpdateUserRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@UseAccessControl(UserActions.Update, User, UserByIdHook)@ApiBearerAuth()@ApiUuidParam({name: 'id', description: 'The id of user'})@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/users/users.controller.ts:223\n                \n            \n\n\n            \n                \n                    Update a user by a given id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    updateUserRequest\n                                    \n                                                UpdateUserRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The DTO that carries data to update a user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The success response with 'User updated' message.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserPassword(undefined: User, updateUserPasswordRequest: UpdateUserPasswordRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id/password')@UseAccessControl(UserActions.UpdatePassword, User, UserByIdHook)@ApiBearerAuth()@ApiUuidParam({name: 'id', description: 'The id of user'})@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/users/users.controller.ts:322\n                \n            \n\n\n            \n                \n                    Update a user's password by a given id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    updateUserPasswordRequest\n                                    \n                                                UpdateUserPasswordRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The DTO that carries data to update a user's password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The success response with 'User password updated' message.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserProfile(undefined: User, updateUserProfileRequest: UpdateUserProfileRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id/profile')@UseAccessControl(UserActions.UpdateProfile, User, UserByIdHook)@ApiBearerAuth()@ApiUuidParam({name: 'id', description: 'The id of user'})@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/users/users.controller.ts:432\n                \n            \n\n\n            \n                \n                    Update a user profile by a given id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    updateUserProfileRequest\n                                    \n                                                UpdateUserProfileRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The DTO that carries data to update a user profile\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The success response with 'User profile updated' message.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserProfileAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserProfileAvatar(undefined: RequestWithAuthUser, user: User, updateUserProfileAvatarRequest: UpdateUserProfileAvatarRequest, avatar: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id/profile/avatar/upload')@UseAccessControl(UserActions.UpdateProfileAvatar, User, UserByIdHook)@ApiBearerAuth()@ApiUuidParam({name: 'id', description: 'The id of user'})@ApiFile('avatar', {dest: '/users/profiles/avatars', fileFilter: avatarFileFilterValidator, limits: undefined})@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/users/users.controller.ts:500\n                \n            \n\n\n            \n                \n                    Upload a user profile avatar by a given id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    \n                                                RequestWithAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    updateUserProfileAvatarRequest\n                                    \n                                                UpdateUserProfileAvatarRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    avatar\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user profile avatar\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserRoles(undefined: User, updateUserRolesRequest: UpdateUserRolesRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id/roles')@UseAccessControl(UserActions.UpdateRoles, User, UserByIdHook)@ApiBearerAuth()@ApiUuidParam({name: 'id', description: 'The id of user'})@ApiSuccessesResponse(['undefined'])@ApiErrorsResponse(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'])\n                \n            \n\n            \n                \n                    Defined in src/services/users/users.controller.ts:377\n                \n            \n\n\n            \n                \n                    Update a user's roles by a given id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    updateUserRolesRequest\n                                    \n                                                UpdateUserRolesRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The DTO that carries data to update a user's roles\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The success response with 'User roles updated' message.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  Req,\n  UploadedFile,\n} from '@nestjs/common';\nimport { SuccessResponse } from '../../common/dto/responses/success-response.dto';\nimport { CreateUserRequest } from './dto/requests/users/create-user-request.dto';\nimport { User } from './entities/user.entity';\nimport { UserByIdPipe } from './pipes/user-by-id.pipe';\nimport { UsersService } from './users.service';\nimport { UpdateUserRequest } from './dto/requests/users/update-user-request.dto';\nimport { ConflictException } from '../../common/exceptions/conflict.exception';\nimport { InternalServerErrorException } from '../../common/exceptions/internal-server-error.exception';\nimport { PinoLogger } from 'nestjs-pino';\nimport { UpdateUserProfileRequest } from './dto/requests/user-profiles/update-user-profile-request.dto';\nimport { StoragesService } from '../storages/storages.service';\nimport { CreateLocalFileRequest } from '../storages/dto/requests/create-local-file-request.dto';\nimport { UserProfile } from './entities/user-profile.entity';\nimport { FileGeneralAccess } from '../storages/enums/file-general-access.enum';\nimport { UserByIdHook } from './permissions/hooks/users/user-by-id.hook';\nimport { UseAccessControl } from '../auth/decorators/use-access-control.decorator';\nimport { UserActions } from './permissions/user.permissions';\nimport { UpdateUserPasswordRequest } from './dto/requests/users/update-user-password-request.dto';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { UserResponse } from './dto/responses/users/user-response.dto';\nimport { ApiErrorsResponse } from '../../common/decorators/open-api/api-errors-response.decorator';\nimport { ApiUnprocessableEntityErrorResponse } from '../../common/decorators/open-api/errors/api-unprocessable-entity-error-response.decorator';\nimport { ApiUnauthorizedErrorResponse } from '../../common/decorators/open-api/errors/api-unauthorized-error-response.decorator';\nimport { ApiForbiddenErrorResponse } from '../../common/decorators/open-api/errors/api-forbidden-error-response.decorator';\nimport { ApiConflictErrorResponse } from '../../common/decorators/open-api/errors/api-conflict-error-response.decorator';\nimport { ApiCreatedSuccessResponse } from '../../common/decorators/open-api/successes/api-created-success-response.decorator';\nimport { ApiOkSuccessResponse } from '../../common/decorators/open-api/successes/api-ok-success-response.decorator';\nimport { ApiSuccessesResponse } from '../../common/decorators/open-api/api-successes-response.decorator';\nimport { APP_VERSION } from '../../common/constants';\nimport { ApiUuidParam } from '../../common/decorators/open-api/params/api-uuid-param.decorator';\nimport { ApiFile } from '../../common/decorators/open-api/api-file.decorator';\nimport { UpdateUserProfileAvatarRequest } from './dto/requests/user-profiles/update-user-profile-avatar-request.dto';\nimport avatarFileFilterValidator from './validators/file-filters/avatar-file-filter.validator';\nimport { ApiNotFoundErrorResponse } from '../../common/decorators/open-api/errors/api-not-found-error-response.decorator';\nimport RequestWithAuthUser from '../auth/interface/request-with-auth-user.interface';\nimport { UpdateUserRolesRequest } from './dto/requests/users/update-user-roles-request.dto';\n\n/**\n * Defines the users controller.\n */\n@Controller({\n  path: 'users',\n  version: APP_VERSION,\n})\n@ApiTags('Users')\nexport class UsersController {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param usersService The users service\n   * @param storagesService The storages service\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    private readonly usersService: UsersService,\n    private readonly storagesService: StoragesService,\n  ) {\n    this.logger.setContext(UsersController.name);\n  }\n\n  /**\n   * Create a user endpoint.\n   *\n   * @param createUserRequest The DTO that carries data to create a user\n   *\n   * @returns The success response with `'User created'` message and created `user` data.\n   */\n  @Post()\n  @UseAccessControl(UserActions.Create, User)\n  @ApiBearerAuth()\n  @ApiSuccessesResponse([\n    {\n      response: ApiCreatedSuccessResponse,\n      options: {\n        model: UserResponse,\n        options: { description: 'User created' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiUnprocessableEntityErrorResponse },\n  ])\n  async createUser(\n    @Body() createUserRequest: CreateUserRequest,\n  ): Promise> {\n    this.logger.info(\n      `Try to call ${UsersController.prototype.createUser.name}`,\n    );\n\n    try {\n      return new SuccessResponse({\n        message: 'User created',\n        data: await this.usersService.create(\n          CreateUserRequest.toEntity(createUserRequest),\n        ),\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Get all users endpoint.\n   *\n   * @returns The success response with `'Users retrieved'` message and `users` data.\n   */\n  @Get()\n  @UseAccessControl(UserActions.ReadAll, User)\n  @ApiBearerAuth()\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        model: UserResponse,\n        isArray: true,\n        options: { description: 'Users retrieved' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n  ])\n  async findAllUsers(): Promise> {\n    this.logger.info(\n      `Try to call ${UsersController.prototype.findAllUsers.name}`,\n    );\n\n    try {\n      return new SuccessResponse({\n        message: 'Users retrieved',\n        data: await this.usersService.findAll(),\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Get a user by a given id endpoint.\n   *\n   * @param user The specified user to get\n   *\n   * @returns The success response with `'User retrieved'` message and a `user` data.\n   */\n  @Get(':id')\n  @UseAccessControl(UserActions.ReadById, User, UserByIdHook)\n  @ApiBearerAuth()\n  @ApiUuidParam({ name: 'id', description: 'The id of user' })\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        model: UserResponse,\n        options: { description: 'User retrieved' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiNotFoundErrorResponse },\n    { response: ApiUnprocessableEntityErrorResponse },\n  ])\n  async findUserById(\n    @Param('id', UserByIdPipe) user: User,\n  ): Promise> {\n    this.logger.info(\n      `Try to call ${UsersController.prototype.findUserById.name}`,\n    );\n\n    return new SuccessResponse({\n      message: 'User retrieved',\n      data: user,\n    });\n  }\n\n  /**\n   * Update a user by a given id endpoint.\n   *\n   * @param id The specified user id to update\n   * @param updateUserRequest The DTO that carries data to update a user\n   *\n   * @returns The success response with `'User updated'` message.\n   */\n  @Put(':id')\n  @UseAccessControl(UserActions.Update, User, UserByIdHook)\n  @ApiBearerAuth()\n  @ApiUuidParam({ name: 'id', description: 'The id of user' })\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        options: { description: 'User updated' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiNotFoundErrorResponse },\n    { response: ApiConflictErrorResponse },\n    { response: ApiUnprocessableEntityErrorResponse },\n  ])\n  async updateUser(\n    @Param('id', UserByIdPipe) { id }: User,\n    @Body() updateUserRequest: UpdateUserRequest,\n  ): Promise {\n    this.logger.info(\n      `Try to call ${UsersController.prototype.updateUser.name}`,\n    );\n\n    if (id !== updateUserRequest.id) {\n      throw new ConflictException({ message: `Inconsistent user id` });\n    }\n\n    try {\n      await this.usersService.update(\n        id,\n        UpdateUserRequest.toEntity(updateUserRequest),\n      );\n\n      return new SuccessResponse({\n        message: 'User updated',\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Delete a user by a given id endpoint.\n   *\n   * @param id The specified user id to delete\n   *\n   * @returns The success response with `'User deleted'` message.\n   */\n  @Delete(':id')\n  @UseAccessControl(UserActions.Delete, User, UserByIdHook)\n  @ApiBearerAuth()\n  @ApiUuidParam({ name: 'id', description: 'The id of user' })\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        options: { description: 'User deleted' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiNotFoundErrorResponse },\n  ])\n  async deleteUser(\n    @Param('id', UserByIdPipe) { id }: User,\n  ): Promise {\n    this.logger.info(\n      `Try to call ${UsersController.prototype.deleteUser.name}`,\n    );\n\n    try {\n      await this.usersService.delete(id);\n\n      return new SuccessResponse({\n        message: 'User deleted',\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Update a user's password by a given id endpoint.\n   *\n   * @param id The specified user id to update\n   * @param updateUserPasswordRequest The DTO that carries data to update a user's password\n   *\n   * @returns The success response with `'User password updated'` message.\n   */\n  @Put(':id/password')\n  @UseAccessControl(UserActions.UpdatePassword, User, UserByIdHook)\n  @ApiBearerAuth()\n  @ApiUuidParam({ name: 'id', description: 'The id of user' })\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        options: { description: 'User password updated' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiNotFoundErrorResponse },\n    { response: ApiConflictErrorResponse },\n    { response: ApiUnprocessableEntityErrorResponse },\n  ])\n  async updateUserPassword(\n    @Param('id', UserByIdPipe) { id }: User,\n    @Body() updateUserPasswordRequest: UpdateUserPasswordRequest,\n  ): Promise {\n    this.logger.info(\n      `Try to call ${UsersController.prototype.updateUserPassword.name}`,\n    );\n\n    if (id !== updateUserPasswordRequest.id) {\n      throw new ConflictException({ message: `Inconsistent user id` });\n    }\n\n    try {\n      await this.usersService.updatePassword(\n        id,\n        updateUserPasswordRequest.password,\n      );\n\n      return new SuccessResponse({\n        message: `User password updated`,\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Update a user's roles by a given id endpoint.\n   *\n   * @param id The specified user id to update\n   * @param updateUserRolesRequest The DTO that carries data to update a user's roles\n   *\n   * @returns The success response with `'User roles updated'` message.\n   */\n  @Put(':id/roles')\n  @UseAccessControl(UserActions.UpdateRoles, User, UserByIdHook)\n  @ApiBearerAuth()\n  @ApiUuidParam({ name: 'id', description: 'The id of user' })\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        options: { description: 'User roles updated' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiNotFoundErrorResponse },\n    { response: ApiConflictErrorResponse },\n    { response: ApiUnprocessableEntityErrorResponse },\n  ])\n  async updateUserRoles(\n    @Param('id', UserByIdPipe) { id }: User,\n    @Body() updateUserRolesRequest: UpdateUserRolesRequest,\n  ): Promise {\n    this.logger.info(\n      `Try to call ${UsersController.prototype.updateUserRoles.name}`,\n    );\n\n    if (id !== updateUserRolesRequest.id) {\n      throw new ConflictException({ message: `Inconsistent user id` });\n    }\n\n    try {\n      await this.usersService.update(\n        id,\n        UpdateUserRolesRequest.toEntity(updateUserRolesRequest),\n      );\n\n      return new SuccessResponse({\n        message: `User roles updated`,\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Update a user profile by a given id endpoint.\n   *\n   * @param id The specified user id to update\n   * @param updateUserProfileRequest The DTO that carries data to update a user profile\n   *\n   * @returns The success response with `'User profile updated'` message.\n   */\n  @Put(':id/profile')\n  @UseAccessControl(UserActions.UpdateProfile, User, UserByIdHook)\n  @ApiBearerAuth()\n  @ApiUuidParam({ name: 'id', description: 'The id of user' })\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        options: { description: 'User profile updated' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiNotFoundErrorResponse },\n    { response: ApiConflictErrorResponse },\n    { response: ApiUnprocessableEntityErrorResponse },\n  ])\n  async updateUserProfile(\n    @Param('id', UserByIdPipe) { id }: User,\n    @Body() updateUserProfileRequest: UpdateUserProfileRequest,\n  ): Promise {\n    this.logger.info(\n      `Try to call ${UsersController.prototype.updateUserProfile.name}`,\n    );\n\n    if (id !== updateUserProfileRequest.id) {\n      throw new ConflictException({ message: `Inconsistent user id` });\n    }\n\n    try {\n      await this.usersService.updateProfile(\n        id,\n        UpdateUserProfileRequest.toEntity(updateUserProfileRequest),\n      );\n\n      return new SuccessResponse({\n        message: 'User profile updated',\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Upload a user profile avatar by a given id endpoint.\n   *\n   * @param avatar The user profile avatar\n   */\n\n  /**\n   * Upload a user profile avatar by a given id endpoint.\n   *\n   * @param authUser The authenticated user\n   * @param user The specified user to update\n   * @param updateUserProfileAvatarRequest The DTO that carries data to update a user profile avatar\n   * @param avatar The user profile avatar to update\n   *\n   * @returns The success response with `'User profile avatar updated'` message.\n   */\n  @Put(':id/profile/avatar/upload')\n  @UseAccessControl(UserActions.UpdateProfileAvatar, User, UserByIdHook)\n  @ApiBearerAuth()\n  @ApiUuidParam({ name: 'id', description: 'The id of user' })\n  @ApiFile('avatar', {\n    dest: '/users/profiles/avatars',\n    fileFilter: avatarFileFilterValidator,\n    limits: { fileSize: Math.pow(1024, 2) }, // * 1 MB\n  })\n  @ApiSuccessesResponse([\n    {\n      response: ApiOkSuccessResponse,\n      options: {\n        options: { description: 'User profile avatar updated' },\n      },\n    },\n  ])\n  @ApiErrorsResponse([\n    { response: ApiUnauthorizedErrorResponse },\n    { response: ApiForbiddenErrorResponse },\n    { response: ApiNotFoundErrorResponse },\n    { response: ApiConflictErrorResponse },\n    { response: ApiUnprocessableEntityErrorResponse },\n  ])\n  async updateUserProfileAvatar(\n    @Req() { user: authUser }: RequestWithAuthUser,\n    @Param('id', UserByIdPipe) user: User,\n    @Body() updateUserProfileAvatarRequest: UpdateUserProfileAvatarRequest,\n    @UploadedFile() avatar: Express.Multer.File,\n  ): Promise {\n    this.logger.info(\n      `Try to call ${UsersController.prototype.updateUserProfileAvatar.name}`,\n    );\n\n    if (user.id !== updateUserProfileAvatarRequest.id) {\n      throw new ConflictException({ message: `Inconsistent user id` });\n    }\n\n    try {\n      const avatarFile = await this.storagesService.createLocalFile(\n        CreateLocalFileRequest.toEntity(avatar, {\n          generalAccess: FileGeneralAccess.Public,\n          uploaderId: authUser.id,\n        }),\n      );\n\n      await this.usersService.updateProfile(\n        user.id,\n        new UserProfile({\n          ...user.profile,\n          avatarFile: avatarFile,\n        }),\n      );\n\n      return new SuccessResponse({\n        message: 'User profile avatar updated',\n      });\n    } catch (error) {\n      this.logger.error(`Error occurred: ${error}`);\n\n      throw new InternalServerErrorException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nStoragesModule\n\nStoragesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nStoragesModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nIsEmailUniqueValidator\n\nIsEmailUniqueValidator\n\nUsersModule -->\n\nIsEmailUniqueValidator->UsersModule\n\n\n\n\n\nIsPhoneNumberUniqueValidator\n\nIsPhoneNumberUniqueValidator\n\nUsersModule -->\n\nIsPhoneNumberUniqueValidator->UsersModule\n\n\n\n\n\nIsUserExistValidator\n\nIsUserExistValidator\n\nUsersModule -->\n\nIsUserExistValidator->UsersModule\n\n\n\n\n\nIsUsernameUniqueValidator\n\nIsUsernameUniqueValidator\n\nUsersModule -->\n\nIsUsernameUniqueValidator->UsersModule\n\n\n\n\n\nUserByIdPipe\n\nUserByIdPipe\n\nUsersModule -->\n\nUserByIdPipe->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Defines the users module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IsEmailUniqueValidator\n                        \n                        \n                            IsPhoneNumberUniqueValidator\n                        \n                        \n                            IsUserExistValidator\n                        \n                        \n                            IsUsernameUniqueValidator\n                        \n                        \n                            UserByIdPipe\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StoragesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CaslModule } from 'nest-casl';\nimport { StoragesModule } from '../storages/storages.module';\nimport { UserProfile } from './entities/user-profile.entity';\nimport { User } from './entities/user.entity';\nimport { UserPermissions } from './permissions/user.permissions';\nimport { UserByIdPipe } from './pipes/user-by-id.pipe';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { IsEmailUniqueValidator } from './validators/is-email-unique-validator';\nimport { IsPhoneNumberUniqueValidator } from './validators/is-phone-number-unique.validator';\nimport { IsUserExistValidator } from './validators/is-user-exist.validator';\nimport { IsUsernameUniqueValidator } from './validators/is-username-unique.validator';\n\n/**\n * Defines the users module.\n */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User, UserProfile]),\n    CaslModule.forFeature({ permissions: UserPermissions }),\n    StoragesModule,\n  ],\n  providers: [\n    UsersService,\n    UserByIdPipe,\n\n    IsUserExistValidator,\n    IsUsernameUniqueValidator,\n    IsEmailUniqueValidator,\n    IsPhoneNumberUniqueValidator,\n  ],\n  controllers: [UsersController],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the users service that responsible for data storage and retrieval for user related entity.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByPhone\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updatePassword\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/services/users/users.service.ts:14\n                            \n                        \n\n                \n                    \n                            The constructor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The pino logger\n\n                                                        \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The repository of user entity\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/users.service.ts:35\n                \n            \n\n\n            \n                \n                    Creates a user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A user to create\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created user.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/users.service.ts:155\n                \n            \n\n\n            \n                \n                    Deletes a user by a given id.\nReturn true if the delete process is success, otherwise false.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the delete process is success or not.\nReturn true if the delete process is success, otherwise false.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/users.service.ts:53\n                \n            \n\n\n            \n                \n                    Gets all users.\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The users array.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/users.service.ts:102\n                \n            \n\n\n            \n                \n                    Gets a user by a given email.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The email to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The user if it exists, otherwise null.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/users.service.ts:68\n                \n            \n\n\n            \n                \n                    Gets a user by a given id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The user if it exists, otherwise null.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByPhone\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByPhone(phone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/users.service.ts:118\n                \n            \n\n\n            \n                \n                    Gets a user by a given phone.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The phone to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The user if it exists, otherwise null.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/users.service.ts:84\n                \n            \n\n\n            \n                \n                    Gets a user by a given username.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The username to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The user if it exists, otherwise null.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/users.service.ts:136\n                \n            \n\n\n            \n                \n                    Updates a user by a given id.\nReturn true if the update process is success, otherwise false.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user id to update\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user to update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the update process is success or not.\nReturn true if the update process is success, otherwise false.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassword(id: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/users.service.ts:172\n                \n            \n\n\n            \n                \n                    Updates a user password by a given id.\nReturn true if the update process is success, otherwise false.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user id to update\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user password to update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the update process is success or not.\nReturn true if the update process is success, otherwise false.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfile(id: string, userProfile: UserProfile)\n                \n            \n\n\n            \n                \n                    Defined in src/services/users/users.service.ts:193\n                \n            \n\n\n            \n                \n                    Updates a user profile by a given id.\nReturn true if the update process is success, otherwise false.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id to find\n\n                                    \n                                \n                                \n                                    userProfile\n                                    \n                                                UserProfile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user profile to update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The flag indicates whether the update process is success or not.\nReturn true if the update process is success, otherwise false.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PinoLogger } from 'nestjs-pino';\nimport { Repository } from 'typeorm';\nimport { UserProfile } from './entities/user-profile.entity';\nimport { User } from './entities/user.entity';\nimport * as argon2 from 'argon2';\n\n// * Service will be responsible for data storage and retrieval\n/**\n * Defines the users service that responsible for data storage and retrieval for user related entity.\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * The constructor.\n   *\n   * @param logger The pino logger\n   * @param usersRepository The repository of user entity\n   */\n  constructor(\n    private readonly logger: PinoLogger,\n    @InjectRepository(User) private readonly usersRepository: Repository,\n  ) {\n    this.logger.setContext(UsersService.name);\n  }\n\n  /**\n   * Creates a user.\n   *\n   * @param user A user to create\n   *\n   * @returns The created user.\n   */\n  async create(user: User): Promise {\n    this.logger.info(`Try to call ${UsersService.prototype.create.name}`);\n\n    const createdUser = this.usersRepository.create({\n      ...user,\n      password: await argon2.hash(user.password),\n    });\n\n    await this.usersRepository.save(createdUser);\n\n    return createdUser;\n  }\n\n  /**\n   * Gets all users.\n   *\n   * @returns The users array.\n   */\n  async findAll(): Promise {\n    this.logger.info(`Try to call ${UsersService.prototype.findAll.name}`);\n\n    return await this.usersRepository.find({\n      relations: { profile: true },\n    });\n  }\n\n  /**\n   * Gets a user by a given id.\n   *\n   * @param id The id to find\n   *\n   * @returns The user if it exists, otherwise null.\n   */\n  async findById(id: string): Promise {\n    this.logger.info(`Try to call ${UsersService.prototype.findById.name}`);\n\n    return await this.usersRepository.findOne({\n      where: { id },\n      relations: { profile: true },\n    });\n  }\n\n  /**\n   * Gets a user by a given username.\n   *\n   * @param username The username to find\n   *\n   * @returns The user if it exists, otherwise null.\n   */\n  async findByUsername(username: string): Promise {\n    this.logger.info(\n      `Try to call ${UsersService.prototype.findByUsername.name}`,\n    );\n\n    return await this.usersRepository.findOne({\n      where: { username },\n      relations: { profile: true },\n    });\n  }\n\n  /**\n   * Gets a user by a given email.\n   *\n   * @param email The email to find\n   *\n   * @returns The user if it exists, otherwise null.\n   */\n  async findByEmail(email: string): Promise {\n    this.logger.info(`Try to call ${UsersService.prototype.findByEmail.name}`);\n\n    return await this.usersRepository.findOne({\n      where: { email },\n      relations: { profile: true },\n    });\n  }\n\n  /**\n   * Gets a user by a given phone.\n   *\n   * @param phone The phone to find\n   *\n   * @returns The user if it exists, otherwise null.\n   */\n  async findByPhone(phone: string): Promise {\n    this.logger.info(`Try to call ${UsersService.prototype.findByPhone.name}`);\n\n    return await this.usersRepository.findOne({\n      where: { phone },\n      relations: { profile: true },\n    });\n  }\n\n  /**\n   * Updates a user by a given id.\n   *\n   * @param id The user id to update\n   * @param user The user to update\n   *\n   * @returns The flag indicates whether the update process is success or not.\n   * Return `true` if the update process is success, otherwise `false`.\n   */\n  async update(id: string, user: User): Promise {\n    this.logger.info(`Try to call ${UsersService.prototype.update.name}`);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, profile, ...userToUpdate } = user;\n\n    await this.usersRepository.update(id, userToUpdate);\n\n    return true;\n  }\n\n  /**\n   * Deletes a user by a given id.\n   *\n   * @param id The id to find\n   *\n   * @returns The flag indicates whether the delete process is success or not.\n   * Return `true` if the delete process is success, otherwise `false`.\n   */\n  async delete(id: string): Promise {\n    this.logger.info(`Try to call ${UsersService.prototype.delete.name}`);\n\n    await this.usersRepository.delete(id);\n\n    return true;\n  }\n\n  /**\n   * Updates a user password by a given id.\n   *\n   * @param id The user id to update\n   * @param password The user password to update\n   *\n   * @returns The flag indicates whether the update process is success or not.\n   * Return `true` if the update process is success, otherwise `false`.\n   */\n  async updatePassword(id: string, password: string): Promise {\n    this.logger.info(\n      `Try to call ${UsersService.prototype.updatePassword.name}`,\n    );\n\n    await this.usersRepository.update(id, {\n      password: await argon2.hash(password),\n    });\n\n    return true;\n  }\n\n  /**\n   * Updates a user profile by a given id.\n   *\n   * @param id The id to find\n   * @param userProfile The user profile to update\n   *\n   * @returns The flag indicates whether the update process is success or not.\n   * Return `true` if the update process is success, otherwise `false`.\n   */\n  async updateProfile(id: string, userProfile: UserProfile): Promise {\n    this.logger.info(\n      `Try to call ${UsersService.prototype.updateProfile.name}`,\n    );\n\n    await this.usersRepository.save({\n      ...(await this.findById(id)),\n      profile: userProfile,\n    });\n\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationErrors.html":{"url":"interfaces/ValidationErrors.html","title":"interface - ValidationErrors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationErrors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/http/validation-errors.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the base shape of validation error response type.\nThe Base Validation Error Response contains attribute:\n\nproperty: The property which is fail to validate\nconstraints: The constraint(s) of property which is fail to validate\n\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            constraints\n                                        \n                                \n                                \n                                        \n                                            property\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        constraints\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        constraints:         string[] | ValidationErrors[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string[] | ValidationErrors[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        property\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        property:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ValidationErrors {\n  property: string;\n  constraints: string[] | ValidationErrors[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/schedule : ^2.1.0\n        \n            @nestjs/swagger : ^6.2.1\n        \n            @nestjs/throttler : ^4.0.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            argon2 : ^0.30.3\n        \n            cache-manager : ^5.1.3\n        \n            cache-manager-redis-store : ^3.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            csurf : ^1.11.0\n        \n            helmet : ^6.0.0\n        \n            mysql2 : ^2.3.3\n        \n            nest-casl : ^1.8.2\n        \n            nestjs-pino : ^3.1.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pino-http : ^8.2.1\n        \n            redis : ^4.5.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.10\n        \n            typeorm-extension : ^2.6.2\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccessControlActions   (src/.../access-control-actions.enum.ts)\n                        \n                        \n                            Environment   (src/.../app.config.ts)\n                        \n                        \n                            ErrorCode   (src/.../error-code.enum.ts)\n                        \n                        \n                            FileGeneralAccess   (src/.../file-general-access.enum.ts)\n                        \n                        \n                            PostAdditionalActions   (src/.../post.permissions.ts)\n                        \n                        \n                            UserAdditionalActions   (src/.../user.permissions.ts)\n                        \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/services/auth/enums/access-control-actions.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AccessControlActions\n                    \n                \n                    \n                        \n                            Defines enum representing base possible actions that users can perform with.\n\n                        \n                    \n                        \n                            \n                                 Manage\n                            \n                        \n                        \n                            \n                                Value : manage\n                            \n                        \n                        \n                            \n                                 Create\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 ReadAll\n                            \n                        \n                        \n                            \n                                Value : read-all\n                            \n                        \n                        \n                            \n                                 ReadById\n                            \n                        \n                        \n                            \n                                Value : read-by-id\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n    src/config/app/app.config.ts\n    \n        \n            \n                \n                    \n                        \n                        Environment\n                    \n                \n                    \n                        \n                            Defines enum for application environment.\n\n                        \n                    \n                        \n                            \n                                 Development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 Staging\n                            \n                        \n                        \n                            \n                                Value : staging\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 Provision\n                            \n                        \n                        \n                            \n                                Value : provision\n                            \n                        \n                        \n                            \n                                 Test\n                            \n                        \n                        \n                            \n                                Value : test\n                            \n                        \n            \n        \n\n    src/common/enums/http/error-code.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ErrorCode\n                    \n                \n                    \n                        \n                            Defines enum for application error code.\n\n                        \n                    \n                        \n                            \n                                 ErrorUnauthorized\n                            \n                        \n                        \n                            \n                                Value : error-unauthorized\n                            \n                        \n                        \n                            \n                                 ErrorForbidden\n                            \n                        \n                        \n                            \n                                Value : error-forbidden\n                            \n                        \n                        \n                            \n                                 ErrorNotFound\n                            \n                        \n                        \n                            \n                                Value : error-not-found\n                            \n                        \n                        \n                            \n                                 ErrorRequestTimeout\n                            \n                        \n                        \n                            \n                                Value : error-request-timeout\n                            \n                        \n                        \n                            \n                                 ErrorConflict\n                            \n                        \n                        \n                            \n                                Value : error-conflict\n                            \n                        \n                        \n                            \n                                 ErrorContentTooLarge\n                            \n                        \n                        \n                            \n                                Value : error-content-too-large\n                            \n                        \n                        \n                            \n                                 ErrorUnprocessableEntity\n                            \n                        \n                        \n                            \n                                Value : error-unprocessable-entity\n                            \n                        \n                        \n                            \n                                 ErrorTooManyRequests\n                            \n                        \n                        \n                            \n                                Value : error-too-many-requests\n                            \n                        \n                        \n                            \n                                 ErrorInternalServerError\n                            \n                        \n                        \n                            \n                                Value : error-internal-server-error\n                            \n                        \n                        \n                            \n                                 ErrorInputValidation\n                            \n                        \n                        \n                            \n                                Value : error-input-validation\n                            \n                        \n            \n        \n\n    src/services/storages/enums/file-general-access.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        FileGeneralAccess\n                    \n                \n                    \n                        \n                            Defines enum for application file general access.\n\n                        \n                    \n                        \n                            \n                                 Private\n                            \n                        \n                        \n                            \n                                Value : private\n                            \n                        \n                        \n                            \n                                 Public\n                            \n                        \n                        \n                            \n                                Value : public\n                            \n                        \n            \n        \n\n    src/services/posts/permissions/post.permissions.ts\n    \n        \n            \n                \n                    \n                        \n                        PostAdditionalActions\n                    \n                \n                    \n                        \n                            Defines type for Post Actions.\n\n                        \n                    \n                        \n                            \n                                 UpdateTopics\n                            \n                        \n                        \n                            \n                                Value : update-topics\n                            \n                        \n            \n        \n\n    src/services/users/permissions/user.permissions.ts\n    \n        \n            \n                \n                    \n                        \n                        UserAdditionalActions\n                    \n                \n                    \n                        \n                            Defines type for User Actions.\n\n                        \n                    \n                        \n                            \n                                 UpdatePassword\n                            \n                        \n                        \n                            \n                                Value : update-password\n                            \n                        \n                        \n                            \n                                 UpdateRoles\n                            \n                        \n                        \n                            \n                                Value : update-roles\n                            \n                        \n                        \n                            \n                                 UpdateProfile\n                            \n                        \n                        \n                            \n                                Value : update-profile\n                            \n                        \n                        \n                            \n                                 UpdateProfileAvatar\n                            \n                        \n                        \n                            \n                                Value : update-profile-avatar\n                            \n                        \n            \n        \n\n    src/services/users/enums/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                    \n                        \n                            Defines enum for application user role.\n\n                        \n                    \n                        \n                            \n                                 SuperAdmin\n                            \n                        \n                        \n                            \n                                Value : super-admin\n                            \n                        \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            csurfMiddleware   (src/.../csurf.middleware.ts)\n                        \n                        \n                            IsEmailUnique   (src/.../is-email-unique-validator.ts)\n                        \n                        \n                            isEnvValid   (src/.../is-env-valid.validator.util.ts)\n                        \n                        \n                            isFalse   (src/.../to-boolean.transformer.util.ts)\n                        \n                        \n                            IsLocalFileExist   (src/.../is-local-file-exist.validator.ts)\n                        \n                        \n                            IsNameUnique   (src/.../is-name-unique.validator.ts)\n                        \n                        \n                            IsPhoneNumberUnique   (src/.../is-phone-number-unique.validator.ts)\n                        \n                        \n                            IsPostExist   (src/.../is-post-exist.validator.ts)\n                        \n                        \n                            IsTopicExist   (src/.../is-topic-exist.validator.ts)\n                        \n                        \n                            isTrue   (src/.../to-boolean.transformer.util.ts)\n                        \n                        \n                            IsUserExist   (src/.../is-user-exist.validator.ts)\n                        \n                        \n                            IsUsernameUnique   (src/.../is-username-unique.validator.ts)\n                        \n                        \n                            LocalFileInterceptor   (src/.../local-file-interceptor.ts)\n                        \n                        \n                            loggerMiddleware   (src/.../logger.middleware.ts)\n                        \n                        \n                            NotToBeCached   (src/.../not-to-be-cached.decorator.ts)\n                        \n                        \n                            NotToBeTimeouted   (src/.../not-to-be-timeouted.decorator.ts)\n                        \n                        \n                            NotToBeTransformed   (src/.../not-to-be-transformed.decorator.ts)\n                        \n                        \n                            toBoolean   (src/.../to-boolean.transformer.util.ts)\n                        \n                        \n                            toNumber   (src/.../to-number.transformer.util.ts)\n                        \n                        \n                            UseAccessControl   (src/.../use-access-control.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Defines the application bootstrapping function.\n\n\n                \n            \n        \n    \n    src/common/middlewares/csurf.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        csurfMiddleware\n                        \n                    \n                \n            \n            \n                \ncsurfMiddleware(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n\n\n            \n                \n                    Embed a XSRF token into the local cookies.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The incoming request\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to serve\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The next function after this method in middleware order\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/services/users/validators/is-email-unique-validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsEmailUnique\n                        \n                    \n                \n            \n            \n                \nIsEmailUnique(identifierKey?, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                    IsEmailUnique decorator.\nTo validate uniqueness against existing value, use the identifierKey to compare the incoming identifier is equal to the existing identifier,\nif it equals then it would be bypassed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    identifierKey\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The identifier field, used when the given resources are going to be updated\n\n                                    \n                                \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The additional validation options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            @IsEmailUnique()\n@IsEmailUnique(&#39;id&#39;)\n                        \n                    \n                \n            \n        \n    \n    src/common/utils/validators/is-env-valid.validator.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isEnvValid\n                        \n                    \n                \n            \n            \n                \nisEnvValid(env: Record, envVariablesClass: ClassConstructor)\n                \n            \n\n\n\n\n            \n                \n                    Function to validate environment variables based on given environment variables class.\nThis function works as custom validate function for configuration > schema validation.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    env\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The environment variables from most of the time is process.env\n\n                                    \n                                \n                                \n                                    envVariablesClass\n                                    \n                                            ClassConstructor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The class hold environment variables property\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            isEnvValid(process.env, EnvironmentVariables)\n\n                        \n                    \n                \n            \n        \n    \n    src/common/utils/transformers/to-boolean.transformer.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isFalse\n                        \n                    \n                \n            \n            \n                \nisFalse(value)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        current value to be processed\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if value is said 'false', ie., if it is equal to the boolean\nfalse or the string \"false\"\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTrue\n                        \n                    \n                \n            \n            \n                \nisTrue(value)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        current value to be processed\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if value is said 'true', ie., if it is equal to the boolean\ntrue or the string \"true\"\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toBoolean\n                        \n                    \n                \n            \n            \n                \ntoBoolean(value)\n                \n            \n\n\n\n\n            \n                \n                    Defines transformer to transform incoming value (most of the incoming value is string),\nto its respective boolean type, (ex: 'true' are transformer into true).\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The incoming value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            ...\n`@IsNotEmpty()`\n`@IsBoolean()`\n`@Transform(({ value }) =&gt; toBoolean(value))`\nDEBUG: boolean;\n...\n\n                        \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        The boolean-ed value.\n\n                    \n                \n            \n        \n    \n    src/services/storages/validators/is-local-file-exist.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsLocalFileExist\n                        \n                    \n                \n            \n            \n                \nIsLocalFileExist(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                    IsLocalFileExist decorator.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The additional validation options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            @IsLocalFileExist()\n                        \n                    \n                \n            \n        \n    \n    src/services/topics/validators/is-name-unique.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsNameUnique\n                        \n                    \n                \n            \n            \n                \nIsNameUnique(identifierKey?, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                    IsNameUnique decorator.\nTo validate uniqueness against existing value, use the identifierKey to compare the incoming identifier is equal to the existing identifier,\nif it equals then it would be bypassed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    identifierKey\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The identifier field, used when the given resources are going to be updated\n\n                                    \n                                \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The additional validation options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            @IsNameUnique()\n@IsNameUnique(&#39;id&#39;)\n                        \n                    \n                \n            \n        \n    \n    src/services/users/validators/is-phone-number-unique.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsPhoneNumberUnique\n                        \n                    \n                \n            \n            \n                \nIsPhoneNumberUnique(identifierKey?, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                    IsPhoneNumberUnique decorator.\nTo validate uniqueness against existing value, use the identifierKey to compare the incoming identifier is equal to the existing identifier,\nif it equals then it would be bypassed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    identifierKey\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The identifier field, used when the given resources are going to be updated\n\n                                    \n                                \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The additional validation options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            @IsPhoneNumberUnique()\n@IsPhoneNumberUnique(&#39;id&#39;)\n                        \n                    \n                \n            \n        \n    \n    src/services/posts/validators/is-post-exist.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsPostExist\n                        \n                    \n                \n            \n            \n                \nIsPostExist(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                    IsPostExist decorator.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The additional validation options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            @IsPostExist()\n                        \n                    \n                \n            \n        \n    \n    src/services/topics/validators/is-topic-exist.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsTopicExist\n                        \n                    \n                \n            \n            \n                \nIsTopicExist(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                    IsTopicExist decorator.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The additional validation options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            @IsTopicExist()\n                        \n                    \n                \n            \n        \n    \n    src/services/users/validators/is-user-exist.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsUserExist\n                        \n                    \n                \n            \n            \n                \nIsUserExist(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                    IsUserExist decorator.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The additional validation options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            @IsUserExist()\n                        \n                    \n                \n            \n        \n    \n    src/services/users/validators/is-username-unique.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsUsernameUnique\n                        \n                    \n                \n            \n            \n                \nIsUsernameUnique(identifierKey?, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                    IsUsernameUnique decorator.\nTo validate uniqueness against existing value, use the identifierKey to compare the incoming identifier is equal to the existing identifier,\nif it equals then it would be bypassed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    identifierKey\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The identifier field, used when the given resources are going to be updated\n\n                                    \n                                \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The additional validation options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            @IsUsernameUnique()\n@IsUsernameUnique(&#39;id&#39;)\n                        \n                    \n                \n            \n        \n    \n    src/services/storages/interceptors/local-file-interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LocalFileInterceptor\n                        \n                    \n                \n            \n            \n                \nLocalFileInterceptor(fieldName: string, localOptions?: MulterOptions)\n                \n            \n\n\n\n\n            \n                \n                    Defines file interceptor that extend the default FileInterceptor in a mixin pattern.\nThis interceptor is going to load the multer options from the configuration\nand override the loaded configuration with the supplied localOptions, if any.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fieldName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The field name which contains the file\n\n                                    \n                                \n                                \n                                    localOptions\n                                    \n                                            MulterOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The multer options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Type\n\n                    \n                    \n                        The local file interceptor\n\n                    \n                \n            \n        \n    \n    src/common/middlewares/logger.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loggerMiddleware\n                        \n                    \n                \n            \n            \n                \nloggerMiddleware(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n\n\n            \n                \n                    Logging every http response on finish.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The incoming request\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to serve\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The next function after this method in middleware order\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/common/decorators/interceptors/not-to-be-cached.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NotToBeCached\n                        \n                    \n                \n            \n            \n                \nNotToBeCached()\n                \n            \n\n\n\n\n            \n                \n                    Decorator that combine multiple decorators to apply cache implementation,\nto the scope of controller or method, depending on its context.\nThe cached itself is enabled in global-scoped by default.\n\n\n                    \n                        Example :\n                        \n                            NotToBeCached()\n                        \n                    \n                \n            \n        \n    \n    src/common/decorators/interceptors/not-to-be-timeouted.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NotToBeTimeouted\n                        \n                    \n                \n            \n            \n                \nNotToBeTimeouted()\n                \n            \n\n\n\n\n            \n                \n                    Decorator that combine multiple decorators to apply timeout implementation,\nto the scope of controller or method, depending on its context.\nThe timeout itself is enabled in global-scoped by default.\n\n\n                    \n                        Example :\n                        \n                            NotToBeTimeouted()\n                        \n                    \n                \n            \n        \n    \n    src/common/decorators/interceptors/not-to-be-transformed.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NotToBeTransformed\n                        \n                    \n                \n            \n            \n                \nNotToBeTransformed()\n                \n            \n\n\n\n\n            \n                \n                    Decorator that combine multiple decorators to apply transform implementation,\nto the scope of controller or method, depending on its context.\nThe transformed itself is enabled in global-scoped by default.\n\n\n                    \n                        Example :\n                        \n                            NotToBeTransformed()\n                        \n                    \n                \n            \n        \n    \n    src/common/utils/transformers/to-number.transformer.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toNumber\n                        \n                    \n                \n            \n            \n                \ntoNumber(value)\n                \n            \n\n\n\n\n            \n                \n                    Defines transformer to transform incoming value (most of the incoming value is string),\nto its respective number type, (ex: '1' are transformer into 1).\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The incoming value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            ...\n`@IsNotEmpty()`\n`@IsNumber()`\n`@Transform(({ value }) =&gt; toNumber(value))`\nLOGGER_BUFFER: number;\n...\n\n                        \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The number-ed value.\n\n                    \n                \n            \n        \n    \n    src/services/auth/decorators/use-access-control.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UseAccessControl\n                        \n                    \n                \n            \n            \n                \nUseAccessControl(action: string, subject: AnyClass, subjectHook?)\n                \n            \n\n\n\n\n            \n                \n                    Decorator that set a specified route path or controller or any below method to be accessible\ncontrolled by a combination from JwtAuthGuard, AccessGuard and UseAbility.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    action\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The action representing action that the user can perform\n\n                                    \n                                \n                                \n                                    subject\n                                    \n                                            AnyClass\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The subject representing the user who perform\n\n                                    \n                                \n                                \n                                    subjectHook\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The subject hook to apply permissions with conditions\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nCopyright (c) 2022 Farista Latuconsina\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonServicesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ServicesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StoragesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TopicsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CommonServicesModule\n\n\n\ncluster_CommonServicesModule_imports\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_ServicesModule\n\n\n\ncluster_ServicesModule_imports\n\n\n\ncluster_StoragesModule\n\n\n\ncluster_StoragesModule_exports\n\n\n\ncluster_StoragesModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_TopicsModule\n\n\n\ncluster_TopicsModule_exports\n\n\n\ncluster_TopicsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nCommonServicesModule\n\nCommonServicesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommonServicesModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nServicesModule\n\nServicesModule\n\nAppModule -->\n\nServicesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nServicesModule -->\n\nUsersModule->ServicesModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nServicesModule -->\n\nAuthModule->ServicesModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nCommonServicesModule -->\n\nTasksModule->CommonServicesModule\n\n\n\n\n\nTopicsModule\n\nTopicsModule\n\nServicesModule -->\n\nTopicsModule->ServicesModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTopicsModule->PostsModule\n\n\n\n\n\nTopicsService \n\nTopicsService \n\nTopicsService  -->\n\nTopicsModule->TopicsService \n\n\n\nServicesModule -->\n\nPostsModule->ServicesModule\n\n\n\n\n\nIsPostExistValidator\n\nIsPostExistValidator\n\nPostsModule -->\n\nIsPostExistValidator->PostsModule\n\n\n\n\n\nPostByIdPipe\n\nPostByIdPipe\n\nPostsModule -->\n\nPostByIdPipe->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nStoragesModule\n\nStoragesModule\n\nServicesModule -->\n\nStoragesModule->ServicesModule\n\n\n\nUsersModule -->\n\nStoragesModule->UsersModule\n\n\n\n\n\nStoragesService \n\nStoragesService \n\nStoragesService  -->\n\nStoragesModule->StoragesService \n\n\n\n\n\nIsLocalFileExistValidator\n\nIsLocalFileExistValidator\n\nStoragesModule -->\n\nIsLocalFileExistValidator->StoragesModule\n\n\n\n\n\nStoragesService\n\nStoragesService\n\nStoragesModule -->\n\nStoragesService->StoragesModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\nIsNameUniqueValidator\n\nIsNameUniqueValidator\n\nTopicsModule -->\n\nIsNameUniqueValidator->TopicsModule\n\n\n\n\n\nIsTopicExistValidator\n\nIsTopicExistValidator\n\nTopicsModule -->\n\nIsTopicExistValidator->TopicsModule\n\n\n\n\n\nTopicByIdPipe\n\nTopicByIdPipe\n\nTopicsModule -->\n\nTopicByIdPipe->TopicsModule\n\n\n\n\n\nTopicsService\n\nTopicsService\n\nTopicsModule -->\n\nTopicsService->TopicsModule\n\n\n\n\n\nIsEmailUniqueValidator\n\nIsEmailUniqueValidator\n\nUsersModule -->\n\nIsEmailUniqueValidator->UsersModule\n\n\n\n\n\nIsPhoneNumberUniqueValidator\n\nIsPhoneNumberUniqueValidator\n\nUsersModule -->\n\nIsPhoneNumberUniqueValidator->UsersModule\n\n\n\n\n\nIsUserExistValidator\n\nIsUserExistValidator\n\nUsersModule -->\n\nIsUserExistValidator->UsersModule\n\n\n\n\n\nIsUsernameUniqueValidator\n\nIsUsernameUniqueValidator\n\nUsersModule -->\n\nIsUsernameUniqueValidator->UsersModule\n\n\n\n\n\nUserByIdPipe\n\nUserByIdPipe\n\nUsersModule -->\n\nUserByIdPipe->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    30 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    77 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : This is my personal full and long-term-practice.\n        \n            License : MIT\n        \n            Author : Farista Latuconsina\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiClientErrorResponse   (src/.../api-error-response.decorator.ts)\n                        \n                        \n                            ApiCustomErrorResponse   (src/.../api-error-response.decorator.ts)\n                        \n                        \n                            ApiCustomSuccessfulResponse   (src/.../api-success-response.decorator.ts)\n                        \n                        \n                            ApiServerErrorResponse   (src/.../api-error-response.decorator.ts)\n                        \n                        \n                            ApiSuccessfulResponse   (src/.../api-success-response.decorator.ts)\n                        \n                        \n                            PostActions   (src/.../post.permissions.ts)\n                        \n                        \n                            PostSubjects   (src/.../post.permissions.ts)\n                        \n                        \n                            TopicActions   (src/.../topic.permissions.ts)\n                        \n                        \n                            TopicSubjects   (src/.../topic.permissions.ts)\n                        \n                        \n                            UserActions   (src/.../user.permissions.ts)\n                        \n                        \n                            UserSubjects   (src/.../user.permissions.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/open-api/api-error-response.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    ApiClientErrorResponse\n                \n            \n            \n                \n                    Defines the type of api client error response.\n\n                \n            \n            \n                \n                         |  |  |  |  |  |  |  |  |  |  |  |  | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ApiCustomErrorResponse\n                \n            \n            \n                \n                    Defines the type of custom api error response.\n\n                \n            \n            \n                \n                         |  |  |  |  |  |  | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ApiServerErrorResponse\n                \n            \n            \n                \n                    Defines the type of api server error response.\n\n                \n            \n            \n                \n                         |  |  |  | \n\n                \n            \n        \n    \n    src/common/decorators/open-api/api-success-response.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    ApiCustomSuccessfulResponse\n                \n            \n            \n                \n                    Defines the type of api custom successful response.\n\n                \n            \n            \n                \n                         |  | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ApiSuccessfulResponse\n                \n            \n            \n                \n                    Defines the type of api successful response.\n\n                \n            \n            \n                \n                         |  |  | \n\n                \n            \n        \n    \n    src/services/posts/permissions/post.permissions.ts\n    \n    \n        \n            \n                \n                    \n                    PostActions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PostSubjects\n                \n            \n            \n                \n                    Defines type for Post Subjects.\n\n                \n            \n            \n                \n                        InferSubjects<>\n\n                \n            \n        \n    \n    src/services/topics/permissions/topic.permissions.ts\n    \n    \n        \n            \n                \n                    \n                    TopicActions\n                \n            \n            \n                \n                    Defines type for Topic Actions.\n\n                \n            \n            \n                \n                            AccessControlActions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TopicSubjects\n                \n            \n            \n                \n                    Defines type for Topic Subjects.\n\n                \n            \n            \n                \n                        InferSubjects<>\n\n                \n            \n        \n    \n    src/services/users/permissions/user.permissions.ts\n    \n    \n        \n            \n                \n                    \n                    UserActions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UserSubjects\n                \n            \n            \n                \n                    Defines type for User Subjects.\n\n                \n            \n            \n                \n                        InferSubjects<>\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
